
toftest1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e44  08003e14  08003e14  00004e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  08004c58  08004c58  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c58  08004c58  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004c60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  20000064  08004cc4  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08004cc4  0000662c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077de  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001930  00000000  00000000  0000d86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0000f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000629  00000000  00000000  0000f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174a7  00000000  00000000  0000ffe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0b8  00000000  00000000  00027488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a87  00000000  00000000  00032540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4fc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002598  00000000  00000000  000b500c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b75a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dfc 	.word	0x08003dfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003dfc 	.word	0x08003dfc

0800014c <scanI2CBus>:
uint8_t stop_variable = 50;
uint16_t timeout_start_ms = 50;
uint16_t io_timeout = 50;
uint8_t did_timeout = 50;

void scanI2CBus(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
    char buffer[16];
    SSD1306_Clear();
 8000152:	f003 f892 	bl	800327a <SSD1306_Clear>
    SSD1306_GotoXY(0, 0);
 8000156:	2100      	movs	r1, #0
 8000158:	2000      	movs	r0, #0
 800015a:	f002 ffd5 	bl	8003108 <SSD1306_GotoXY>
    SSD1306_Puts("I2C Scan:", &Font_11x18, 1);
 800015e:	2201      	movs	r2, #1
 8000160:	491b      	ldr	r1, [pc, #108]	@ (80001d0 <scanI2CBus+0x84>)
 8000162:	481c      	ldr	r0, [pc, #112]	@ (80001d4 <scanI2CBus+0x88>)
 8000164:	f003 f864 	bl	8003230 <SSD1306_Puts>

    for (uint8_t address = 1; address < 128; address++) {
 8000168:	2301      	movs	r3, #1
 800016a:	75fb      	strb	r3, [r7, #23]
 800016c:	e024      	b.n	80001b8 <scanI2CBus+0x6c>
        // Perform an I2C write operation to check if the device responds
        if (HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 1, 10) == HAL_OK) {
 800016e:	7dfb      	ldrb	r3, [r7, #23]
 8000170:	b29b      	uxth	r3, r3
 8000172:	005b      	lsls	r3, r3, #1
 8000174:	b299      	uxth	r1, r3
 8000176:	230a      	movs	r3, #10
 8000178:	2201      	movs	r2, #1
 800017a:	4817      	ldr	r0, [pc, #92]	@ (80001d8 <scanI2CBus+0x8c>)
 800017c:	f001 fbf0 	bl	8001960 <HAL_I2C_IsDeviceReady>
 8000180:	4603      	mov	r3, r0
 8000182:	2b00      	cmp	r3, #0
 8000184:	d115      	bne.n	80001b2 <scanI2CBus+0x66>
            snprintf(buffer, sizeof(buffer), "Found: 0x%02X", address);
 8000186:	7dfb      	ldrb	r3, [r7, #23]
 8000188:	1d38      	adds	r0, r7, #4
 800018a:	4a14      	ldr	r2, [pc, #80]	@ (80001dc <scanI2CBus+0x90>)
 800018c:	2110      	movs	r1, #16
 800018e:	f003 f971 	bl	8003474 <sniprintf>
            SSD1306_GotoXY(0, 30);
 8000192:	211e      	movs	r1, #30
 8000194:	2000      	movs	r0, #0
 8000196:	f002 ffb7 	bl	8003108 <SSD1306_GotoXY>
            SSD1306_Puts(buffer, &Font_11x18, 1);
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	2201      	movs	r2, #1
 800019e:	490c      	ldr	r1, [pc, #48]	@ (80001d0 <scanI2CBus+0x84>)
 80001a0:	4618      	mov	r0, r3
 80001a2:	f003 f845 	bl	8003230 <SSD1306_Puts>
            SSD1306_UpdateScreen();
 80001a6:	f002 ff0b 	bl	8002fc0 <SSD1306_UpdateScreen>
            HAL_Delay(1000);
 80001aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ae:	f000 fb8b 	bl	80008c8 <HAL_Delay>
    for (uint8_t address = 1; address < 128; address++) {
 80001b2:	7dfb      	ldrb	r3, [r7, #23]
 80001b4:	3301      	adds	r3, #1
 80001b6:	75fb      	strb	r3, [r7, #23]
 80001b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	dad6      	bge.n	800016e <scanI2CBus+0x22>
            //SD1306_Clear();// Delay to display each address found
        }
    }
    HAL_Delay(2000);  // Delay at the end of the scan
 80001c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001c4:	f000 fb80 	bl	80008c8 <HAL_Delay>
}
 80001c8:	bf00      	nop
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	08003e14 	.word	0x08003e14
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08003e20 	.word	0x08003e20

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b08a      	sub	sp, #40	@ 0x28
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f000 fb0d 	bl	8000804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f95f 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 f9c7 	bl	8000580 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001f2:	f000 f997 	bl	8000524 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize ToF Sensor

  SSD1306_Init();
 80001f6:	f002 fe1f 	bl	8002e38 <SSD1306_Init>
//        SSD1306_Stopscroll();
//        SSD1306_Clear();

  // Initialize the display first
  // Before init(true)
  SSD1306_GotoXY(0, 30);
 80001fa:	211e      	movs	r1, #30
 80001fc:	2000      	movs	r0, #0
 80001fe:	f002 ff83 	bl	8003108 <SSD1306_GotoXY>
  SSD1306_Puts("Initializing", &Font_11x18, 1);
 8000202:	2201      	movs	r2, #1
 8000204:	49a0      	ldr	r1, [pc, #640]	@ (8000488 <main+0x2a8>)
 8000206:	48a1      	ldr	r0, [pc, #644]	@ (800048c <main+0x2ac>)
 8000208:	f003 f812 	bl	8003230 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800020c:	f002 fed8 	bl	8002fc0 <SSD1306_UpdateScreen>
  HAL_Delay(500);
 8000210:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000214:	f000 fb58 	bl	80008c8 <HAL_Delay>

  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000218:	489d      	ldr	r0, [pc, #628]	@ (8000490 <main+0x2b0>)
 800021a:	f000 fdf9 	bl	8000e10 <HAL_I2C_Init>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d011      	beq.n	8000248 <main+0x68>
      SSD1306_GotoXY(0, 30);
 8000224:	211e      	movs	r1, #30
 8000226:	2000      	movs	r0, #0
 8000228:	f002 ff6e 	bl	8003108 <SSD1306_GotoXY>
      SSD1306_Puts("Failed", &Font_11x18, 1);
 800022c:	2201      	movs	r2, #1
 800022e:	4996      	ldr	r1, [pc, #600]	@ (8000488 <main+0x2a8>)
 8000230:	4898      	ldr	r0, [pc, #608]	@ (8000494 <main+0x2b4>)
 8000232:	f002 fffd 	bl	8003230 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8000236:	f002 fec3 	bl	8002fc0 <SSD1306_UpdateScreen>
      HAL_Delay(2000);
 800023a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800023e:	f000 fb43 	bl	80008c8 <HAL_Delay>
      Error_Handler();
 8000242:	f000 f9db 	bl	80005fc <Error_Handler>
 8000246:	e00e      	b.n	8000266 <main+0x86>
  } else {
      SSD1306_GotoXY(0, 30);
 8000248:	211e      	movs	r1, #30
 800024a:	2000      	movs	r0, #0
 800024c:	f002 ff5c 	bl	8003108 <SSD1306_GotoXY>
      SSD1306_Puts("Success", &Font_11x18, 1);
 8000250:	2201      	movs	r2, #1
 8000252:	498d      	ldr	r1, [pc, #564]	@ (8000488 <main+0x2a8>)
 8000254:	4890      	ldr	r0, [pc, #576]	@ (8000498 <main+0x2b8>)
 8000256:	f002 ffeb 	bl	8003230 <SSD1306_Puts>
      HAL_Delay(2000);
 800025a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800025e:	f000 fb33 	bl	80008c8 <HAL_Delay>
      SSD1306_UpdateScreen();
 8000262:	f002 fead 	bl	8002fc0 <SSD1306_UpdateScreen>
  }

  SSD1306_Clear();
 8000266:	f003 f808 	bl	800327a <SSD1306_Clear>
//      SSD1306_UpdateScreen();
//      HAL_Delay(2000);
//      Error_Handler();  // Will halt the program here
//  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);  // Enable Sensor 1
 800026a:	2201      	movs	r2, #1
 800026c:	2108      	movs	r1, #8
 800026e:	488b      	ldr	r0, [pc, #556]	@ (800049c <main+0x2bc>)
 8000270:	f000 fdb6 	bl	8000de0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Disable Sensor 2
 8000274:	2200      	movs	r2, #0
 8000276:	2110      	movs	r1, #16
 8000278:	4888      	ldr	r0, [pc, #544]	@ (800049c <main+0x2bc>)
 800027a:	f000 fdb1 	bl	8000de0 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800027e:	2032      	movs	r0, #50	@ 0x32
 8000280:	f000 fb22 	bl	80008c8 <HAL_Delay>
  if (VL53L0X_Init(0x29) == HAL_OK)
 8000284:	2029      	movs	r0, #41	@ 0x29
 8000286:	f002 fd09 	bl	8002c9c <VL53L0X_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d10f      	bne.n	80002b0 <main+0xd0>
  {
	  SSD1306_GotoXY(0, 30);
 8000290:	211e      	movs	r1, #30
 8000292:	2000      	movs	r0, #0
 8000294:	f002 ff38 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts("Success", &Font_11x18, 1);
 8000298:	2201      	movs	r2, #1
 800029a:	497b      	ldr	r1, [pc, #492]	@ (8000488 <main+0x2a8>)
 800029c:	487e      	ldr	r0, [pc, #504]	@ (8000498 <main+0x2b8>)
 800029e:	f002 ffc7 	bl	8003230 <SSD1306_Puts>
	  HAL_Delay(2000);
 80002a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002a6:	f000 fb0f 	bl	80008c8 <HAL_Delay>
	  SSD1306_UpdateScreen();
 80002aa:	f002 fe89 	bl	8002fc0 <SSD1306_UpdateScreen>
 80002ae:	e00e      	b.n	80002ce <main+0xee>
  }
  else
  {
	  SSD1306_GotoXY(0, 30);
 80002b0:	211e      	movs	r1, #30
 80002b2:	2000      	movs	r0, #0
 80002b4:	f002 ff28 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts("Faild8", &Font_11x18, 1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	4973      	ldr	r1, [pc, #460]	@ (8000488 <main+0x2a8>)
 80002bc:	4878      	ldr	r0, [pc, #480]	@ (80004a0 <main+0x2c0>)
 80002be:	f002 ffb7 	bl	8003230 <SSD1306_Puts>
	  HAL_Delay(2000);
 80002c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002c6:	f000 faff 	bl	80008c8 <HAL_Delay>
	  SSD1306_UpdateScreen();
 80002ca:	f002 fe79 	bl	8002fc0 <SSD1306_UpdateScreen>
  }

  if (SetAddress(0x31) == HAL_OK)
 80002ce:	2031      	movs	r0, #49	@ 0x31
 80002d0:	f002 fd3e 	bl	8002d50 <SetAddress>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d10f      	bne.n	80002fa <main+0x11a>
  {
	  SSD1306_GotoXY(0, 30);
 80002da:	211e      	movs	r1, #30
 80002dc:	2000      	movs	r0, #0
 80002de:	f002 ff13 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts("Success", &Font_11x18, 1);
 80002e2:	2201      	movs	r2, #1
 80002e4:	4968      	ldr	r1, [pc, #416]	@ (8000488 <main+0x2a8>)
 80002e6:	486c      	ldr	r0, [pc, #432]	@ (8000498 <main+0x2b8>)
 80002e8:	f002 ffa2 	bl	8003230 <SSD1306_Puts>
	  HAL_Delay(2000);
 80002ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002f0:	f000 faea 	bl	80008c8 <HAL_Delay>
	  SSD1306_UpdateScreen();
 80002f4:	f002 fe64 	bl	8002fc0 <SSD1306_UpdateScreen>
 80002f8:	e00e      	b.n	8000318 <main+0x138>
  }
  else
  {
	  SSD1306_GotoXY(0, 30);
 80002fa:	211e      	movs	r1, #30
 80002fc:	2000      	movs	r0, #0
 80002fe:	f002 ff03 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts("Faild8", &Font_11x18, 1);
 8000302:	2201      	movs	r2, #1
 8000304:	4960      	ldr	r1, [pc, #384]	@ (8000488 <main+0x2a8>)
 8000306:	4866      	ldr	r0, [pc, #408]	@ (80004a0 <main+0x2c0>)
 8000308:	f002 ff92 	bl	8003230 <SSD1306_Puts>
	  HAL_Delay(2000);
 800030c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000310:	f000 fada 	bl	80008c8 <HAL_Delay>
	  SSD1306_UpdateScreen();
 8000314:	f002 fe54 	bl	8002fc0 <SSD1306_UpdateScreen>
  }

  //uint8_t currentAddress = 0x29;  // Default address
  //uint8_t newAddress = 0x34;      // New desired address
  //writeRegnew(currentAddress, 0x8A, newAddress & 0x7F);  // Change address
  HAL_Delay(10);
 8000318:	200a      	movs	r0, #10
 800031a:	f000 fad5 	bl	80008c8 <HAL_Delay>

  SSD1306_GotoXY(0, 30);
 800031e:	211e      	movs	r1, #30
 8000320:	2000      	movs	r0, #0
 8000322:	f002 fef1 	bl	8003108 <SSD1306_GotoXY>
  SSD1306_Puts("Initialized1", &Font_11x18, 1);
 8000326:	2201      	movs	r2, #1
 8000328:	4957      	ldr	r1, [pc, #348]	@ (8000488 <main+0x2a8>)
 800032a:	485e      	ldr	r0, [pc, #376]	@ (80004a4 <main+0x2c4>)
 800032c:	f002 ff80 	bl	8003230 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000330:	f002 fe46 	bl	8002fc0 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8000334:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000338:	f000 fac6 	bl	80008c8 <HAL_Delay>
  SSD1306_Clear();
 800033c:	f002 ff9d 	bl	800327a <SSD1306_Clear>

  scanI2CBus();
 8000340:	f7ff ff04 	bl	800014c <scanI2CBus>
  SSD1306_Clear();
 8000344:	f002 ff99 	bl	800327a <SSD1306_Clear>

  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);  // Enable Sensor 1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);  // Disable Sensor 2
 8000348:	2201      	movs	r2, #1
 800034a:	2110      	movs	r1, #16
 800034c:	4853      	ldr	r0, [pc, #332]	@ (800049c <main+0x2bc>)
 800034e:	f000 fd47 	bl	8000de0 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000352:	2032      	movs	r0, #50	@ 0x32
 8000354:	f000 fab8 	bl	80008c8 <HAL_Delay>
  if (VL53L0X_Init(0x29) == HAL_OK)
 8000358:	2029      	movs	r0, #41	@ 0x29
 800035a:	f002 fc9f 	bl	8002c9c <VL53L0X_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d10f      	bne.n	8000384 <main+0x1a4>
  {
	  SSD1306_GotoXY(0, 30);
 8000364:	211e      	movs	r1, #30
 8000366:	2000      	movs	r0, #0
 8000368:	f002 fece 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts("Success", &Font_11x18, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	4946      	ldr	r1, [pc, #280]	@ (8000488 <main+0x2a8>)
 8000370:	4849      	ldr	r0, [pc, #292]	@ (8000498 <main+0x2b8>)
 8000372:	f002 ff5d 	bl	8003230 <SSD1306_Puts>
	  HAL_Delay(2000);
 8000376:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800037a:	f000 faa5 	bl	80008c8 <HAL_Delay>
	  SSD1306_UpdateScreen();
 800037e:	f002 fe1f 	bl	8002fc0 <SSD1306_UpdateScreen>
 8000382:	e00e      	b.n	80003a2 <main+0x1c2>
  }
  else
  {
	  SSD1306_GotoXY(0, 30);
 8000384:	211e      	movs	r1, #30
 8000386:	2000      	movs	r0, #0
 8000388:	f002 febe 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts("Faild8", &Font_11x18, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	493e      	ldr	r1, [pc, #248]	@ (8000488 <main+0x2a8>)
 8000390:	4843      	ldr	r0, [pc, #268]	@ (80004a0 <main+0x2c0>)
 8000392:	f002 ff4d 	bl	8003230 <SSD1306_Puts>
	  HAL_Delay(2000);
 8000396:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800039a:	f000 fa95 	bl	80008c8 <HAL_Delay>
	  SSD1306_UpdateScreen();
 800039e:	f002 fe0f 	bl	8002fc0 <SSD1306_UpdateScreen>
  }

  if (SetAddress(0x32) == HAL_OK)
 80003a2:	2032      	movs	r0, #50	@ 0x32
 80003a4:	f002 fcd4 	bl	8002d50 <SetAddress>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d10f      	bne.n	80003ce <main+0x1ee>
  {
	  SSD1306_GotoXY(0, 30);
 80003ae:	211e      	movs	r1, #30
 80003b0:	2000      	movs	r0, #0
 80003b2:	f002 fea9 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts("Success", &Font_11x18, 1);
 80003b6:	2201      	movs	r2, #1
 80003b8:	4933      	ldr	r1, [pc, #204]	@ (8000488 <main+0x2a8>)
 80003ba:	4837      	ldr	r0, [pc, #220]	@ (8000498 <main+0x2b8>)
 80003bc:	f002 ff38 	bl	8003230 <SSD1306_Puts>
	  HAL_Delay(2000);
 80003c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003c4:	f000 fa80 	bl	80008c8 <HAL_Delay>
	  SSD1306_UpdateScreen();
 80003c8:	f002 fdfa 	bl	8002fc0 <SSD1306_UpdateScreen>
 80003cc:	e00e      	b.n	80003ec <main+0x20c>
  }
  else
  {
	  SSD1306_GotoXY(0, 30);
 80003ce:	211e      	movs	r1, #30
 80003d0:	2000      	movs	r0, #0
 80003d2:	f002 fe99 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts("Faild8", &Font_11x18, 1);
 80003d6:	2201      	movs	r2, #1
 80003d8:	492b      	ldr	r1, [pc, #172]	@ (8000488 <main+0x2a8>)
 80003da:	4831      	ldr	r0, [pc, #196]	@ (80004a0 <main+0x2c0>)
 80003dc:	f002 ff28 	bl	8003230 <SSD1306_Puts>
	  HAL_Delay(2000);
 80003e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003e4:	f000 fa70 	bl	80008c8 <HAL_Delay>
	  SSD1306_UpdateScreen();
 80003e8:	f002 fdea 	bl	8002fc0 <SSD1306_UpdateScreen>
  }

  HAL_Delay(10);
 80003ec:	200a      	movs	r0, #10
 80003ee:	f000 fa6b 	bl	80008c8 <HAL_Delay>

   SSD1306_GotoXY(0, 30);
 80003f2:	211e      	movs	r1, #30
 80003f4:	2000      	movs	r0, #0
 80003f6:	f002 fe87 	bl	8003108 <SSD1306_GotoXY>
   SSD1306_Puts("Initialized2", &Font_11x18, 1);
 80003fa:	2201      	movs	r2, #1
 80003fc:	4922      	ldr	r1, [pc, #136]	@ (8000488 <main+0x2a8>)
 80003fe:	482a      	ldr	r0, [pc, #168]	@ (80004a8 <main+0x2c8>)
 8000400:	f002 ff16 	bl	8003230 <SSD1306_Puts>
   SSD1306_UpdateScreen();
 8000404:	f002 fddc 	bl	8002fc0 <SSD1306_UpdateScreen>
   HAL_Delay(1000);
 8000408:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800040c:	f000 fa5c 	bl	80008c8 <HAL_Delay>
   SSD1306_Clear();
 8000410:	f002 ff33 	bl	800327a <SSD1306_Clear>

   scanI2CBus();
 8000414:	f7ff fe9a 	bl	800014c <scanI2CBus>
   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);  // Enable Sensor 1
   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);  // Disable Sensor 2
   scanI2CBus();
 8000418:	f7ff fe98 	bl	800014c <scanI2CBus>
   SSD1306_Clear();
 800041c:	f002 ff2d 	bl	800327a <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  distance1 = readDistance(0x31);
 8000420:	2031      	movs	r0, #49	@ 0x31
 8000422:	f002 fcad 	bl	8002d80 <readDistance>
 8000426:	4603      	mov	r3, r0
 8000428:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  distance2 = readDistance(0x32);
 800042a:	2032      	movs	r0, #50	@ 0x32
 800042c:	f002 fca8 	bl	8002d80 <readDistance>
 8000430:	4603      	mov	r3, r0
 8000432:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  //scanI2CBus();
//	  //VL53L0X_SetAddress(0x31);
//	  HAL_Delay(10);
//
//	  distance = readRangeSingleMillimeters();
	  itoa(distance1, buffer1, 10);
 8000434:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000436:	f107 0114 	add.w	r1, r7, #20
 800043a:	220a      	movs	r2, #10
 800043c:	4618      	mov	r0, r3
 800043e:	f002 ffd5 	bl	80033ec <itoa>
	  itoa(distance2, buffer2, 10);
 8000442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000444:	1d39      	adds	r1, r7, #4
 8000446:	220a      	movs	r2, #10
 8000448:	4618      	mov	r0, r3
 800044a:	f002 ffcf 	bl	80033ec <itoa>
	  //ssd1306_Fill(SSD1306_COLOR_BLACK); // Clear screen
	  //ssd1306_SetCursor(10, 10);         // Set cursor position
//	  ssd1306_WriteString(buffer, SSD1306_FONT_11x18,1); // Display text
	  SSD1306_GotoXY (37, 40);
 800044e:	2128      	movs	r1, #40	@ 0x28
 8000450:	2025      	movs	r0, #37	@ 0x25
 8000452:	f002 fe59 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts (buffer1, &Font_11x18, 1);
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	2201      	movs	r2, #1
 800045c:	490a      	ldr	r1, [pc, #40]	@ (8000488 <main+0x2a8>)
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fee6 	bl	8003230 <SSD1306_Puts>
	  SSD1306_GotoXY (37, 10);
 8000464:	210a      	movs	r1, #10
 8000466:	2025      	movs	r0, #37	@ 0x25
 8000468:	f002 fe4e 	bl	8003108 <SSD1306_GotoXY>
	  SSD1306_Puts (buffer2, &Font_11x18, 1);
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2201      	movs	r2, #1
 8000470:	4905      	ldr	r1, [pc, #20]	@ (8000488 <main+0x2a8>)
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fedc 	bl	8003230 <SSD1306_Puts>
	  SSD1306_UpdateScreen();         // Update OLED
 8000478:	f002 fda2 	bl	8002fc0 <SSD1306_UpdateScreen>

	  HAL_Delay(200); // Delay to prevent excessive updates
 800047c:	20c8      	movs	r0, #200	@ 0xc8
 800047e:	f000 fa23 	bl	80008c8 <HAL_Delay>
	  distance1 = readDistance(0x31);
 8000482:	bf00      	nop
 8000484:	e7cc      	b.n	8000420 <main+0x240>
 8000486:	bf00      	nop
 8000488:	2000000c 	.word	0x2000000c
 800048c:	08003e30 	.word	0x08003e30
 8000490:	20000088 	.word	0x20000088
 8000494:	08003e40 	.word	0x08003e40
 8000498:	08003e48 	.word	0x08003e48
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	08003e50 	.word	0x08003e50
 80004a4:	08003e58 	.word	0x08003e58
 80004a8:	08003e68 	.word	0x08003e68

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b090      	sub	sp, #64	@ 0x40
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0318 	add.w	r3, r7, #24
 80004b6:	2228      	movs	r2, #40	@ 0x28
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 f80e 	bl	80034dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d2:	2301      	movs	r3, #1
 80004d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d6:	2310      	movs	r3, #16
 80004d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004da:	2300      	movs	r3, #0
 80004dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	f107 0318 	add.w	r3, r7, #24
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 ff86 	bl	80023f4 <HAL_RCC_OscConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004ee:	f000 f885 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f2:	230f      	movs	r3, #15
 80004f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f002 f9f4 	bl	80028f8 <HAL_RCC_ClockConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000516:	f000 f871 	bl	80005fc <Error_Handler>
  }
}
 800051a:	bf00      	nop
 800051c:	3740      	adds	r7, #64	@ 0x40
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000528:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <MX_I2C1_Init+0x50>)
 800052a:	4a13      	ldr	r2, [pc, #76]	@ (8000578 <MX_I2C1_Init+0x54>)
 800052c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800052e:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_I2C1_Init+0x50>)
 8000530:	4a12      	ldr	r2, [pc, #72]	@ (800057c <MX_I2C1_Init+0x58>)
 8000532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <MX_I2C1_Init+0x50>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <MX_I2C1_Init+0x50>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_I2C1_Init+0x50>)
 8000542:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <MX_I2C1_Init+0x50>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_I2C1_Init+0x50>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <MX_I2C1_Init+0x50>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_I2C1_Init+0x50>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <MX_I2C1_Init+0x50>)
 8000562:	f000 fc55 	bl	8000e10 <HAL_I2C_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800056c:	f000 f846 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000088 	.word	0x20000088
 8000578:	40005400 	.word	0x40005400
 800057c:	00061a80 	.word	0x00061a80

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <MX_GPIO_Init+0x74>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a16      	ldr	r2, [pc, #88]	@ (80005f4 <MX_GPIO_Init+0x74>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_GPIO_Init+0x74>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_GPIO_Init+0x74>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <MX_GPIO_Init+0x74>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_GPIO_Init+0x74>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2118      	movs	r1, #24
 80005c8:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <MX_GPIO_Init+0x78>)
 80005ca:	f000 fc09 	bl	8000de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80005ce:	2318      	movs	r3, #24
 80005d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	4619      	mov	r1, r3
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <MX_GPIO_Init+0x78>)
 80005e6:	f000 fa77 	bl	8000ad8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010c00 	.word	0x40010c00

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <HAL_MspInit+0x5c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <HAL_MspInit+0x5c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <HAL_MspInit+0x5c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <HAL_MspInit+0x5c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <HAL_MspInit+0x5c>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <HAL_MspInit+0x5c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_MspInit+0x60>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <HAL_MspInit+0x60>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000
 8000668:	40010000 	.word	0x40010000

0800066c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <HAL_I2C_MspInit+0x70>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d123      	bne.n	80006d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <HAL_I2C_MspInit+0x74>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a13      	ldr	r2, [pc, #76]	@ (80006e0 <HAL_I2C_MspInit+0x74>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <HAL_I2C_MspInit+0x74>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a4:	23c0      	movs	r3, #192	@ 0xc0
 80006a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a8:	2312      	movs	r3, #18
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <HAL_I2C_MspInit+0x78>)
 80006b8:	f000 fa0e 	bl	8000ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006bc:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <HAL_I2C_MspInit+0x74>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4a07      	ldr	r2, [pc, #28]	@ (80006e0 <HAL_I2C_MspInit+0x74>)
 80006c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006c6:	61d3      	str	r3, [r2, #28]
 80006c8:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <HAL_I2C_MspInit+0x74>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40005400 	.word	0x40005400
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010c00 	.word	0x40010c00

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <NMI_Handler+0x4>

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <MemManage_Handler+0x4>

08000700 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <UsageFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f8aa 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000748:	4a14      	ldr	r2, [pc, #80]	@ (800079c <_sbrk+0x5c>)
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <_sbrk+0x60>)
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <_sbrk+0x64>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <_sbrk+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	429a      	cmp	r2, r3
 800076e:	d207      	bcs.n	8000780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000770:	f002 febc 	bl	80034ec <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e009      	b.n	8000794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <_sbrk+0x64>)
 8000790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20005000 	.word	0x20005000
 80007a0:	00000400 	.word	0x00000400
 80007a4:	20000080 	.word	0x20000080
 80007a8:	20000630 	.word	0x20000630

080007ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b8:	f7ff fff8 	bl	80007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480b      	ldr	r0, [pc, #44]	@ (80007ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007be:	490c      	ldr	r1, [pc, #48]	@ (80007f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007c0:	4a0c      	ldr	r2, [pc, #48]	@ (80007f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007d4:	4c09      	ldr	r4, [pc, #36]	@ (80007fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f002 fe89 	bl	80034f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e6:	f7ff fcfb 	bl	80001e0 <main>
  bx lr
 80007ea:	4770      	bx	lr
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007f4:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 80007f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007fc:	2000062c 	.word	0x2000062c

08000800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC1_2_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <HAL_Init+0x28>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a07      	ldr	r2, [pc, #28]	@ (800082c <HAL_Init+0x28>)
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f92b 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081a:	200f      	movs	r0, #15
 800081c:	f000 f808 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff fef2 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_InitTick+0x54>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <HAL_InitTick+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f935 	bl	8000abe <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d80a      	bhi.n	800087a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f000 f90b 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <HAL_InitTick+0x5c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a03      	ldr	r2, [pc, #12]	@ (80008b0 <HAL_IncTick+0x20>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000084 	.word	0x20000084

080008b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	@ (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000084 	.word	0x20000084

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff fff0 	bl	80008b4 <HAL_GetTick>
 80008d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ee:	bf00      	nop
 80008f0:	f7ff ffe0 	bl	80008b4 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	@ (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	@ (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	@ 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff90 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff49 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff5e 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ffb0 	bl	8000a2c <SysTick_Config>
 8000acc:	4603      	mov	r3, r0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b08b      	sub	sp, #44	@ 0x2c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e169      	b.n	8000dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aec:	2201      	movs	r2, #1
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f040 8158 	bne.w	8000dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	4a9a      	ldr	r2, [pc, #616]	@ (8000d78 <HAL_GPIO_Init+0x2a0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d05e      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b14:	4a98      	ldr	r2, [pc, #608]	@ (8000d78 <HAL_GPIO_Init+0x2a0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d875      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b1a:	4a98      	ldr	r2, [pc, #608]	@ (8000d7c <HAL_GPIO_Init+0x2a4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d058      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b20:	4a96      	ldr	r2, [pc, #600]	@ (8000d7c <HAL_GPIO_Init+0x2a4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d86f      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b26:	4a96      	ldr	r2, [pc, #600]	@ (8000d80 <HAL_GPIO_Init+0x2a8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d052      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b2c:	4a94      	ldr	r2, [pc, #592]	@ (8000d80 <HAL_GPIO_Init+0x2a8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d869      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b32:	4a94      	ldr	r2, [pc, #592]	@ (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d04c      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b38:	4a92      	ldr	r2, [pc, #584]	@ (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d863      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a92      	ldr	r2, [pc, #584]	@ (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d046      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b44:	4a90      	ldr	r2, [pc, #576]	@ (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d85d      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b4a:	2b12      	cmp	r3, #18
 8000b4c:	d82a      	bhi.n	8000ba4 <HAL_GPIO_Init+0xcc>
 8000b4e:	2b12      	cmp	r3, #18
 8000b50:	d859      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b52:	a201      	add	r2, pc, #4	@ (adr r2, 8000b58 <HAL_GPIO_Init+0x80>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000bd3 	.word	0x08000bd3
 8000b5c:	08000bad 	.word	0x08000bad
 8000b60:	08000bbf 	.word	0x08000bbf
 8000b64:	08000c01 	.word	0x08000c01
 8000b68:	08000c07 	.word	0x08000c07
 8000b6c:	08000c07 	.word	0x08000c07
 8000b70:	08000c07 	.word	0x08000c07
 8000b74:	08000c07 	.word	0x08000c07
 8000b78:	08000c07 	.word	0x08000c07
 8000b7c:	08000c07 	.word	0x08000c07
 8000b80:	08000c07 	.word	0x08000c07
 8000b84:	08000c07 	.word	0x08000c07
 8000b88:	08000c07 	.word	0x08000c07
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000c07 	.word	0x08000c07
 8000b94:	08000c07 	.word	0x08000c07
 8000b98:	08000c07 	.word	0x08000c07
 8000b9c:	08000bb5 	.word	0x08000bb5
 8000ba0:	08000bc9 	.word	0x08000bc9
 8000ba4:	4a79      	ldr	r2, [pc, #484]	@ (8000d8c <HAL_GPIO_Init+0x2b4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d013      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000baa:	e02c      	b.n	8000c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e029      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e024      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e01f      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	330c      	adds	r3, #12
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	e01a      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e013      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d105      	bne.n	8000bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be8:	2308      	movs	r3, #8
 8000bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	611a      	str	r2, [r3, #16]
          break;
 8000bf2:	e009      	b.n	8000c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	615a      	str	r2, [r3, #20]
          break;
 8000bfe:	e003      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          break;
 8000c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2bff      	cmp	r3, #255	@ 0xff
 8000c0c:	d801      	bhi.n	8000c12 <HAL_GPIO_Init+0x13a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	e001      	b.n	8000c16 <HAL_GPIO_Init+0x13e>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3304      	adds	r3, #4
 8000c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	@ 0xff
 8000c1c:	d802      	bhi.n	8000c24 <HAL_GPIO_Init+0x14c>
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0x152>
 8000c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c26:	3b08      	subs	r3, #8
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	210f      	movs	r1, #15
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	6a39      	ldr	r1, [r7, #32]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 80b1 	beq.w	8000dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c58:	4b4d      	ldr	r3, [pc, #308]	@ (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b4a      	ldr	r3, [pc, #296]	@ (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c70:	4a48      	ldr	r2, [pc, #288]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a40      	ldr	r2, [pc, #256]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d013      	beq.n	8000cc4 <HAL_GPIO_Init+0x1ec>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d9c <HAL_GPIO_Init+0x2c4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d00d      	beq.n	8000cc0 <HAL_GPIO_Init+0x1e8>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8000da0 <HAL_GPIO_Init+0x2c8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d007      	beq.n	8000cbc <HAL_GPIO_Init+0x1e4>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3d      	ldr	r2, [pc, #244]	@ (8000da4 <HAL_GPIO_Init+0x2cc>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d101      	bne.n	8000cb8 <HAL_GPIO_Init+0x1e0>
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e006      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e004      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <HAL_GPIO_Init+0x1ee>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cc8:	f002 0203 	and.w	r2, r2, #3
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cd6:	492f      	ldr	r1, [pc, #188]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	492c      	ldr	r1, [pc, #176]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4928      	ldr	r1, [pc, #160]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d006      	beq.n	8000d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	4922      	ldr	r1, [pc, #136]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60cb      	str	r3, [r1, #12]
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	491e      	ldr	r1, [pc, #120]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4918      	ldr	r1, [pc, #96]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d4e:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4914      	ldr	r1, [pc, #80]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d021      	beq.n	8000dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	490e      	ldr	r1, [pc, #56]	@ (8000da8 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
 8000d74:	e021      	b.n	8000dba <HAL_GPIO_Init+0x2e2>
 8000d76:	bf00      	nop
 8000d78:	10320000 	.word	0x10320000
 8000d7c:	10310000 	.word	0x10310000
 8000d80:	10220000 	.word	0x10220000
 8000d84:	10210000 	.word	0x10210000
 8000d88:	10120000 	.word	0x10120000
 8000d8c:	10110000 	.word	0x10110000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	40011000 	.word	0x40011000
 8000da4:	40011400 	.word	0x40011400
 8000da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_GPIO_Init+0x304>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4909      	ldr	r1, [pc, #36]	@ (8000ddc <HAL_GPIO_Init+0x304>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f47f ae8e 	bne.w	8000aec <HAL_GPIO_Init+0x14>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	372c      	adds	r7, #44	@ 0x2c
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000df0:	787b      	ldrb	r3, [r7, #1]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000df6:	887a      	ldrh	r2, [r7, #2]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dfc:	e003      	b.n	8000e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dfe:	887b      	ldrh	r3, [r7, #2]
 8000e00:	041a      	lsls	r2, r3, #16
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	611a      	str	r2, [r3, #16]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e12b      	b.n	800107a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d106      	bne.n	8000e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fc18 	bl	800066c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2224      	movs	r2, #36	@ 0x24
 8000e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0201 	bic.w	r2, r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e74:	f001 fe88 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8000e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4a81      	ldr	r2, [pc, #516]	@ (8001084 <HAL_I2C_Init+0x274>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d807      	bhi.n	8000e94 <HAL_I2C_Init+0x84>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4a80      	ldr	r2, [pc, #512]	@ (8001088 <HAL_I2C_Init+0x278>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	bf94      	ite	ls
 8000e8c:	2301      	movls	r3, #1
 8000e8e:	2300      	movhi	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	e006      	b.n	8000ea2 <HAL_I2C_Init+0x92>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4a7d      	ldr	r2, [pc, #500]	@ (800108c <HAL_I2C_Init+0x27c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	bf94      	ite	ls
 8000e9c:	2301      	movls	r3, #1
 8000e9e:	2300      	movhi	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e0e7      	b.n	800107a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4a78      	ldr	r2, [pc, #480]	@ (8001090 <HAL_I2C_Init+0x280>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8001084 <HAL_I2C_Init+0x274>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d802      	bhi.n	8000ee4 <HAL_I2C_Init+0xd4>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	e009      	b.n	8000ef8 <HAL_I2C_Init+0xe8>
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	4a69      	ldr	r2, [pc, #420]	@ (8001094 <HAL_I2C_Init+0x284>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	099b      	lsrs	r3, r3, #6
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	430b      	orrs	r3, r1
 8000efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	495c      	ldr	r1, [pc, #368]	@ (8001084 <HAL_I2C_Init+0x274>)
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d819      	bhi.n	8000f4c <HAL_I2C_Init+0x13c>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1e59      	subs	r1, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f26:	1c59      	adds	r1, r3, #1
 8000f28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00a      	beq.n	8000f48 <HAL_I2C_Init+0x138>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1e59      	subs	r1, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f46:	e051      	b.n	8000fec <HAL_I2C_Init+0x1dc>
 8000f48:	2304      	movs	r3, #4
 8000f4a:	e04f      	b.n	8000fec <HAL_I2C_Init+0x1dc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d111      	bne.n	8000f78 <HAL_I2C_Init+0x168>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1e58      	subs	r0, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6859      	ldr	r1, [r3, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	440b      	add	r3, r1
 8000f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	e012      	b.n	8000f9e <HAL_I2C_Init+0x18e>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	1e58      	subs	r0, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6859      	ldr	r1, [r3, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	0099      	lsls	r1, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f8e:	3301      	adds	r3, #1
 8000f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	bf0c      	ite	eq
 8000f98:	2301      	moveq	r3, #1
 8000f9a:	2300      	movne	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_I2C_Init+0x196>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e022      	b.n	8000fec <HAL_I2C_Init+0x1dc>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10e      	bne.n	8000fcc <HAL_I2C_Init+0x1bc>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1e58      	subs	r0, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6859      	ldr	r1, [r3, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	440b      	add	r3, r1
 8000fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fca:	e00f      	b.n	8000fec <HAL_I2C_Init+0x1dc>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1e58      	subs	r0, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6859      	ldr	r1, [r3, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	0099      	lsls	r1, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	6809      	ldr	r1, [r1, #0]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800101a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	6911      	ldr	r1, [r2, #16]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68d2      	ldr	r2, [r2, #12]
 8001026:	4311      	orrs	r1, r2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	430b      	orrs	r3, r1
 800102e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2220      	movs	r2, #32
 8001066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	000186a0 	.word	0x000186a0
 8001088:	001e847f 	.word	0x001e847f
 800108c:	003d08ff 	.word	0x003d08ff
 8001090:	431bde83 	.word	0x431bde83
 8001094:	10624dd3 	.word	0x10624dd3

08001098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af02      	add	r7, sp, #8
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	461a      	mov	r2, r3
 80010a4:	460b      	mov	r3, r1
 80010a6:	817b      	strh	r3, [r7, #10]
 80010a8:	4613      	mov	r3, r2
 80010aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff fc02 	bl	80008b4 <HAL_GetTick>
 80010b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	f040 80e0 	bne.w	8001280 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2319      	movs	r3, #25
 80010c6:	2201      	movs	r2, #1
 80010c8:	4970      	ldr	r1, [pc, #448]	@ (800128c <HAL_I2C_Master_Transmit+0x1f4>)
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f000 ff5c 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010d6:	2302      	movs	r3, #2
 80010d8:	e0d3      	b.n	8001282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <HAL_I2C_Master_Transmit+0x50>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e0cc      	b.n	8001282 <HAL_I2C_Master_Transmit+0x1ea>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d007      	beq.n	800110e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800111c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2221      	movs	r2, #33	@ 0x21
 8001122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2210      	movs	r2, #16
 800112a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	893a      	ldrh	r2, [r7, #8]
 800113e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001144:	b29a      	uxth	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a50      	ldr	r2, [pc, #320]	@ (8001290 <HAL_I2C_Master_Transmit+0x1f8>)
 800114e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001150:	8979      	ldrh	r1, [r7, #10]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	6a3a      	ldr	r2, [r7, #32]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f000 fd30 	bl	8001bbc <I2C_MasterRequestWrite>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e08d      	b.n	8001282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800117c:	e066      	b.n	800124c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	6a39      	ldr	r1, [r7, #32]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f001 f81a 	bl	80021bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00d      	beq.n	80011aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	2b04      	cmp	r3, #4
 8001194:	d107      	bne.n	80011a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06b      	b.n	8001282 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011d2:	3b01      	subs	r3, #1
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d11b      	bne.n	8001220 <HAL_I2C_Master_Transmit+0x188>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d017      	beq.n	8001220 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800120a:	b29b      	uxth	r3, r3
 800120c:	3b01      	subs	r3, #1
 800120e:	b29a      	uxth	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001218:	3b01      	subs	r3, #1
 800121a:	b29a      	uxth	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	6a39      	ldr	r1, [r7, #32]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f001 f811 	bl	800224c <I2C_WaitOnBTFFlagUntilTimeout>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00d      	beq.n	800124c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	2b04      	cmp	r3, #4
 8001236:	d107      	bne.n	8001248 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001246:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e01a      	b.n	8001282 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001250:	2b00      	cmp	r3, #0
 8001252:	d194      	bne.n	800117e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2220      	movs	r2, #32
 8001268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	e000      	b.n	8001282 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001280:	2302      	movs	r3, #2
  }
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	00100002 	.word	0x00100002
 8001290:	ffff0000 	.word	0xffff0000

08001294 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	@ 0x30
 8001298:	af02      	add	r7, sp, #8
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	461a      	mov	r2, r3
 80012a0:	460b      	mov	r3, r1
 80012a2:	817b      	strh	r3, [r7, #10]
 80012a4:	4613      	mov	r3, r2
 80012a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff fb02 	bl	80008b4 <HAL_GetTick>
 80012b0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	f040 824b 	bne.w	8001756 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2319      	movs	r3, #25
 80012c6:	2201      	movs	r2, #1
 80012c8:	497f      	ldr	r1, [pc, #508]	@ (80014c8 <HAL_I2C_Master_Receive+0x234>)
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 fe5c 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80012d6:	2302      	movs	r3, #2
 80012d8:	e23e      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_I2C_Master_Receive+0x54>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e237      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d007      	beq.n	800130e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800131c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2222      	movs	r2, #34	@ 0x22
 8001322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2210      	movs	r2, #16
 800132a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	893a      	ldrh	r2, [r7, #8]
 800133e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001344:	b29a      	uxth	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a5f      	ldr	r2, [pc, #380]	@ (80014cc <HAL_I2C_Master_Receive+0x238>)
 800134e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001350:	8979      	ldrh	r1, [r7, #10]
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 fcb2 	bl	8001cc0 <I2C_MasterRequestRead>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e1f8      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800136a:	2b00      	cmp	r3, #0
 800136c:	d113      	bne.n	8001396 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e1cc      	b.n	8001730 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800139a:	2b01      	cmp	r3, #1
 800139c:	d11e      	bne.n	80013dc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013ae:	b672      	cpsid	i
}
 80013b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013d8:	b662      	cpsie	i
}
 80013da:	e035      	b.n	8001448 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d11e      	bne.n	8001422 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800141c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800141e:	b662      	cpsie	i
}
 8001420:	e012      	b.n	8001448 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001448:	e172      	b.n	8001730 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144e:	2b03      	cmp	r3, #3
 8001450:	f200 811f 	bhi.w	8001692 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001458:	2b01      	cmp	r3, #1
 800145a:	d123      	bne.n	80014a4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800145e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 ff3b 	bl	80022dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e173      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148c:	3b01      	subs	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001498:	b29b      	uxth	r3, r3
 800149a:	3b01      	subs	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80014a2:	e145      	b.n	8001730 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d152      	bne.n	8001552 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b2:	2200      	movs	r2, #0
 80014b4:	4906      	ldr	r1, [pc, #24]	@ (80014d0 <HAL_I2C_Master_Receive+0x23c>)
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 fd66 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e148      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
 80014c6:	bf00      	nop
 80014c8:	00100002 	.word	0x00100002
 80014cc:	ffff0000 	.word	0xffff0000
 80014d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	3b01      	subs	r3, #1
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800151a:	b662      	cpsie	i
}
 800151c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800153a:	3b01      	subs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b01      	subs	r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001550:	e0ee      	b.n	8001730 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001558:	2200      	movs	r2, #0
 800155a:	4981      	ldr	r1, [pc, #516]	@ (8001760 <HAL_I2C_Master_Receive+0x4cc>)
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 fd13 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0f5      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800157a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800159c:	3b01      	subs	r3, #1
 800159e:	b29a      	uxth	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001764 <HAL_I2C_Master_Receive+0x4d0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	4a6b      	ldr	r2, [pc, #428]	@ (8001768 <HAL_I2C_Master_Receive+0x4d4>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0a1a      	lsrs	r2, r3, #8
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00da      	lsls	r2, r3, #3
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d118      	bne.n	800160a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f043 0220 	orr.w	r2, r3, #32
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015fa:	b662      	cpsie	i
}
 80015fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0a6      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b04      	cmp	r3, #4
 8001616:	d1d9      	bne.n	80015cc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800165a:	b662      	cpsie	i
}
 800165c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001686:	b29b      	uxth	r3, r3
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001690:	e04e      	b.n	8001730 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001694:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fe20 	bl	80022dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e058      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d124      	bne.n	8001730 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d107      	bne.n	80016fe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800171a:	3b01      	subs	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f ae88 	bne.w	800144a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2220      	movs	r2, #32
 800173e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001756:	2302      	movs	r3, #2
  }
}
 8001758:	4618      	mov	r0, r3
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	00010004 	.word	0x00010004
 8001764:	20000000 	.word	0x20000000
 8001768:	14f8b589 	.word	0x14f8b589

0800176c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	817b      	strh	r3, [r7, #10]
 800177e:	460b      	mov	r3, r1
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001786:	f7ff f895 	bl	80008b4 <HAL_GetTick>
 800178a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b20      	cmp	r3, #32
 8001796:	f040 80d9 	bne.w	800194c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2319      	movs	r3, #25
 80017a0:	2201      	movs	r2, #1
 80017a2:	496d      	ldr	r1, [pc, #436]	@ (8001958 <HAL_I2C_Mem_Write+0x1ec>)
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fbef 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0cc      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_I2C_Mem_Write+0x56>
 80017be:	2302      	movs	r3, #2
 80017c0:	e0c5      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d007      	beq.n	80017e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2221      	movs	r2, #33	@ 0x21
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2240      	movs	r2, #64	@ 0x40
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a4d      	ldr	r2, [pc, #308]	@ (800195c <HAL_I2C_Mem_Write+0x1f0>)
 8001828:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182a:	88f8      	ldrh	r0, [r7, #6]
 800182c:	893a      	ldrh	r2, [r7, #8]
 800182e:	8979      	ldrh	r1, [r7, #10]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4603      	mov	r3, r0
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 fb0e 	bl	8001e5c <I2C_RequestMemoryWrite>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d052      	beq.n	80018ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e081      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fcb4 	bl	80021bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00d      	beq.n	8001876 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2b04      	cmp	r3, #4
 8001860:	d107      	bne.n	8001872 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06b      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d11b      	bne.n	80018ec <HAL_I2C_Mem_Write+0x180>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d017      	beq.n	80018ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1aa      	bne.n	800184a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 fca7 	bl	800224c <I2C_WaitOnBTFFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00d      	beq.n	8001920 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	2b04      	cmp	r3, #4
 800190a:	d107      	bne.n	800191c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800191a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e016      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	00100002 	.word	0x00100002
 800195c:	ffff0000 	.word	0xffff0000

08001960 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	460b      	mov	r3, r1
 800196e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7fe ffa0 	bl	80008b4 <HAL_GetTick>
 8001974:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b20      	cmp	r3, #32
 8001984:	f040 8111 	bne.w	8001baa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2319      	movs	r3, #25
 800198e:	2201      	movs	r2, #1
 8001990:	4988      	ldr	r1, [pc, #544]	@ (8001bb4 <HAL_I2C_IsDeviceReady+0x254>)
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 faf8 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	e104      	b.n	8001bac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_I2C_IsDeviceReady+0x50>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e0fd      	b.n	8001bac <HAL_I2C_IsDeviceReady+0x24c>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d007      	beq.n	80019d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2224      	movs	r2, #36	@ 0x24
 80019ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a70      	ldr	r2, [pc, #448]	@ (8001bb8 <HAL_I2C_IsDeviceReady+0x258>)
 80019f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fab6 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a30:	d103      	bne.n	8001a3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0b6      	b.n	8001bac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7fe ff31 	bl	80008b4 <HAL_GetTick>
 8001a52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	bf0c      	ite	eq
 8001a62:	2301      	moveq	r3, #1
 8001a64:	2300      	movne	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a82:	e025      	b.n	8001ad0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a84:	f7fe ff16 	bl	80008b4 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d302      	bcc.n	8001a9a <HAL_I2C_IsDeviceReady+0x13a>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d103      	bne.n	8001aa2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	22a0      	movs	r2, #160	@ 0xa0
 8001a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ada:	d005      	beq.n	8001ae8 <HAL_I2C_IsDeviceReady+0x188>
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <HAL_I2C_IsDeviceReady+0x188>
 8001ae2:	7dbb      	ldrb	r3, [r7, #22]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0cd      	beq.n	8001a84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d129      	bne.n	8001b52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2319      	movs	r3, #25
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4921      	ldr	r1, [pc, #132]	@ (8001bb4 <HAL_I2C_IsDeviceReady+0x254>)
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fa2a 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e036      	b.n	8001bac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e02c      	b.n	8001bac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2319      	movs	r3, #25
 8001b72:	2201      	movs	r2, #1
 8001b74:	490f      	ldr	r1, [pc, #60]	@ (8001bb4 <HAL_I2C_IsDeviceReady+0x254>)
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fa06 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e012      	b.n	8001bac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f4ff af32 	bcc.w	80019fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
  }
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	00100002 	.word	0x00100002
 8001bb8:	ffff0000 	.word	0xffff0000

08001bbc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d006      	beq.n	8001be6 <I2C_MasterRequestWrite+0x2a>
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d003      	beq.n	8001be6 <I2C_MasterRequestWrite+0x2a>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001be4:	d108      	bne.n	8001bf8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e00b      	b.n	8001c10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	2b12      	cmp	r3, #18
 8001bfe:	d107      	bne.n	8001c10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f9b3 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00d      	beq.n	8001c44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c36:	d103      	bne.n	8001c40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e035      	b.n	8001cb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c4c:	d108      	bne.n	8001c60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c4e:	897b      	ldrh	r3, [r7, #10]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c5c:	611a      	str	r2, [r3, #16]
 8001c5e:	e01b      	b.n	8001c98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c60:	897b      	ldrh	r3, [r7, #10]
 8001c62:	11db      	asrs	r3, r3, #7
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f003 0306 	and.w	r3, r3, #6
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f063 030f 	orn	r3, r3, #15
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	490e      	ldr	r1, [pc, #56]	@ (8001cb8 <I2C_MasterRequestWrite+0xfc>)
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f9fc 	bl	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e010      	b.n	8001cb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <I2C_MasterRequestWrite+0x100>)
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f9ec 	bl	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	00010008 	.word	0x00010008
 8001cbc:	00010002 	.word	0x00010002

08001cc0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ce4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d006      	beq.n	8001cfa <I2C_MasterRequestRead+0x3a>
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d003      	beq.n	8001cfa <I2C_MasterRequestRead+0x3a>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cf8:	d108      	bne.n	8001d0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e00b      	b.n	8001d24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	2b11      	cmp	r3, #17
 8001d12:	d107      	bne.n	8001d24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f929 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d4a:	d103      	bne.n	8001d54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e079      	b.n	8001e4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d60:	d108      	bne.n	8001d74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	e05f      	b.n	8001e34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d74:	897b      	ldrh	r3, [r7, #10]
 8001d76:	11db      	asrs	r3, r3, #7
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f003 0306 	and.w	r3, r3, #6
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f063 030f 	orn	r3, r3, #15
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4930      	ldr	r1, [pc, #192]	@ (8001e54 <I2C_MasterRequestRead+0x194>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f972 	bl	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e054      	b.n	8001e4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4929      	ldr	r1, [pc, #164]	@ (8001e58 <I2C_MasterRequestRead+0x198>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f962 	bl	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e044      	b.n	8001e4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001de6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f8c7 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00d      	beq.n	8001e1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e0e:	d103      	bne.n	8001e18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e017      	b.n	8001e4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e1c:	897b      	ldrh	r3, [r7, #10]
 8001e1e:	11db      	asrs	r3, r3, #7
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0306 	and.w	r3, r3, #6
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f063 030e 	orn	r3, r3, #14
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4907      	ldr	r1, [pc, #28]	@ (8001e58 <I2C_MasterRequestRead+0x198>)
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f91e 	bl	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	00010008 	.word	0x00010008
 8001e58:	00010002 	.word	0x00010002

08001e5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	4608      	mov	r0, r1
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	817b      	strh	r3, [r7, #10]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	813b      	strh	r3, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f878 	bl	8001f88 <I2C_WaitOnFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00d      	beq.n	8001eba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eac:	d103      	bne.n	8001eb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e05f      	b.n	8001f7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eba:	897b      	ldrh	r3, [r7, #10]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ec8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	6a3a      	ldr	r2, [r7, #32]
 8001ece:	492d      	ldr	r1, [pc, #180]	@ (8001f84 <I2C_RequestMemoryWrite+0x128>)
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f8d3 	bl	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e04c      	b.n	8001f7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f95e 	bl	80021bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d107      	bne.n	8001f1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e02b      	b.n	8001f7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f28:	893b      	ldrh	r3, [r7, #8]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	e021      	b.n	8001f78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f34:	893b      	ldrh	r3, [r7, #8]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f938 	bl	80021bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00d      	beq.n	8001f6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d107      	bne.n	8001f6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e005      	b.n	8001f7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f6e:	893b      	ldrh	r3, [r7, #8]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	00010002 	.word	0x00010002

08001f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f98:	e048      	b.n	800202c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d044      	beq.n	800202c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa2:	f7fe fc87 	bl	80008b4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d302      	bcc.n	8001fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d139      	bne.n	800202c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d10d      	bne.n	8001fde <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	e00c      	b.n	8001ff8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d116      	bne.n	800202c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e023      	b.n	8002074 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10d      	bne.n	8002052 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	43da      	mvns	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4013      	ands	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	e00c      	b.n	800206c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	43da      	mvns	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4013      	ands	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	429a      	cmp	r2, r3
 8002070:	d093      	beq.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800208a:	e071      	b.n	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800209a:	d123      	bne.n	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e067      	b.n	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ea:	d041      	beq.n	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ec:	f7fe fbe2 	bl	80008b4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d302      	bcc.n	8002102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d136      	bne.n	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10c      	bne.n	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4013      	ands	r3, r2
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	e00b      	b.n	800213e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	43da      	mvns	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4013      	ands	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d016      	beq.n	8002170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e021      	b.n	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	0c1b      	lsrs	r3, r3, #16
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10c      	bne.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	43da      	mvns	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4013      	ands	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e00b      	b.n	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f af6d 	bne.w	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021c8:	e034      	b.n	8002234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f8e3 	bl	8002396 <I2C_IsAcknowledgeFailed>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e034      	b.n	8002244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d028      	beq.n	8002234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e2:	f7fe fb67 	bl	80008b4 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d302      	bcc.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d11d      	bne.n	8002234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	2b80      	cmp	r3, #128	@ 0x80
 8002204:	d016      	beq.n	8002234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e007      	b.n	8002244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b80      	cmp	r3, #128	@ 0x80
 8002240:	d1c3      	bne.n	80021ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002258:	e034      	b.n	80022c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f89b 	bl	8002396 <I2C_IsAcknowledgeFailed>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e034      	b.n	80022d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d028      	beq.n	80022c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002272:	f7fe fb1f 	bl	80008b4 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	d302      	bcc.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11d      	bne.n	80022c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b04      	cmp	r3, #4
 8002294:	d016      	beq.n	80022c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f043 0220 	orr.w	r2, r3, #32
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e007      	b.n	80022d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d1c3      	bne.n	800225a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022e8:	e049      	b.n	800237e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d119      	bne.n	800232c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0210 	mvn.w	r2, #16
 8002300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e030      	b.n	800238e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232c:	f7fe fac2 	bl	80008b4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d302      	bcc.n	8002342 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d11d      	bne.n	800237e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234c:	2b40      	cmp	r3, #64	@ 0x40
 800234e:	d016      	beq.n	800237e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f043 0220 	orr.w	r2, r3, #32
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e007      	b.n	800238e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002388:	2b40      	cmp	r3, #64	@ 0x40
 800238a:	d1ae      	bne.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ac:	d11b      	bne.n	80023e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f043 0204 	orr.w	r2, r3, #4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e272      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	4b92      	ldr	r3, [pc, #584]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00c      	beq.n	800243a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002420:	4b8f      	ldr	r3, [pc, #572]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d112      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
 800242c:	4b8c      	ldr	r3, [pc, #560]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b89      	ldr	r3, [pc, #548]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d06c      	beq.n	8002520 <HAL_RCC_OscConfig+0x12c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d168      	bne.n	8002520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e24c      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x76>
 800245c:	4b80      	ldr	r3, [pc, #512]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7f      	ldr	r2, [pc, #508]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b7b      	ldr	r3, [pc, #492]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7a      	ldr	r2, [pc, #488]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b78      	ldr	r3, [pc, #480]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a77      	ldr	r2, [pc, #476]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xbc>
 8002496:	4b72      	ldr	r3, [pc, #456]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a71      	ldr	r2, [pc, #452]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 80024b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b68      	ldr	r3, [pc, #416]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a67      	ldr	r2, [pc, #412]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe f9f0 	bl	80008b4 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe f9ec 	bl	80008b4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e200      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe4>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe f9dc 	bl	80008b4 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe f9d8 	bl	80008b4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1ec      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b53      	ldr	r3, [pc, #332]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x10c>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4b4c      	ldr	r3, [pc, #304]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800253a:	4b49      	ldr	r3, [pc, #292]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
 8002546:	4b46      	ldr	r3, [pc, #280]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1c0      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b3d      	ldr	r3, [pc, #244]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4939      	ldr	r1, [pc, #228]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <HAL_RCC_OscConfig+0x270>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe f991 	bl	80008b4 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe f98d 	bl	80008b4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1a1      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4927      	ldr	r1, [pc, #156]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b26      	ldr	r3, [pc, #152]	@ (8002664 <HAL_RCC_OscConfig+0x270>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe f970 	bl	80008b4 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe f96c 	bl	80008b4 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e180      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d03a      	beq.n	8002678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d019      	beq.n	800263e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <HAL_RCC_OscConfig+0x274>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7fe f950 	bl	80008b4 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe f94c 	bl	80008b4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e160      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <HAL_RCC_OscConfig+0x26c>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f000 faba 	bl	8002bb0 <RCC_Delay>
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263e:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <HAL_RCC_OscConfig+0x274>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe f936 	bl	80008b4 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264a:	e00f      	b.n	800266c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264c:	f7fe f932 	bl	80008b4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d908      	bls.n	800266c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e146      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	42420000 	.word	0x42420000
 8002668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b92      	ldr	r3, [pc, #584]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e9      	bne.n	800264c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a6 	beq.w	80027d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b8b      	ldr	r3, [pc, #556]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b88      	ldr	r3, [pc, #544]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a87      	ldr	r2, [pc, #540]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b85      	ldr	r3, [pc, #532]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b82      	ldr	r3, [pc, #520]	@ (80028bc <HAL_RCC_OscConfig+0x4c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b7f      	ldr	r3, [pc, #508]	@ (80028bc <HAL_RCC_OscConfig+0x4c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7e      	ldr	r2, [pc, #504]	@ (80028bc <HAL_RCC_OscConfig+0x4c8>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe f8f3 	bl	80008b4 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe f8ef 	bl	80008b4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	@ 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e103      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b75      	ldr	r3, [pc, #468]	@ (80028bc <HAL_RCC_OscConfig+0x4c8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x312>
 80026f8:	4b6f      	ldr	r3, [pc, #444]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a6e      	ldr	r2, [pc, #440]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	e02d      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x334>
 800270e:	4b6a      	ldr	r3, [pc, #424]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a69      	ldr	r2, [pc, #420]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b67      	ldr	r3, [pc, #412]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a66      	ldr	r2, [pc, #408]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	e01c      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x356>
 8002730:	4b61      	ldr	r3, [pc, #388]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a60      	ldr	r2, [pc, #384]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4b5e      	ldr	r3, [pc, #376]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a5d      	ldr	r2, [pc, #372]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 800274a:	4b5b      	ldr	r3, [pc, #364]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a5a      	ldr	r2, [pc, #360]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b58      	ldr	r3, [pc, #352]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a57      	ldr	r2, [pc, #348]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7fe f8a3 	bl	80008b4 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe f89f 	bl	80008b4 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0b1      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	4b4b      	ldr	r3, [pc, #300]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ee      	beq.n	8002772 <HAL_RCC_OscConfig+0x37e>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe f88d 	bl	80008b4 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe f889 	bl	80008b4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e09b      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	4b40      	ldr	r3, [pc, #256]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b3c      	ldr	r3, [pc, #240]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a3b      	ldr	r2, [pc, #236]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8087 	beq.w	80028ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027dc:	4b36      	ldr	r3, [pc, #216]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d061      	beq.n	80028ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d146      	bne.n	800287e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe f85d 	bl	80008b4 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe f859 	bl	80008b4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e06d      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002810:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002826:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4921      	ldr	r1, [pc, #132]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002838:	4b1f      	ldr	r3, [pc, #124]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a19      	ldr	r1, [r3, #32]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	430b      	orrs	r3, r1
 800284a:	491b      	ldr	r1, [pc, #108]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe f82d 	bl	80008b4 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe f829 	bl	80008b4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e03d      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x46a>
 800287c:	e035      	b.n	80028ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_RCC_OscConfig+0x4cc>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe f816 	bl	80008b4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f812 	bl	80008b4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e026      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x498>
 80028aa:	e01e      	b.n	80028ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e019      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028c4:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_RCC_OscConfig+0x500>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0d0      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d910      	bls.n	800293c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b67      	ldr	r3, [pc, #412]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0207 	bic.w	r2, r3, #7
 8002922:	4965      	ldr	r1, [pc, #404]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b8      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002954:	4b59      	ldr	r3, [pc, #356]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a58      	ldr	r2, [pc, #352]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800295e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296c:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a52      	ldr	r2, [pc, #328]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002976:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b50      	ldr	r3, [pc, #320]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	494d      	ldr	r1, [pc, #308]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d040      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d115      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e073      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06b      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b39      	ldr	r3, [pc, #228]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4936      	ldr	r1, [pc, #216]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fd ff64 	bl	80008b4 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7fd ff60 	bl	80008b4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e053      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b2d      	ldr	r3, [pc, #180]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b27      	ldr	r3, [pc, #156]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d210      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 0207 	bic.w	r2, r3, #7
 8002a2e:	4922      	ldr	r1, [pc, #136]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e032      	b.n	8002aae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4916      	ldr	r1, [pc, #88]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	490e      	ldr	r1, [pc, #56]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a86:	f000 f821 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	490a      	ldr	r1, [pc, #40]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	5ccb      	ldrb	r3, [r1, r3]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1cc>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1d0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fec2 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08003e78 	.word	0x08003e78
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004

08002acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d002      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x30>
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x36>
 8002afa:	e027      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afe:	613b      	str	r3, [r7, #16]
      break;
 8002b00:	e027      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	0c9b      	lsrs	r3, r3, #18
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a17      	ldr	r2, [pc, #92]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d010      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b1a:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	0c5b      	lsrs	r3, r3, #17
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	4a11      	ldr	r2, [pc, #68]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2e:	fb03 f202 	mul.w	r2, r3, r2
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e004      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	613b      	str	r3, [r7, #16]
      break;
 8002b4a:	e002      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4e:	613b      	str	r3, [r7, #16]
      break;
 8002b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b52:	693b      	ldr	r3, [r7, #16]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	007a1200 	.word	0x007a1200
 8002b68:	08003e90 	.word	0x08003e90
 8002b6c:	08003ea0 	.word	0x08003ea0
 8002b70:	003d0900 	.word	0x003d0900

08002b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b02      	ldr	r3, [pc, #8]	@ (8002b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	20000000 	.word	0x20000000

08002b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b8c:	f7ff fff2 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4903      	ldr	r1, [pc, #12]	@ (8002bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08003e88 	.word	0x08003e88

08002bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002be4 <RCC_Delay+0x34>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002be8 <RCC_Delay+0x38>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0a5b      	lsrs	r3, r3, #9
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bcc:	bf00      	nop
  }
  while (Delay --);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	60fa      	str	r2, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f9      	bne.n	8002bcc <RCC_Delay+0x1c>
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	20000000 	.word	0x20000000
 8002be8:	10624dd3 	.word	0x10624dd3

08002bec <WriteReg>:
//    uint8_t data[2] = {reg, value};
//    return HAL_I2C_Master_Transmit(&hi2c1, sensor_addr, data, 2, HAL_MAX_DELAY);
//}

HAL_StatusTypeDef WriteReg(uint8_t deviceAddress, uint8_t reg, uint8_t value)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	71bb      	strb	r3, [r7, #6]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	717b      	strb	r3, [r7, #5]
    uint8_t array[2];
    array[0] = reg;    // Register address
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	733b      	strb	r3, [r7, #12]
    array[1] = value;  // Value to write
 8002c02:	797b      	ldrb	r3, [r7, #5]
 8002c04:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, (deviceAddress << 1), array, 2, HAL_MAX_DELAY)!= HAL_OK){
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	4806      	ldr	r0, [pc, #24]	@ (8002c34 <WriteReg+0x48>)
 8002c1c:	f7fe fa3c 	bl	8001098 <HAL_I2C_Master_Transmit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <WriteReg+0x3e>
    	return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <WriteReg+0x40>
    }
    else{
    	return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
    }

}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000088 	.word	0x20000088

08002c38 <ReadReg>:

// Read function to receive data from a specific register
HAL_StatusTypeDef ReadReg(uint8_t deviceAddress, uint8_t reg, uint8_t *value)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	4603      	mov	r3, r0
 8002c40:	603a      	str	r2, [r7, #0]
 8002c42:	71fb      	strb	r3, [r7, #7]
 8002c44:	460b      	mov	r3, r1
 8002c46:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, (deviceAddress << 1)|1, &reg, 1, HAL_MAX_DELAY) != HAL_OK)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	b299      	uxth	r1, r3
 8002c56:	1dba      	adds	r2, r7, #6
 8002c58:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2301      	movs	r3, #1
 8002c60:	480d      	ldr	r0, [pc, #52]	@ (8002c98 <ReadReg+0x60>)
 8002c62:	f7fe fa19 	bl	8001098 <HAL_I2C_Master_Transmit>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <ReadReg+0x38>
    {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e00f      	b.n	8002c90 <ReadReg+0x58>
    }
    return HAL_I2C_Master_Receive(&hi2c1, (deviceAddress << 1)|1, value, 1, HAL_MAX_DELAY);
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	b299      	uxth	r1, r3
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2301      	movs	r3, #1
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4803      	ldr	r0, [pc, #12]	@ (8002c98 <ReadReg+0x60>)
 8002c8a:	f7fe fb03 	bl	8001294 <HAL_I2C_Master_Receive>
 8002c8e:	4603      	mov	r3, r0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000088 	.word	0x20000088

08002c9c <VL53L0X_Init>:
    return HAL_OK;
}

// Function to initialize VL53L0X sensor with timing budget
HAL_StatusTypeDef VL53L0X_Init(uint8_t sensor_addr)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]

    // Step 1: Validate I2C interface using reference registers
    if (ReadReg(sensor_addr, REG_REFERENCE_C0, &value) != HAL_OK || value != 0xEE)
 8002caa:	f107 020f 	add.w	r2, r7, #15
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	21c0      	movs	r1, #192	@ 0xc0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ffc0 	bl	8002c38 <ReadReg>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <VL53L0X_Init+0x28>
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2bee      	cmp	r3, #238	@ 0xee
 8002cc2:	d001      	beq.n	8002cc8 <VL53L0X_Init+0x2c>
    {
        return HAL_ERROR; // Validation failed for REG_REFERENCE_C0
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e03f      	b.n	8002d48 <VL53L0X_Init+0xac>
    }
    if (ReadReg(sensor_addr, REG_REFERENCE_C1, &value) != HAL_OK || value != 0xAA)
 8002cc8:	f107 020f 	add.w	r2, r7, #15
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	21c1      	movs	r1, #193	@ 0xc1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ffb1 	bl	8002c38 <ReadReg>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <VL53L0X_Init+0x46>
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2baa      	cmp	r3, #170	@ 0xaa
 8002ce0:	d001      	beq.n	8002ce6 <VL53L0X_Init+0x4a>
    {
        return HAL_ERROR; // Validation failed for REG_REFERENCE_C1
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e030      	b.n	8002d48 <VL53L0X_Init+0xac>
    }
    if (ReadReg(sensor_addr, REG_REFERENCE_C2, &value) != HAL_OK || value != 0x10)
 8002ce6:	f107 020f 	add.w	r2, r7, #15
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	21c2      	movs	r1, #194	@ 0xc2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ffa2 	bl	8002c38 <ReadReg>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <VL53L0X_Init+0x64>
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d001      	beq.n	8002d04 <VL53L0X_Init+0x68>
    {
        return HAL_ERROR; // Validation failed for REG_REFERENCE_C2
 8002d00:	2301      	movs	r3, #1
 8002d02:	e021      	b.n	8002d48 <VL53L0X_Init+0xac>
    }

    // Step 2: Write default/reset values to other reference registers (if needed)
    if (WriteReg(sensor_addr, REG_REFERENCE_51, 0x00) != HAL_OK) // Reset 0x51 to default
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	2200      	movs	r2, #0
 8002d08:	2151      	movs	r1, #81	@ 0x51
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff6e 	bl	8002bec <WriteReg>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <VL53L0X_Init+0x7e>
    {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e016      	b.n	8002d48 <VL53L0X_Init+0xac>
    }
    if (WriteReg(sensor_addr, REG_REFERENCE_61, 0x00) != HAL_OK) // Reset 0x61 to default
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2161      	movs	r1, #97	@ 0x61
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff63 	bl	8002bec <WriteReg>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <VL53L0X_Init+0x94>
    {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e00b      	b.n	8002d48 <VL53L0X_Init+0xac>
    }

    // Step 3: Start measurement (default configuration)
    if (WriteReg(sensor_addr, 0x00, 0x01) != HAL_OK) // Start the measurement
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	2201      	movs	r2, #1
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff58 	bl	8002bec <WriteReg>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <VL53L0X_Init+0xaa>
    {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <VL53L0X_Init+0xac>
    }

    return HAL_OK; // Initialization successful
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <SetAddress>:

HAL_StatusTypeDef SetAddress(uint8_t NewAddress){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
	if(WriteReg(CurrentAddress, 0x8A, NewAddress & 0x7F)!=HAL_OK){
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	218a      	movs	r1, #138	@ 0x8a
 8002d66:	2029      	movs	r0, #41	@ 0x29
 8002d68:	f7ff ff40 	bl	8002bec <WriteReg>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SetAddress+0x26>
		return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <SetAddress+0x28>
	}
	else {
		return HAL_OK;
 8002d76:	2300      	movs	r3, #0
	}
	//HAL_Delay(10);
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <readDistance>:

uint16_t readDistance(uint8_t deviceAddress) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af04      	add	r7, sp, #16
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
    uint8_t reg = 0x1E;          // RESULT_RANGE_STATUS register address
 8002d8a:	231e      	movs	r3, #30
 8002d8c:	757b      	strb	r3, [r7, #21]
    uint8_t buffer[2] = {0};     // Buffer to store received data
 8002d8e:	2300      	movs	r3, #0
 8002d90:	823b      	strh	r3, [r7, #16]
    uint16_t distance = 0;       // Variable to hold the distance value
 8002d92:	2300      	movs	r3, #0
 8002d94:	82fb      	strh	r3, [r7, #22]

    // Trigger a new measurement
    uint8_t startMeasurementCmd = 0x01;  // Trigger new measurement
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
    	if (HAL_I2C_Mem_Write(&hi2c1, (deviceAddress << 1), 0x00, 1, &startMeasurementCmd, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	b299      	uxth	r1, r3
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	2301      	movs	r3, #1
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	f107 030f 	add.w	r3, r7, #15
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2301      	movs	r3, #1
 8002db4:	2200      	movs	r2, #0
 8002db6:	481f      	ldr	r0, [pc, #124]	@ (8002e34 <readDistance+0xb4>)
 8002db8:	f7fe fcd8 	bl	800176c <HAL_I2C_Mem_Write>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <readDistance+0x48>
    		return 0xFFFF;  // Error
 8002dc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dc6:	e031      	b.n	8002e2c <readDistance+0xac>
        }

    // Transmit the register address
    if (HAL_I2C_Master_Transmit(&hi2c1, (deviceAddress << 1), &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	b299      	uxth	r1, r3
 8002dd0:	f107 0215 	add.w	r2, r7, #21
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2301      	movs	r3, #1
 8002ddc:	4815      	ldr	r0, [pc, #84]	@ (8002e34 <readDistance+0xb4>)
 8002dde:	f7fe f95b 	bl	8001098 <HAL_I2C_Master_Transmit>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <readDistance+0x6e>
        // Handle error (e.g., return 0 or a specific error code)
        return 0xFFFF;  // Return 0xFFFF to indicate an error
 8002de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dec:	e01e      	b.n	8002e2c <readDistance+0xac>
    }

    // Receive the 2-byte distance data
    if (HAL_I2C_Master_Receive(&hi2c1, (deviceAddress << 1) | 1, buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	b299      	uxth	r1, r3
 8002dfc:	f107 0210 	add.w	r2, r7, #16
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2302      	movs	r3, #2
 8002e08:	480a      	ldr	r0, [pc, #40]	@ (8002e34 <readDistance+0xb4>)
 8002e0a:	f7fe fa43 	bl	8001294 <HAL_I2C_Master_Receive>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <readDistance+0x9a>
        // Handle error (e.g., return 0 or a specific error code)
        return 0xFFFF;  // Return 0xFFFF to indicate an error
 8002e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e18:	e008      	b.n	8002e2c <readDistance+0xac>
    }

    // Combine MSB and LSB to form the 16-bit distance value
    distance = (buffer[0] << 8) | buffer[1];
 8002e1a:	7c3b      	ldrb	r3, [r7, #16]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	7c7b      	ldrb	r3, [r7, #17]
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	82fb      	strh	r3, [r7, #22]

    return distance;
 8002e2a:	8afb      	ldrh	r3, [r7, #22]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000088 	.word	0x20000088

08002e38 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002e3e:	f000 fa25 	bl	800328c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002e42:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002e46:	2201      	movs	r2, #1
 8002e48:	2178      	movs	r1, #120	@ 0x78
 8002e4a:	485b      	ldr	r0, [pc, #364]	@ (8002fb8 <SSD1306_Init+0x180>)
 8002e4c:	f7fe fd88 	bl	8001960 <HAL_I2C_IsDeviceReady>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e0a9      	b.n	8002fae <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002e5a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002e5e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e60:	e002      	b.n	8002e68 <SSD1306_Init+0x30>
		p--;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002e6e:	22ae      	movs	r2, #174	@ 0xae
 8002e70:	2100      	movs	r1, #0
 8002e72:	2078      	movs	r0, #120	@ 0x78
 8002e74:	f000 fa84 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002e78:	2220      	movs	r2, #32
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2078      	movs	r0, #120	@ 0x78
 8002e7e:	f000 fa7f 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002e82:	2210      	movs	r2, #16
 8002e84:	2100      	movs	r1, #0
 8002e86:	2078      	movs	r0, #120	@ 0x78
 8002e88:	f000 fa7a 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e8c:	22b0      	movs	r2, #176	@ 0xb0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	2078      	movs	r0, #120	@ 0x78
 8002e92:	f000 fa75 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002e96:	22c8      	movs	r2, #200	@ 0xc8
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2078      	movs	r0, #120	@ 0x78
 8002e9c:	f000 fa70 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2078      	movs	r0, #120	@ 0x78
 8002ea6:	f000 fa6b 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002eaa:	2210      	movs	r2, #16
 8002eac:	2100      	movs	r1, #0
 8002eae:	2078      	movs	r0, #120	@ 0x78
 8002eb0:	f000 fa66 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002eb4:	2240      	movs	r2, #64	@ 0x40
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2078      	movs	r0, #120	@ 0x78
 8002eba:	f000 fa61 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002ebe:	2281      	movs	r2, #129	@ 0x81
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2078      	movs	r0, #120	@ 0x78
 8002ec4:	f000 fa5c 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002ec8:	22ff      	movs	r2, #255	@ 0xff
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2078      	movs	r0, #120	@ 0x78
 8002ece:	f000 fa57 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002ed2:	22a1      	movs	r2, #161	@ 0xa1
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2078      	movs	r0, #120	@ 0x78
 8002ed8:	f000 fa52 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002edc:	22a6      	movs	r2, #166	@ 0xa6
 8002ede:	2100      	movs	r1, #0
 8002ee0:	2078      	movs	r0, #120	@ 0x78
 8002ee2:	f000 fa4d 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002ee6:	22a8      	movs	r2, #168	@ 0xa8
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2078      	movs	r0, #120	@ 0x78
 8002eec:	f000 fa48 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002ef0:	223f      	movs	r2, #63	@ 0x3f
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2078      	movs	r0, #120	@ 0x78
 8002ef6:	f000 fa43 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002efa:	22a4      	movs	r2, #164	@ 0xa4
 8002efc:	2100      	movs	r1, #0
 8002efe:	2078      	movs	r0, #120	@ 0x78
 8002f00:	f000 fa3e 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002f04:	22d3      	movs	r2, #211	@ 0xd3
 8002f06:	2100      	movs	r1, #0
 8002f08:	2078      	movs	r0, #120	@ 0x78
 8002f0a:	f000 fa39 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	2078      	movs	r0, #120	@ 0x78
 8002f14:	f000 fa34 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f18:	22d5      	movs	r2, #213	@ 0xd5
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	2078      	movs	r0, #120	@ 0x78
 8002f1e:	f000 fa2f 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002f22:	22f0      	movs	r2, #240	@ 0xf0
 8002f24:	2100      	movs	r1, #0
 8002f26:	2078      	movs	r0, #120	@ 0x78
 8002f28:	f000 fa2a 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002f2c:	22d9      	movs	r2, #217	@ 0xd9
 8002f2e:	2100      	movs	r1, #0
 8002f30:	2078      	movs	r0, #120	@ 0x78
 8002f32:	f000 fa25 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002f36:	2222      	movs	r2, #34	@ 0x22
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2078      	movs	r0, #120	@ 0x78
 8002f3c:	f000 fa20 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002f40:	22da      	movs	r2, #218	@ 0xda
 8002f42:	2100      	movs	r1, #0
 8002f44:	2078      	movs	r0, #120	@ 0x78
 8002f46:	f000 fa1b 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002f4a:	2212      	movs	r2, #18
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2078      	movs	r0, #120	@ 0x78
 8002f50:	f000 fa16 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002f54:	22db      	movs	r2, #219	@ 0xdb
 8002f56:	2100      	movs	r1, #0
 8002f58:	2078      	movs	r0, #120	@ 0x78
 8002f5a:	f000 fa11 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002f5e:	2220      	movs	r2, #32
 8002f60:	2100      	movs	r1, #0
 8002f62:	2078      	movs	r0, #120	@ 0x78
 8002f64:	f000 fa0c 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002f68:	228d      	movs	r2, #141	@ 0x8d
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2078      	movs	r0, #120	@ 0x78
 8002f6e:	f000 fa07 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002f72:	2214      	movs	r2, #20
 8002f74:	2100      	movs	r1, #0
 8002f76:	2078      	movs	r0, #120	@ 0x78
 8002f78:	f000 fa02 	bl	8003380 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002f7c:	22af      	movs	r2, #175	@ 0xaf
 8002f7e:	2100      	movs	r1, #0
 8002f80:	2078      	movs	r0, #120	@ 0x78
 8002f82:	f000 f9fd 	bl	8003380 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002f86:	222e      	movs	r2, #46	@ 0x2e
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2078      	movs	r0, #120	@ 0x78
 8002f8c:	f000 f9f8 	bl	8003380 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f000 f843 	bl	800301c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002f96:	f000 f813 	bl	8002fc0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <SSD1306_Init+0x184>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <SSD1306_Init+0x184>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002fa6:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <SSD1306_Init+0x184>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002fac:	2301      	movs	r3, #1
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000088 	.word	0x20000088
 8002fbc:	200004dc 	.word	0x200004dc

08002fc0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	e01d      	b.n	8003008 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	3b50      	subs	r3, #80	@ 0x50
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2078      	movs	r0, #120	@ 0x78
 8002fd8:	f000 f9d2 	bl	8003380 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	2078      	movs	r0, #120	@ 0x78
 8002fe2:	f000 f9cd 	bl	8003380 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2078      	movs	r0, #120	@ 0x78
 8002fec:	f000 f9c8 	bl	8003380 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	01db      	lsls	r3, r3, #7
 8002ff4:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <SSD1306_UpdateScreen+0x58>)
 8002ff6:	441a      	add	r2, r3
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	2140      	movs	r1, #64	@ 0x40
 8002ffc:	2078      	movs	r0, #120	@ 0x78
 8002ffe:	f000 f959 	bl	80032b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	3301      	adds	r3, #1
 8003006:	71fb      	strb	r3, [r7, #7]
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b07      	cmp	r3, #7
 800300c:	d9de      	bls.n	8002fcc <SSD1306_UpdateScreen+0xc>
	}
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200000dc 	.word	0x200000dc

0800301c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <SSD1306_Fill+0x14>
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <SSD1306_Fill+0x16>
 8003030:	23ff      	movs	r3, #255	@ 0xff
 8003032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003036:	4619      	mov	r1, r3
 8003038:	4803      	ldr	r0, [pc, #12]	@ (8003048 <SSD1306_Fill+0x2c>)
 800303a:	f000 fa4f 	bl	80034dc <memset>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200000dc 	.word	0x200000dc

0800304c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
 8003056:	460b      	mov	r3, r1
 8003058:	80bb      	strh	r3, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	70fb      	strb	r3, [r7, #3]
	if (
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b7f      	cmp	r3, #127	@ 0x7f
 8003062:	d848      	bhi.n	80030f6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003064:	88bb      	ldrh	r3, [r7, #4]
 8003066:	2b3f      	cmp	r3, #63	@ 0x3f
 8003068:	d845      	bhi.n	80030f6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800306a:	4b25      	ldr	r3, [pc, #148]	@ (8003100 <SSD1306_DrawPixel+0xb4>)
 800306c:	791b      	ldrb	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d11a      	bne.n	80030bc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	88bb      	ldrh	r3, [r7, #4]
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	b298      	uxth	r0, r3
 800308e:	4603      	mov	r3, r0
 8003090:	01db      	lsls	r3, r3, #7
 8003092:	4413      	add	r3, r2
 8003094:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <SSD1306_DrawPixel+0xb8>)
 8003096:	5cd3      	ldrb	r3, [r2, r3]
 8003098:	b25a      	sxtb	r2, r3
 800309a:	88bb      	ldrh	r3, [r7, #4]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	4313      	orrs	r3, r2
 80030aa:	b259      	sxtb	r1, r3
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	4603      	mov	r3, r0
 80030b0:	01db      	lsls	r3, r3, #7
 80030b2:	4413      	add	r3, r2
 80030b4:	b2c9      	uxtb	r1, r1
 80030b6:	4a13      	ldr	r2, [pc, #76]	@ (8003104 <SSD1306_DrawPixel+0xb8>)
 80030b8:	54d1      	strb	r1, [r2, r3]
 80030ba:	e01d      	b.n	80030f8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	88bb      	ldrh	r3, [r7, #4]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	b298      	uxth	r0, r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	01db      	lsls	r3, r3, #7
 80030c8:	4413      	add	r3, r2
 80030ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003104 <SSD1306_DrawPixel+0xb8>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	b25a      	sxtb	r2, r3
 80030d0:	88bb      	ldrh	r3, [r7, #4]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	2101      	movs	r1, #1
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	b25b      	sxtb	r3, r3
 80030e2:	4013      	ands	r3, r2
 80030e4:	b259      	sxtb	r1, r3
 80030e6:	88fa      	ldrh	r2, [r7, #6]
 80030e8:	4603      	mov	r3, r0
 80030ea:	01db      	lsls	r3, r3, #7
 80030ec:	4413      	add	r3, r2
 80030ee:	b2c9      	uxtb	r1, r1
 80030f0:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <SSD1306_DrawPixel+0xb8>)
 80030f2:	54d1      	strb	r1, [r2, r3]
 80030f4:	e000      	b.n	80030f8 <SSD1306_DrawPixel+0xac>
		return;
 80030f6:	bf00      	nop
	}
}
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	200004dc 	.word	0x200004dc
 8003104:	200000dc 	.word	0x200000dc

08003108 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	460a      	mov	r2, r1
 8003112:	80fb      	strh	r3, [r7, #6]
 8003114:	4613      	mov	r3, r2
 8003116:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003118:	4a05      	ldr	r2, [pc, #20]	@ (8003130 <SSD1306_GotoXY+0x28>)
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800311e:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <SSD1306_GotoXY+0x28>)
 8003120:	88bb      	ldrh	r3, [r7, #4]
 8003122:	8053      	strh	r3, [r2, #2]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	200004dc 	.word	0x200004dc

08003134 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
 8003140:	4613      	mov	r3, r2
 8003142:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003144:	4b39      	ldr	r3, [pc, #228]	@ (800322c <SSD1306_Putc+0xf8>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4413      	add	r3, r2
	if (
 8003150:	2b7f      	cmp	r3, #127	@ 0x7f
 8003152:	dc07      	bgt.n	8003164 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003154:	4b35      	ldr	r3, [pc, #212]	@ (800322c <SSD1306_Putc+0xf8>)
 8003156:	885b      	ldrh	r3, [r3, #2]
 8003158:	461a      	mov	r2, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003160:	2b3f      	cmp	r3, #63	@ 0x3f
 8003162:	dd01      	ble.n	8003168 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003164:	2300      	movs	r3, #0
 8003166:	e05d      	b.n	8003224 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	e04b      	b.n	8003206 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	3b20      	subs	r3, #32
 8003176:	6839      	ldr	r1, [r7, #0]
 8003178:	7849      	ldrb	r1, [r1, #1]
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4619      	mov	r1, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	440b      	add	r3, r1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e030      	b.n	80031f4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80031a2:	4b22      	ldr	r3, [pc, #136]	@ (800322c <SSD1306_Putc+0xf8>)
 80031a4:	881a      	ldrh	r2, [r3, #0]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	b298      	uxth	r0, r3
 80031ae:	4b1f      	ldr	r3, [pc, #124]	@ (800322c <SSD1306_Putc+0xf8>)
 80031b0:	885a      	ldrh	r2, [r3, #2]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	79ba      	ldrb	r2, [r7, #6]
 80031bc:	4619      	mov	r1, r3
 80031be:	f7ff ff45 	bl	800304c <SSD1306_DrawPixel>
 80031c2:	e014      	b.n	80031ee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <SSD1306_Putc+0xf8>)
 80031c6:	881a      	ldrh	r2, [r3, #0]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	b298      	uxth	r0, r3
 80031d0:	4b16      	ldr	r3, [pc, #88]	@ (800322c <SSD1306_Putc+0xf8>)
 80031d2:	885a      	ldrh	r2, [r3, #2]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4413      	add	r3, r2
 80031da:	b299      	uxth	r1, r3
 80031dc:	79bb      	ldrb	r3, [r7, #6]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	f7ff ff2f 	bl	800304c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3301      	adds	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d3c8      	bcc.n	8003192 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	3301      	adds	r3, #1
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	461a      	mov	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	4293      	cmp	r3, r2
 8003210:	d3ad      	bcc.n	800316e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003212:	4b06      	ldr	r3, [pc, #24]	@ (800322c <SSD1306_Putc+0xf8>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	4413      	add	r3, r2
 800321c:	b29a      	uxth	r2, r3
 800321e:	4b03      	ldr	r3, [pc, #12]	@ (800322c <SSD1306_Putc+0xf8>)
 8003220:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003222:	79fb      	ldrb	r3, [r7, #7]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	200004dc 	.word	0x200004dc

08003230 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800323e:	e012      	b.n	8003266 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	79fa      	ldrb	r2, [r7, #7]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff73 	bl	8003134 <SSD1306_Putc>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d002      	beq.n	8003260 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	e008      	b.n	8003272 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e8      	bne.n	8003240 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	781b      	ldrb	r3, [r3, #0]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800327e:	2000      	movs	r0, #0
 8003280:	f7ff fecc 	bl	800301c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003284:	f7ff fe9c 	bl	8002fc0 <SSD1306_UpdateScreen>
}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}

0800328c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003292:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <ssd1306_I2C_Init+0x24>)
 8003294:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003296:	e002      	b.n	800329e <ssd1306_I2C_Init+0x12>
		p--;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f9      	bne.n	8003298 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	0003d090 	.word	0x0003d090

080032b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b0c7      	sub	sp, #284	@ 0x11c
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	4604      	mov	r4, r0
 80032bc:	4608      	mov	r0, r1
 80032be:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80032c2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80032c6:	600a      	str	r2, [r1, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032ce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80032d2:	4622      	mov	r2, r4
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032da:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80032de:	4602      	mov	r2, r0
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032ea:	460a      	mov	r2, r1
 80032ec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80032ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80032fa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003302:	2300      	movs	r3, #0
 8003304:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003308:	e015      	b.n	8003336 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800330a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800330e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003312:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	441a      	add	r2, r3
 800331a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800331e:	3301      	adds	r3, #1
 8003320:	7811      	ldrb	r1, [r2, #0]
 8003322:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003326:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800332a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800332c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003330:	3301      	adds	r3, #1
 8003332:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003336:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800333a:	b29b      	uxth	r3, r3
 800333c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003340:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003344:	8812      	ldrh	r2, [r2, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d8df      	bhi.n	800330a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800334a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800334e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b299      	uxth	r1, r3
 8003356:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800335a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	b29b      	uxth	r3, r3
 8003364:	f107 020c 	add.w	r2, r7, #12
 8003368:	200a      	movs	r0, #10
 800336a:	9000      	str	r0, [sp, #0]
 800336c:	4803      	ldr	r0, [pc, #12]	@ (800337c <ssd1306_I2C_WriteMulti+0xc8>)
 800336e:	f7fd fe93 	bl	8001098 <HAL_I2C_Master_Transmit>
}
 8003372:	bf00      	nop
 8003374:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003378:	46bd      	mov	sp, r7
 800337a:	bd90      	pop	{r4, r7, pc}
 800337c:	20000088 	.word	0x20000088

08003380 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af02      	add	r7, sp, #8
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
 800338a:	460b      	mov	r3, r1
 800338c:	71bb      	strb	r3, [r7, #6]
 800338e:	4613      	mov	r3, r2
 8003390:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003392:	79bb      	ldrb	r3, [r7, #6]
 8003394:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003396:	797b      	ldrb	r3, [r7, #5]
 8003398:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	b299      	uxth	r1, r3
 800339e:	f107 020c 	add.w	r2, r7, #12
 80033a2:	230a      	movs	r3, #10
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2302      	movs	r3, #2
 80033a8:	4803      	ldr	r0, [pc, #12]	@ (80033b8 <ssd1306_I2C_Write+0x38>)
 80033aa:	f7fd fe75 	bl	8001098 <HAL_I2C_Master_Transmit>
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000088 	.word	0x20000088

080033bc <__itoa>:
 80033bc:	1e93      	subs	r3, r2, #2
 80033be:	2b22      	cmp	r3, #34	@ 0x22
 80033c0:	b510      	push	{r4, lr}
 80033c2:	460c      	mov	r4, r1
 80033c4:	d904      	bls.n	80033d0 <__itoa+0x14>
 80033c6:	2300      	movs	r3, #0
 80033c8:	461c      	mov	r4, r3
 80033ca:	700b      	strb	r3, [r1, #0]
 80033cc:	4620      	mov	r0, r4
 80033ce:	bd10      	pop	{r4, pc}
 80033d0:	2a0a      	cmp	r2, #10
 80033d2:	d109      	bne.n	80033e8 <__itoa+0x2c>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	da07      	bge.n	80033e8 <__itoa+0x2c>
 80033d8:	232d      	movs	r3, #45	@ 0x2d
 80033da:	700b      	strb	r3, [r1, #0]
 80033dc:	2101      	movs	r1, #1
 80033de:	4240      	negs	r0, r0
 80033e0:	4421      	add	r1, r4
 80033e2:	f000 f805 	bl	80033f0 <__utoa>
 80033e6:	e7f1      	b.n	80033cc <__itoa+0x10>
 80033e8:	2100      	movs	r1, #0
 80033ea:	e7f9      	b.n	80033e0 <__itoa+0x24>

080033ec <itoa>:
 80033ec:	f7ff bfe6 	b.w	80033bc <__itoa>

080033f0 <__utoa>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	b08b      	sub	sp, #44	@ 0x2c
 80033f4:	4605      	mov	r5, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	466e      	mov	r6, sp
 80033fa:	4c1d      	ldr	r4, [pc, #116]	@ (8003470 <__utoa+0x80>)
 80033fc:	f104 0c20 	add.w	ip, r4, #32
 8003400:	4637      	mov	r7, r6
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	6861      	ldr	r1, [r4, #4]
 8003406:	3408      	adds	r4, #8
 8003408:	c703      	stmia	r7!, {r0, r1}
 800340a:	4564      	cmp	r4, ip
 800340c:	463e      	mov	r6, r7
 800340e:	d1f7      	bne.n	8003400 <__utoa+0x10>
 8003410:	7921      	ldrb	r1, [r4, #4]
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	7139      	strb	r1, [r7, #4]
 8003416:	1e91      	subs	r1, r2, #2
 8003418:	2922      	cmp	r1, #34	@ 0x22
 800341a:	6038      	str	r0, [r7, #0]
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	d904      	bls.n	800342c <__utoa+0x3c>
 8003422:	7019      	strb	r1, [r3, #0]
 8003424:	460b      	mov	r3, r1
 8003426:	4618      	mov	r0, r3
 8003428:	b00b      	add	sp, #44	@ 0x2c
 800342a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800342c:	1e58      	subs	r0, r3, #1
 800342e:	4684      	mov	ip, r0
 8003430:	fbb5 f7f2 	udiv	r7, r5, r2
 8003434:	fb02 5617 	mls	r6, r2, r7, r5
 8003438:	3628      	adds	r6, #40	@ 0x28
 800343a:	446e      	add	r6, sp
 800343c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003440:	460c      	mov	r4, r1
 8003442:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003446:	462e      	mov	r6, r5
 8003448:	42b2      	cmp	r2, r6
 800344a:	463d      	mov	r5, r7
 800344c:	f101 0101 	add.w	r1, r1, #1
 8003450:	d9ee      	bls.n	8003430 <__utoa+0x40>
 8003452:	2200      	movs	r2, #0
 8003454:	545a      	strb	r2, [r3, r1]
 8003456:	1919      	adds	r1, r3, r4
 8003458:	1aa5      	subs	r5, r4, r2
 800345a:	42aa      	cmp	r2, r5
 800345c:	dae3      	bge.n	8003426 <__utoa+0x36>
 800345e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003462:	780e      	ldrb	r6, [r1, #0]
 8003464:	3201      	adds	r2, #1
 8003466:	7006      	strb	r6, [r0, #0]
 8003468:	f801 5901 	strb.w	r5, [r1], #-1
 800346c:	e7f4      	b.n	8003458 <__utoa+0x68>
 800346e:	bf00      	nop
 8003470:	08004c00 	.word	0x08004c00

08003474 <sniprintf>:
 8003474:	b40c      	push	{r2, r3}
 8003476:	b530      	push	{r4, r5, lr}
 8003478:	4b17      	ldr	r3, [pc, #92]	@ (80034d8 <sniprintf+0x64>)
 800347a:	1e0c      	subs	r4, r1, #0
 800347c:	681d      	ldr	r5, [r3, #0]
 800347e:	b09d      	sub	sp, #116	@ 0x74
 8003480:	da08      	bge.n	8003494 <sniprintf+0x20>
 8003482:	238b      	movs	r3, #139	@ 0x8b
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	602b      	str	r3, [r5, #0]
 800348a:	b01d      	add	sp, #116	@ 0x74
 800348c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003490:	b002      	add	sp, #8
 8003492:	4770      	bx	lr
 8003494:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003498:	f8ad 3014 	strh.w	r3, [sp, #20]
 800349c:	bf0c      	ite	eq
 800349e:	4623      	moveq	r3, r4
 80034a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	9307      	str	r3, [sp, #28]
 80034a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034ac:	9002      	str	r0, [sp, #8]
 80034ae:	9006      	str	r0, [sp, #24]
 80034b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80034b4:	4628      	mov	r0, r5
 80034b6:	ab21      	add	r3, sp, #132	@ 0x84
 80034b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80034ba:	a902      	add	r1, sp, #8
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	f000 f993 	bl	80037e8 <_svfiprintf_r>
 80034c2:	1c43      	adds	r3, r0, #1
 80034c4:	bfbc      	itt	lt
 80034c6:	238b      	movlt	r3, #139	@ 0x8b
 80034c8:	602b      	strlt	r3, [r5, #0]
 80034ca:	2c00      	cmp	r4, #0
 80034cc:	d0dd      	beq.n	800348a <sniprintf+0x16>
 80034ce:	2200      	movs	r2, #0
 80034d0:	9b02      	ldr	r3, [sp, #8]
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e7d9      	b.n	800348a <sniprintf+0x16>
 80034d6:	bf00      	nop
 80034d8:	20000014 	.word	0x20000014

080034dc <memset>:
 80034dc:	4603      	mov	r3, r0
 80034de:	4402      	add	r2, r0
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d100      	bne.n	80034e6 <memset+0xa>
 80034e4:	4770      	bx	lr
 80034e6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ea:	e7f9      	b.n	80034e0 <memset+0x4>

080034ec <__errno>:
 80034ec:	4b01      	ldr	r3, [pc, #4]	@ (80034f4 <__errno+0x8>)
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000014 	.word	0x20000014

080034f8 <__libc_init_array>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	2600      	movs	r6, #0
 80034fc:	4d0c      	ldr	r5, [pc, #48]	@ (8003530 <__libc_init_array+0x38>)
 80034fe:	4c0d      	ldr	r4, [pc, #52]	@ (8003534 <__libc_init_array+0x3c>)
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	42a6      	cmp	r6, r4
 8003506:	d109      	bne.n	800351c <__libc_init_array+0x24>
 8003508:	f000 fc78 	bl	8003dfc <_init>
 800350c:	2600      	movs	r6, #0
 800350e:	4d0a      	ldr	r5, [pc, #40]	@ (8003538 <__libc_init_array+0x40>)
 8003510:	4c0a      	ldr	r4, [pc, #40]	@ (800353c <__libc_init_array+0x44>)
 8003512:	1b64      	subs	r4, r4, r5
 8003514:	10a4      	asrs	r4, r4, #2
 8003516:	42a6      	cmp	r6, r4
 8003518:	d105      	bne.n	8003526 <__libc_init_array+0x2e>
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003520:	4798      	blx	r3
 8003522:	3601      	adds	r6, #1
 8003524:	e7ee      	b.n	8003504 <__libc_init_array+0xc>
 8003526:	f855 3b04 	ldr.w	r3, [r5], #4
 800352a:	4798      	blx	r3
 800352c:	3601      	adds	r6, #1
 800352e:	e7f2      	b.n	8003516 <__libc_init_array+0x1e>
 8003530:	08004c58 	.word	0x08004c58
 8003534:	08004c58 	.word	0x08004c58
 8003538:	08004c58 	.word	0x08004c58
 800353c:	08004c5c 	.word	0x08004c5c

08003540 <__retarget_lock_acquire_recursive>:
 8003540:	4770      	bx	lr

08003542 <__retarget_lock_release_recursive>:
 8003542:	4770      	bx	lr

08003544 <_free_r>:
 8003544:	b538      	push	{r3, r4, r5, lr}
 8003546:	4605      	mov	r5, r0
 8003548:	2900      	cmp	r1, #0
 800354a:	d040      	beq.n	80035ce <_free_r+0x8a>
 800354c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003550:	1f0c      	subs	r4, r1, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfb8      	it	lt
 8003556:	18e4      	addlt	r4, r4, r3
 8003558:	f000 f8de 	bl	8003718 <__malloc_lock>
 800355c:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <_free_r+0x8c>)
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	b933      	cbnz	r3, 8003570 <_free_r+0x2c>
 8003562:	6063      	str	r3, [r4, #4]
 8003564:	6014      	str	r4, [r2, #0]
 8003566:	4628      	mov	r0, r5
 8003568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800356c:	f000 b8da 	b.w	8003724 <__malloc_unlock>
 8003570:	42a3      	cmp	r3, r4
 8003572:	d908      	bls.n	8003586 <_free_r+0x42>
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	1821      	adds	r1, r4, r0
 8003578:	428b      	cmp	r3, r1
 800357a:	bf01      	itttt	eq
 800357c:	6819      	ldreq	r1, [r3, #0]
 800357e:	685b      	ldreq	r3, [r3, #4]
 8003580:	1809      	addeq	r1, r1, r0
 8003582:	6021      	streq	r1, [r4, #0]
 8003584:	e7ed      	b.n	8003562 <_free_r+0x1e>
 8003586:	461a      	mov	r2, r3
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	b10b      	cbz	r3, 8003590 <_free_r+0x4c>
 800358c:	42a3      	cmp	r3, r4
 800358e:	d9fa      	bls.n	8003586 <_free_r+0x42>
 8003590:	6811      	ldr	r1, [r2, #0]
 8003592:	1850      	adds	r0, r2, r1
 8003594:	42a0      	cmp	r0, r4
 8003596:	d10b      	bne.n	80035b0 <_free_r+0x6c>
 8003598:	6820      	ldr	r0, [r4, #0]
 800359a:	4401      	add	r1, r0
 800359c:	1850      	adds	r0, r2, r1
 800359e:	4283      	cmp	r3, r0
 80035a0:	6011      	str	r1, [r2, #0]
 80035a2:	d1e0      	bne.n	8003566 <_free_r+0x22>
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4408      	add	r0, r1
 80035aa:	6010      	str	r0, [r2, #0]
 80035ac:	6053      	str	r3, [r2, #4]
 80035ae:	e7da      	b.n	8003566 <_free_r+0x22>
 80035b0:	d902      	bls.n	80035b8 <_free_r+0x74>
 80035b2:	230c      	movs	r3, #12
 80035b4:	602b      	str	r3, [r5, #0]
 80035b6:	e7d6      	b.n	8003566 <_free_r+0x22>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	1821      	adds	r1, r4, r0
 80035bc:	428b      	cmp	r3, r1
 80035be:	bf01      	itttt	eq
 80035c0:	6819      	ldreq	r1, [r3, #0]
 80035c2:	685b      	ldreq	r3, [r3, #4]
 80035c4:	1809      	addeq	r1, r1, r0
 80035c6:	6021      	streq	r1, [r4, #0]
 80035c8:	6063      	str	r3, [r4, #4]
 80035ca:	6054      	str	r4, [r2, #4]
 80035cc:	e7cb      	b.n	8003566 <_free_r+0x22>
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	20000628 	.word	0x20000628

080035d4 <sbrk_aligned>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4e0f      	ldr	r6, [pc, #60]	@ (8003614 <sbrk_aligned+0x40>)
 80035d8:	460c      	mov	r4, r1
 80035da:	6831      	ldr	r1, [r6, #0]
 80035dc:	4605      	mov	r5, r0
 80035de:	b911      	cbnz	r1, 80035e6 <sbrk_aligned+0x12>
 80035e0:	f000 fbaa 	bl	8003d38 <_sbrk_r>
 80035e4:	6030      	str	r0, [r6, #0]
 80035e6:	4621      	mov	r1, r4
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 fba5 	bl	8003d38 <_sbrk_r>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	d103      	bne.n	80035fa <sbrk_aligned+0x26>
 80035f2:	f04f 34ff 	mov.w	r4, #4294967295
 80035f6:	4620      	mov	r0, r4
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
 80035fa:	1cc4      	adds	r4, r0, #3
 80035fc:	f024 0403 	bic.w	r4, r4, #3
 8003600:	42a0      	cmp	r0, r4
 8003602:	d0f8      	beq.n	80035f6 <sbrk_aligned+0x22>
 8003604:	1a21      	subs	r1, r4, r0
 8003606:	4628      	mov	r0, r5
 8003608:	f000 fb96 	bl	8003d38 <_sbrk_r>
 800360c:	3001      	adds	r0, #1
 800360e:	d1f2      	bne.n	80035f6 <sbrk_aligned+0x22>
 8003610:	e7ef      	b.n	80035f2 <sbrk_aligned+0x1e>
 8003612:	bf00      	nop
 8003614:	20000624 	.word	0x20000624

08003618 <_malloc_r>:
 8003618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800361c:	1ccd      	adds	r5, r1, #3
 800361e:	f025 0503 	bic.w	r5, r5, #3
 8003622:	3508      	adds	r5, #8
 8003624:	2d0c      	cmp	r5, #12
 8003626:	bf38      	it	cc
 8003628:	250c      	movcc	r5, #12
 800362a:	2d00      	cmp	r5, #0
 800362c:	4606      	mov	r6, r0
 800362e:	db01      	blt.n	8003634 <_malloc_r+0x1c>
 8003630:	42a9      	cmp	r1, r5
 8003632:	d904      	bls.n	800363e <_malloc_r+0x26>
 8003634:	230c      	movs	r3, #12
 8003636:	6033      	str	r3, [r6, #0]
 8003638:	2000      	movs	r0, #0
 800363a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800363e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003714 <_malloc_r+0xfc>
 8003642:	f000 f869 	bl	8003718 <__malloc_lock>
 8003646:	f8d8 3000 	ldr.w	r3, [r8]
 800364a:	461c      	mov	r4, r3
 800364c:	bb44      	cbnz	r4, 80036a0 <_malloc_r+0x88>
 800364e:	4629      	mov	r1, r5
 8003650:	4630      	mov	r0, r6
 8003652:	f7ff ffbf 	bl	80035d4 <sbrk_aligned>
 8003656:	1c43      	adds	r3, r0, #1
 8003658:	4604      	mov	r4, r0
 800365a:	d158      	bne.n	800370e <_malloc_r+0xf6>
 800365c:	f8d8 4000 	ldr.w	r4, [r8]
 8003660:	4627      	mov	r7, r4
 8003662:	2f00      	cmp	r7, #0
 8003664:	d143      	bne.n	80036ee <_malloc_r+0xd6>
 8003666:	2c00      	cmp	r4, #0
 8003668:	d04b      	beq.n	8003702 <_malloc_r+0xea>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	4639      	mov	r1, r7
 800366e:	4630      	mov	r0, r6
 8003670:	eb04 0903 	add.w	r9, r4, r3
 8003674:	f000 fb60 	bl	8003d38 <_sbrk_r>
 8003678:	4581      	cmp	r9, r0
 800367a:	d142      	bne.n	8003702 <_malloc_r+0xea>
 800367c:	6821      	ldr	r1, [r4, #0]
 800367e:	4630      	mov	r0, r6
 8003680:	1a6d      	subs	r5, r5, r1
 8003682:	4629      	mov	r1, r5
 8003684:	f7ff ffa6 	bl	80035d4 <sbrk_aligned>
 8003688:	3001      	adds	r0, #1
 800368a:	d03a      	beq.n	8003702 <_malloc_r+0xea>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	442b      	add	r3, r5
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	f8d8 3000 	ldr.w	r3, [r8]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	bb62      	cbnz	r2, 80036f4 <_malloc_r+0xdc>
 800369a:	f8c8 7000 	str.w	r7, [r8]
 800369e:	e00f      	b.n	80036c0 <_malloc_r+0xa8>
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	1b52      	subs	r2, r2, r5
 80036a4:	d420      	bmi.n	80036e8 <_malloc_r+0xd0>
 80036a6:	2a0b      	cmp	r2, #11
 80036a8:	d917      	bls.n	80036da <_malloc_r+0xc2>
 80036aa:	1961      	adds	r1, r4, r5
 80036ac:	42a3      	cmp	r3, r4
 80036ae:	6025      	str	r5, [r4, #0]
 80036b0:	bf18      	it	ne
 80036b2:	6059      	strne	r1, [r3, #4]
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	bf08      	it	eq
 80036b8:	f8c8 1000 	streq.w	r1, [r8]
 80036bc:	5162      	str	r2, [r4, r5]
 80036be:	604b      	str	r3, [r1, #4]
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 f82f 	bl	8003724 <__malloc_unlock>
 80036c6:	f104 000b 	add.w	r0, r4, #11
 80036ca:	1d23      	adds	r3, r4, #4
 80036cc:	f020 0007 	bic.w	r0, r0, #7
 80036d0:	1ac2      	subs	r2, r0, r3
 80036d2:	bf1c      	itt	ne
 80036d4:	1a1b      	subne	r3, r3, r0
 80036d6:	50a3      	strne	r3, [r4, r2]
 80036d8:	e7af      	b.n	800363a <_malloc_r+0x22>
 80036da:	6862      	ldr	r2, [r4, #4]
 80036dc:	42a3      	cmp	r3, r4
 80036de:	bf0c      	ite	eq
 80036e0:	f8c8 2000 	streq.w	r2, [r8]
 80036e4:	605a      	strne	r2, [r3, #4]
 80036e6:	e7eb      	b.n	80036c0 <_malloc_r+0xa8>
 80036e8:	4623      	mov	r3, r4
 80036ea:	6864      	ldr	r4, [r4, #4]
 80036ec:	e7ae      	b.n	800364c <_malloc_r+0x34>
 80036ee:	463c      	mov	r4, r7
 80036f0:	687f      	ldr	r7, [r7, #4]
 80036f2:	e7b6      	b.n	8003662 <_malloc_r+0x4a>
 80036f4:	461a      	mov	r2, r3
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	d1fb      	bne.n	80036f4 <_malloc_r+0xdc>
 80036fc:	2300      	movs	r3, #0
 80036fe:	6053      	str	r3, [r2, #4]
 8003700:	e7de      	b.n	80036c0 <_malloc_r+0xa8>
 8003702:	230c      	movs	r3, #12
 8003704:	4630      	mov	r0, r6
 8003706:	6033      	str	r3, [r6, #0]
 8003708:	f000 f80c 	bl	8003724 <__malloc_unlock>
 800370c:	e794      	b.n	8003638 <_malloc_r+0x20>
 800370e:	6005      	str	r5, [r0, #0]
 8003710:	e7d6      	b.n	80036c0 <_malloc_r+0xa8>
 8003712:	bf00      	nop
 8003714:	20000628 	.word	0x20000628

08003718 <__malloc_lock>:
 8003718:	4801      	ldr	r0, [pc, #4]	@ (8003720 <__malloc_lock+0x8>)
 800371a:	f7ff bf11 	b.w	8003540 <__retarget_lock_acquire_recursive>
 800371e:	bf00      	nop
 8003720:	20000620 	.word	0x20000620

08003724 <__malloc_unlock>:
 8003724:	4801      	ldr	r0, [pc, #4]	@ (800372c <__malloc_unlock+0x8>)
 8003726:	f7ff bf0c 	b.w	8003542 <__retarget_lock_release_recursive>
 800372a:	bf00      	nop
 800372c:	20000620 	.word	0x20000620

08003730 <__ssputs_r>:
 8003730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003734:	461f      	mov	r7, r3
 8003736:	688e      	ldr	r6, [r1, #8]
 8003738:	4682      	mov	sl, r0
 800373a:	42be      	cmp	r6, r7
 800373c:	460c      	mov	r4, r1
 800373e:	4690      	mov	r8, r2
 8003740:	680b      	ldr	r3, [r1, #0]
 8003742:	d82d      	bhi.n	80037a0 <__ssputs_r+0x70>
 8003744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003748:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800374c:	d026      	beq.n	800379c <__ssputs_r+0x6c>
 800374e:	6965      	ldr	r5, [r4, #20]
 8003750:	6909      	ldr	r1, [r1, #16]
 8003752:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003756:	eba3 0901 	sub.w	r9, r3, r1
 800375a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800375e:	1c7b      	adds	r3, r7, #1
 8003760:	444b      	add	r3, r9
 8003762:	106d      	asrs	r5, r5, #1
 8003764:	429d      	cmp	r5, r3
 8003766:	bf38      	it	cc
 8003768:	461d      	movcc	r5, r3
 800376a:	0553      	lsls	r3, r2, #21
 800376c:	d527      	bpl.n	80037be <__ssputs_r+0x8e>
 800376e:	4629      	mov	r1, r5
 8003770:	f7ff ff52 	bl	8003618 <_malloc_r>
 8003774:	4606      	mov	r6, r0
 8003776:	b360      	cbz	r0, 80037d2 <__ssputs_r+0xa2>
 8003778:	464a      	mov	r2, r9
 800377a:	6921      	ldr	r1, [r4, #16]
 800377c:	f000 fafa 	bl	8003d74 <memcpy>
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800378a:	81a3      	strh	r3, [r4, #12]
 800378c:	6126      	str	r6, [r4, #16]
 800378e:	444e      	add	r6, r9
 8003790:	6026      	str	r6, [r4, #0]
 8003792:	463e      	mov	r6, r7
 8003794:	6165      	str	r5, [r4, #20]
 8003796:	eba5 0509 	sub.w	r5, r5, r9
 800379a:	60a5      	str	r5, [r4, #8]
 800379c:	42be      	cmp	r6, r7
 800379e:	d900      	bls.n	80037a2 <__ssputs_r+0x72>
 80037a0:	463e      	mov	r6, r7
 80037a2:	4632      	mov	r2, r6
 80037a4:	4641      	mov	r1, r8
 80037a6:	6820      	ldr	r0, [r4, #0]
 80037a8:	f000 faac 	bl	8003d04 <memmove>
 80037ac:	2000      	movs	r0, #0
 80037ae:	68a3      	ldr	r3, [r4, #8]
 80037b0:	1b9b      	subs	r3, r3, r6
 80037b2:	60a3      	str	r3, [r4, #8]
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	4433      	add	r3, r6
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037be:	462a      	mov	r2, r5
 80037c0:	f000 fae6 	bl	8003d90 <_realloc_r>
 80037c4:	4606      	mov	r6, r0
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d1e0      	bne.n	800378c <__ssputs_r+0x5c>
 80037ca:	4650      	mov	r0, sl
 80037cc:	6921      	ldr	r1, [r4, #16]
 80037ce:	f7ff feb9 	bl	8003544 <_free_r>
 80037d2:	230c      	movs	r3, #12
 80037d4:	f8ca 3000 	str.w	r3, [sl]
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	f04f 30ff 	mov.w	r0, #4294967295
 80037de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	e7e9      	b.n	80037ba <__ssputs_r+0x8a>
	...

080037e8 <_svfiprintf_r>:
 80037e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ec:	4698      	mov	r8, r3
 80037ee:	898b      	ldrh	r3, [r1, #12]
 80037f0:	4607      	mov	r7, r0
 80037f2:	061b      	lsls	r3, r3, #24
 80037f4:	460d      	mov	r5, r1
 80037f6:	4614      	mov	r4, r2
 80037f8:	b09d      	sub	sp, #116	@ 0x74
 80037fa:	d510      	bpl.n	800381e <_svfiprintf_r+0x36>
 80037fc:	690b      	ldr	r3, [r1, #16]
 80037fe:	b973      	cbnz	r3, 800381e <_svfiprintf_r+0x36>
 8003800:	2140      	movs	r1, #64	@ 0x40
 8003802:	f7ff ff09 	bl	8003618 <_malloc_r>
 8003806:	6028      	str	r0, [r5, #0]
 8003808:	6128      	str	r0, [r5, #16]
 800380a:	b930      	cbnz	r0, 800381a <_svfiprintf_r+0x32>
 800380c:	230c      	movs	r3, #12
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	b01d      	add	sp, #116	@ 0x74
 8003816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381a:	2340      	movs	r3, #64	@ 0x40
 800381c:	616b      	str	r3, [r5, #20]
 800381e:	2300      	movs	r3, #0
 8003820:	9309      	str	r3, [sp, #36]	@ 0x24
 8003822:	2320      	movs	r3, #32
 8003824:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003828:	2330      	movs	r3, #48	@ 0x30
 800382a:	f04f 0901 	mov.w	r9, #1
 800382e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003832:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80039cc <_svfiprintf_r+0x1e4>
 8003836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800383a:	4623      	mov	r3, r4
 800383c:	469a      	mov	sl, r3
 800383e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003842:	b10a      	cbz	r2, 8003848 <_svfiprintf_r+0x60>
 8003844:	2a25      	cmp	r2, #37	@ 0x25
 8003846:	d1f9      	bne.n	800383c <_svfiprintf_r+0x54>
 8003848:	ebba 0b04 	subs.w	fp, sl, r4
 800384c:	d00b      	beq.n	8003866 <_svfiprintf_r+0x7e>
 800384e:	465b      	mov	r3, fp
 8003850:	4622      	mov	r2, r4
 8003852:	4629      	mov	r1, r5
 8003854:	4638      	mov	r0, r7
 8003856:	f7ff ff6b 	bl	8003730 <__ssputs_r>
 800385a:	3001      	adds	r0, #1
 800385c:	f000 80a7 	beq.w	80039ae <_svfiprintf_r+0x1c6>
 8003860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003862:	445a      	add	r2, fp
 8003864:	9209      	str	r2, [sp, #36]	@ 0x24
 8003866:	f89a 3000 	ldrb.w	r3, [sl]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 809f 	beq.w	80039ae <_svfiprintf_r+0x1c6>
 8003870:	2300      	movs	r3, #0
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800387a:	f10a 0a01 	add.w	sl, sl, #1
 800387e:	9304      	str	r3, [sp, #16]
 8003880:	9307      	str	r3, [sp, #28]
 8003882:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003886:	931a      	str	r3, [sp, #104]	@ 0x68
 8003888:	4654      	mov	r4, sl
 800388a:	2205      	movs	r2, #5
 800388c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003890:	484e      	ldr	r0, [pc, #312]	@ (80039cc <_svfiprintf_r+0x1e4>)
 8003892:	f000 fa61 	bl	8003d58 <memchr>
 8003896:	9a04      	ldr	r2, [sp, #16]
 8003898:	b9d8      	cbnz	r0, 80038d2 <_svfiprintf_r+0xea>
 800389a:	06d0      	lsls	r0, r2, #27
 800389c:	bf44      	itt	mi
 800389e:	2320      	movmi	r3, #32
 80038a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038a4:	0711      	lsls	r1, r2, #28
 80038a6:	bf44      	itt	mi
 80038a8:	232b      	movmi	r3, #43	@ 0x2b
 80038aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038ae:	f89a 3000 	ldrb.w	r3, [sl]
 80038b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80038b4:	d015      	beq.n	80038e2 <_svfiprintf_r+0xfa>
 80038b6:	4654      	mov	r4, sl
 80038b8:	2000      	movs	r0, #0
 80038ba:	f04f 0c0a 	mov.w	ip, #10
 80038be:	9a07      	ldr	r2, [sp, #28]
 80038c0:	4621      	mov	r1, r4
 80038c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038c6:	3b30      	subs	r3, #48	@ 0x30
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d94b      	bls.n	8003964 <_svfiprintf_r+0x17c>
 80038cc:	b1b0      	cbz	r0, 80038fc <_svfiprintf_r+0x114>
 80038ce:	9207      	str	r2, [sp, #28]
 80038d0:	e014      	b.n	80038fc <_svfiprintf_r+0x114>
 80038d2:	eba0 0308 	sub.w	r3, r0, r8
 80038d6:	fa09 f303 	lsl.w	r3, r9, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	46a2      	mov	sl, r4
 80038de:	9304      	str	r3, [sp, #16]
 80038e0:	e7d2      	b.n	8003888 <_svfiprintf_r+0xa0>
 80038e2:	9b03      	ldr	r3, [sp, #12]
 80038e4:	1d19      	adds	r1, r3, #4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	9103      	str	r1, [sp, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bfbb      	ittet	lt
 80038ee:	425b      	neglt	r3, r3
 80038f0:	f042 0202 	orrlt.w	r2, r2, #2
 80038f4:	9307      	strge	r3, [sp, #28]
 80038f6:	9307      	strlt	r3, [sp, #28]
 80038f8:	bfb8      	it	lt
 80038fa:	9204      	strlt	r2, [sp, #16]
 80038fc:	7823      	ldrb	r3, [r4, #0]
 80038fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8003900:	d10a      	bne.n	8003918 <_svfiprintf_r+0x130>
 8003902:	7863      	ldrb	r3, [r4, #1]
 8003904:	2b2a      	cmp	r3, #42	@ 0x2a
 8003906:	d132      	bne.n	800396e <_svfiprintf_r+0x186>
 8003908:	9b03      	ldr	r3, [sp, #12]
 800390a:	3402      	adds	r4, #2
 800390c:	1d1a      	adds	r2, r3, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	9203      	str	r2, [sp, #12]
 8003912:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003916:	9305      	str	r3, [sp, #20]
 8003918:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80039d0 <_svfiprintf_r+0x1e8>
 800391c:	2203      	movs	r2, #3
 800391e:	4650      	mov	r0, sl
 8003920:	7821      	ldrb	r1, [r4, #0]
 8003922:	f000 fa19 	bl	8003d58 <memchr>
 8003926:	b138      	cbz	r0, 8003938 <_svfiprintf_r+0x150>
 8003928:	2240      	movs	r2, #64	@ 0x40
 800392a:	9b04      	ldr	r3, [sp, #16]
 800392c:	eba0 000a 	sub.w	r0, r0, sl
 8003930:	4082      	lsls	r2, r0
 8003932:	4313      	orrs	r3, r2
 8003934:	3401      	adds	r4, #1
 8003936:	9304      	str	r3, [sp, #16]
 8003938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800393c:	2206      	movs	r2, #6
 800393e:	4825      	ldr	r0, [pc, #148]	@ (80039d4 <_svfiprintf_r+0x1ec>)
 8003940:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003944:	f000 fa08 	bl	8003d58 <memchr>
 8003948:	2800      	cmp	r0, #0
 800394a:	d036      	beq.n	80039ba <_svfiprintf_r+0x1d2>
 800394c:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <_svfiprintf_r+0x1f0>)
 800394e:	bb1b      	cbnz	r3, 8003998 <_svfiprintf_r+0x1b0>
 8003950:	9b03      	ldr	r3, [sp, #12]
 8003952:	3307      	adds	r3, #7
 8003954:	f023 0307 	bic.w	r3, r3, #7
 8003958:	3308      	adds	r3, #8
 800395a:	9303      	str	r3, [sp, #12]
 800395c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800395e:	4433      	add	r3, r6
 8003960:	9309      	str	r3, [sp, #36]	@ 0x24
 8003962:	e76a      	b.n	800383a <_svfiprintf_r+0x52>
 8003964:	460c      	mov	r4, r1
 8003966:	2001      	movs	r0, #1
 8003968:	fb0c 3202 	mla	r2, ip, r2, r3
 800396c:	e7a8      	b.n	80038c0 <_svfiprintf_r+0xd8>
 800396e:	2300      	movs	r3, #0
 8003970:	f04f 0c0a 	mov.w	ip, #10
 8003974:	4619      	mov	r1, r3
 8003976:	3401      	adds	r4, #1
 8003978:	9305      	str	r3, [sp, #20]
 800397a:	4620      	mov	r0, r4
 800397c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003980:	3a30      	subs	r2, #48	@ 0x30
 8003982:	2a09      	cmp	r2, #9
 8003984:	d903      	bls.n	800398e <_svfiprintf_r+0x1a6>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0c6      	beq.n	8003918 <_svfiprintf_r+0x130>
 800398a:	9105      	str	r1, [sp, #20]
 800398c:	e7c4      	b.n	8003918 <_svfiprintf_r+0x130>
 800398e:	4604      	mov	r4, r0
 8003990:	2301      	movs	r3, #1
 8003992:	fb0c 2101 	mla	r1, ip, r1, r2
 8003996:	e7f0      	b.n	800397a <_svfiprintf_r+0x192>
 8003998:	ab03      	add	r3, sp, #12
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	462a      	mov	r2, r5
 800399e:	4638      	mov	r0, r7
 80039a0:	4b0e      	ldr	r3, [pc, #56]	@ (80039dc <_svfiprintf_r+0x1f4>)
 80039a2:	a904      	add	r1, sp, #16
 80039a4:	f3af 8000 	nop.w
 80039a8:	1c42      	adds	r2, r0, #1
 80039aa:	4606      	mov	r6, r0
 80039ac:	d1d6      	bne.n	800395c <_svfiprintf_r+0x174>
 80039ae:	89ab      	ldrh	r3, [r5, #12]
 80039b0:	065b      	lsls	r3, r3, #25
 80039b2:	f53f af2d 	bmi.w	8003810 <_svfiprintf_r+0x28>
 80039b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039b8:	e72c      	b.n	8003814 <_svfiprintf_r+0x2c>
 80039ba:	ab03      	add	r3, sp, #12
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	462a      	mov	r2, r5
 80039c0:	4638      	mov	r0, r7
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <_svfiprintf_r+0x1f4>)
 80039c4:	a904      	add	r1, sp, #16
 80039c6:	f000 f87d 	bl	8003ac4 <_printf_i>
 80039ca:	e7ed      	b.n	80039a8 <_svfiprintf_r+0x1c0>
 80039cc:	08004c25 	.word	0x08004c25
 80039d0:	08004c2b 	.word	0x08004c2b
 80039d4:	08004c2f 	.word	0x08004c2f
 80039d8:	00000000 	.word	0x00000000
 80039dc:	08003731 	.word	0x08003731

080039e0 <_printf_common>:
 80039e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e4:	4616      	mov	r6, r2
 80039e6:	4698      	mov	r8, r3
 80039e8:	688a      	ldr	r2, [r1, #8]
 80039ea:	690b      	ldr	r3, [r1, #16]
 80039ec:	4607      	mov	r7, r0
 80039ee:	4293      	cmp	r3, r2
 80039f0:	bfb8      	it	lt
 80039f2:	4613      	movlt	r3, r2
 80039f4:	6033      	str	r3, [r6, #0]
 80039f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039fa:	460c      	mov	r4, r1
 80039fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a00:	b10a      	cbz	r2, 8003a06 <_printf_common+0x26>
 8003a02:	3301      	adds	r3, #1
 8003a04:	6033      	str	r3, [r6, #0]
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	0699      	lsls	r1, r3, #26
 8003a0a:	bf42      	ittt	mi
 8003a0c:	6833      	ldrmi	r3, [r6, #0]
 8003a0e:	3302      	addmi	r3, #2
 8003a10:	6033      	strmi	r3, [r6, #0]
 8003a12:	6825      	ldr	r5, [r4, #0]
 8003a14:	f015 0506 	ands.w	r5, r5, #6
 8003a18:	d106      	bne.n	8003a28 <_printf_common+0x48>
 8003a1a:	f104 0a19 	add.w	sl, r4, #25
 8003a1e:	68e3      	ldr	r3, [r4, #12]
 8003a20:	6832      	ldr	r2, [r6, #0]
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	42ab      	cmp	r3, r5
 8003a26:	dc2b      	bgt.n	8003a80 <_printf_common+0xa0>
 8003a28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	3b00      	subs	r3, #0
 8003a30:	bf18      	it	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	0692      	lsls	r2, r2, #26
 8003a36:	d430      	bmi.n	8003a9a <_printf_common+0xba>
 8003a38:	4641      	mov	r1, r8
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a40:	47c8      	blx	r9
 8003a42:	3001      	adds	r0, #1
 8003a44:	d023      	beq.n	8003a8e <_printf_common+0xae>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	6922      	ldr	r2, [r4, #16]
 8003a4a:	f003 0306 	and.w	r3, r3, #6
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	bf14      	ite	ne
 8003a52:	2500      	movne	r5, #0
 8003a54:	6833      	ldreq	r3, [r6, #0]
 8003a56:	f04f 0600 	mov.w	r6, #0
 8003a5a:	bf08      	it	eq
 8003a5c:	68e5      	ldreq	r5, [r4, #12]
 8003a5e:	f104 041a 	add.w	r4, r4, #26
 8003a62:	bf08      	it	eq
 8003a64:	1aed      	subeq	r5, r5, r3
 8003a66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a6a:	bf08      	it	eq
 8003a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a70:	4293      	cmp	r3, r2
 8003a72:	bfc4      	itt	gt
 8003a74:	1a9b      	subgt	r3, r3, r2
 8003a76:	18ed      	addgt	r5, r5, r3
 8003a78:	42b5      	cmp	r5, r6
 8003a7a:	d11a      	bne.n	8003ab2 <_printf_common+0xd2>
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	e008      	b.n	8003a92 <_printf_common+0xb2>
 8003a80:	2301      	movs	r3, #1
 8003a82:	4652      	mov	r2, sl
 8003a84:	4641      	mov	r1, r8
 8003a86:	4638      	mov	r0, r7
 8003a88:	47c8      	blx	r9
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d103      	bne.n	8003a96 <_printf_common+0xb6>
 8003a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a96:	3501      	adds	r5, #1
 8003a98:	e7c1      	b.n	8003a1e <_printf_common+0x3e>
 8003a9a:	2030      	movs	r0, #48	@ 0x30
 8003a9c:	18e1      	adds	r1, r4, r3
 8003a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003aa8:	4422      	add	r2, r4
 8003aaa:	3302      	adds	r3, #2
 8003aac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ab0:	e7c2      	b.n	8003a38 <_printf_common+0x58>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	4638      	mov	r0, r7
 8003aba:	47c8      	blx	r9
 8003abc:	3001      	adds	r0, #1
 8003abe:	d0e6      	beq.n	8003a8e <_printf_common+0xae>
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	e7d9      	b.n	8003a78 <_printf_common+0x98>

08003ac4 <_printf_i>:
 8003ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac8:	7e0f      	ldrb	r7, [r1, #24]
 8003aca:	4691      	mov	r9, r2
 8003acc:	2f78      	cmp	r7, #120	@ 0x78
 8003ace:	4680      	mov	r8, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	469a      	mov	sl, r3
 8003ad4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ada:	d807      	bhi.n	8003aec <_printf_i+0x28>
 8003adc:	2f62      	cmp	r7, #98	@ 0x62
 8003ade:	d80a      	bhi.n	8003af6 <_printf_i+0x32>
 8003ae0:	2f00      	cmp	r7, #0
 8003ae2:	f000 80d3 	beq.w	8003c8c <_printf_i+0x1c8>
 8003ae6:	2f58      	cmp	r7, #88	@ 0x58
 8003ae8:	f000 80ba 	beq.w	8003c60 <_printf_i+0x19c>
 8003aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003af4:	e03a      	b.n	8003b6c <_printf_i+0xa8>
 8003af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003afa:	2b15      	cmp	r3, #21
 8003afc:	d8f6      	bhi.n	8003aec <_printf_i+0x28>
 8003afe:	a101      	add	r1, pc, #4	@ (adr r1, 8003b04 <_printf_i+0x40>)
 8003b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b04:	08003b5d 	.word	0x08003b5d
 8003b08:	08003b71 	.word	0x08003b71
 8003b0c:	08003aed 	.word	0x08003aed
 8003b10:	08003aed 	.word	0x08003aed
 8003b14:	08003aed 	.word	0x08003aed
 8003b18:	08003aed 	.word	0x08003aed
 8003b1c:	08003b71 	.word	0x08003b71
 8003b20:	08003aed 	.word	0x08003aed
 8003b24:	08003aed 	.word	0x08003aed
 8003b28:	08003aed 	.word	0x08003aed
 8003b2c:	08003aed 	.word	0x08003aed
 8003b30:	08003c73 	.word	0x08003c73
 8003b34:	08003b9b 	.word	0x08003b9b
 8003b38:	08003c2d 	.word	0x08003c2d
 8003b3c:	08003aed 	.word	0x08003aed
 8003b40:	08003aed 	.word	0x08003aed
 8003b44:	08003c95 	.word	0x08003c95
 8003b48:	08003aed 	.word	0x08003aed
 8003b4c:	08003b9b 	.word	0x08003b9b
 8003b50:	08003aed 	.word	0x08003aed
 8003b54:	08003aed 	.word	0x08003aed
 8003b58:	08003c35 	.word	0x08003c35
 8003b5c:	6833      	ldr	r3, [r6, #0]
 8003b5e:	1d1a      	adds	r2, r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6032      	str	r2, [r6, #0]
 8003b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e09e      	b.n	8003cae <_printf_i+0x1ea>
 8003b70:	6833      	ldr	r3, [r6, #0]
 8003b72:	6820      	ldr	r0, [r4, #0]
 8003b74:	1d19      	adds	r1, r3, #4
 8003b76:	6031      	str	r1, [r6, #0]
 8003b78:	0606      	lsls	r6, r0, #24
 8003b7a:	d501      	bpl.n	8003b80 <_printf_i+0xbc>
 8003b7c:	681d      	ldr	r5, [r3, #0]
 8003b7e:	e003      	b.n	8003b88 <_printf_i+0xc4>
 8003b80:	0645      	lsls	r5, r0, #25
 8003b82:	d5fb      	bpl.n	8003b7c <_printf_i+0xb8>
 8003b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b88:	2d00      	cmp	r5, #0
 8003b8a:	da03      	bge.n	8003b94 <_printf_i+0xd0>
 8003b8c:	232d      	movs	r3, #45	@ 0x2d
 8003b8e:	426d      	negs	r5, r5
 8003b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b94:	230a      	movs	r3, #10
 8003b96:	4859      	ldr	r0, [pc, #356]	@ (8003cfc <_printf_i+0x238>)
 8003b98:	e011      	b.n	8003bbe <_printf_i+0xfa>
 8003b9a:	6821      	ldr	r1, [r4, #0]
 8003b9c:	6833      	ldr	r3, [r6, #0]
 8003b9e:	0608      	lsls	r0, r1, #24
 8003ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ba4:	d402      	bmi.n	8003bac <_printf_i+0xe8>
 8003ba6:	0649      	lsls	r1, r1, #25
 8003ba8:	bf48      	it	mi
 8003baa:	b2ad      	uxthmi	r5, r5
 8003bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bae:	6033      	str	r3, [r6, #0]
 8003bb0:	bf14      	ite	ne
 8003bb2:	230a      	movne	r3, #10
 8003bb4:	2308      	moveq	r3, #8
 8003bb6:	4851      	ldr	r0, [pc, #324]	@ (8003cfc <_printf_i+0x238>)
 8003bb8:	2100      	movs	r1, #0
 8003bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bbe:	6866      	ldr	r6, [r4, #4]
 8003bc0:	2e00      	cmp	r6, #0
 8003bc2:	bfa8      	it	ge
 8003bc4:	6821      	ldrge	r1, [r4, #0]
 8003bc6:	60a6      	str	r6, [r4, #8]
 8003bc8:	bfa4      	itt	ge
 8003bca:	f021 0104 	bicge.w	r1, r1, #4
 8003bce:	6021      	strge	r1, [r4, #0]
 8003bd0:	b90d      	cbnz	r5, 8003bd6 <_printf_i+0x112>
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	d04b      	beq.n	8003c6e <_printf_i+0x1aa>
 8003bd6:	4616      	mov	r6, r2
 8003bd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bdc:	fb03 5711 	mls	r7, r3, r1, r5
 8003be0:	5dc7      	ldrb	r7, [r0, r7]
 8003be2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003be6:	462f      	mov	r7, r5
 8003be8:	42bb      	cmp	r3, r7
 8003bea:	460d      	mov	r5, r1
 8003bec:	d9f4      	bls.n	8003bd8 <_printf_i+0x114>
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d10b      	bne.n	8003c0a <_printf_i+0x146>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	07df      	lsls	r7, r3, #31
 8003bf6:	d508      	bpl.n	8003c0a <_printf_i+0x146>
 8003bf8:	6923      	ldr	r3, [r4, #16]
 8003bfa:	6861      	ldr	r1, [r4, #4]
 8003bfc:	4299      	cmp	r1, r3
 8003bfe:	bfde      	ittt	le
 8003c00:	2330      	movle	r3, #48	@ 0x30
 8003c02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c0a:	1b92      	subs	r2, r2, r6
 8003c0c:	6122      	str	r2, [r4, #16]
 8003c0e:	464b      	mov	r3, r9
 8003c10:	4621      	mov	r1, r4
 8003c12:	4640      	mov	r0, r8
 8003c14:	f8cd a000 	str.w	sl, [sp]
 8003c18:	aa03      	add	r2, sp, #12
 8003c1a:	f7ff fee1 	bl	80039e0 <_printf_common>
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d14a      	bne.n	8003cb8 <_printf_i+0x1f4>
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	b004      	add	sp, #16
 8003c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f043 0320 	orr.w	r3, r3, #32
 8003c32:	6023      	str	r3, [r4, #0]
 8003c34:	2778      	movs	r7, #120	@ 0x78
 8003c36:	4832      	ldr	r0, [pc, #200]	@ (8003d00 <_printf_i+0x23c>)
 8003c38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	6831      	ldr	r1, [r6, #0]
 8003c40:	061f      	lsls	r7, r3, #24
 8003c42:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c46:	d402      	bmi.n	8003c4e <_printf_i+0x18a>
 8003c48:	065f      	lsls	r7, r3, #25
 8003c4a:	bf48      	it	mi
 8003c4c:	b2ad      	uxthmi	r5, r5
 8003c4e:	6031      	str	r1, [r6, #0]
 8003c50:	07d9      	lsls	r1, r3, #31
 8003c52:	bf44      	itt	mi
 8003c54:	f043 0320 	orrmi.w	r3, r3, #32
 8003c58:	6023      	strmi	r3, [r4, #0]
 8003c5a:	b11d      	cbz	r5, 8003c64 <_printf_i+0x1a0>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	e7ab      	b.n	8003bb8 <_printf_i+0xf4>
 8003c60:	4826      	ldr	r0, [pc, #152]	@ (8003cfc <_printf_i+0x238>)
 8003c62:	e7e9      	b.n	8003c38 <_printf_i+0x174>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	f023 0320 	bic.w	r3, r3, #32
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	e7f6      	b.n	8003c5c <_printf_i+0x198>
 8003c6e:	4616      	mov	r6, r2
 8003c70:	e7bd      	b.n	8003bee <_printf_i+0x12a>
 8003c72:	6833      	ldr	r3, [r6, #0]
 8003c74:	6825      	ldr	r5, [r4, #0]
 8003c76:	1d18      	adds	r0, r3, #4
 8003c78:	6961      	ldr	r1, [r4, #20]
 8003c7a:	6030      	str	r0, [r6, #0]
 8003c7c:	062e      	lsls	r6, r5, #24
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	d501      	bpl.n	8003c86 <_printf_i+0x1c2>
 8003c82:	6019      	str	r1, [r3, #0]
 8003c84:	e002      	b.n	8003c8c <_printf_i+0x1c8>
 8003c86:	0668      	lsls	r0, r5, #25
 8003c88:	d5fb      	bpl.n	8003c82 <_printf_i+0x1be>
 8003c8a:	8019      	strh	r1, [r3, #0]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4616      	mov	r6, r2
 8003c90:	6123      	str	r3, [r4, #16]
 8003c92:	e7bc      	b.n	8003c0e <_printf_i+0x14a>
 8003c94:	6833      	ldr	r3, [r6, #0]
 8003c96:	2100      	movs	r1, #0
 8003c98:	1d1a      	adds	r2, r3, #4
 8003c9a:	6032      	str	r2, [r6, #0]
 8003c9c:	681e      	ldr	r6, [r3, #0]
 8003c9e:	6862      	ldr	r2, [r4, #4]
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f000 f859 	bl	8003d58 <memchr>
 8003ca6:	b108      	cbz	r0, 8003cac <_printf_i+0x1e8>
 8003ca8:	1b80      	subs	r0, r0, r6
 8003caa:	6060      	str	r0, [r4, #4]
 8003cac:	6863      	ldr	r3, [r4, #4]
 8003cae:	6123      	str	r3, [r4, #16]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cb6:	e7aa      	b.n	8003c0e <_printf_i+0x14a>
 8003cb8:	4632      	mov	r2, r6
 8003cba:	4649      	mov	r1, r9
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	47d0      	blx	sl
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d0ad      	beq.n	8003c22 <_printf_i+0x15e>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	079b      	lsls	r3, r3, #30
 8003cca:	d413      	bmi.n	8003cf4 <_printf_i+0x230>
 8003ccc:	68e0      	ldr	r0, [r4, #12]
 8003cce:	9b03      	ldr	r3, [sp, #12]
 8003cd0:	4298      	cmp	r0, r3
 8003cd2:	bfb8      	it	lt
 8003cd4:	4618      	movlt	r0, r3
 8003cd6:	e7a6      	b.n	8003c26 <_printf_i+0x162>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4632      	mov	r2, r6
 8003cdc:	4649      	mov	r1, r9
 8003cde:	4640      	mov	r0, r8
 8003ce0:	47d0      	blx	sl
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d09d      	beq.n	8003c22 <_printf_i+0x15e>
 8003ce6:	3501      	adds	r5, #1
 8003ce8:	68e3      	ldr	r3, [r4, #12]
 8003cea:	9903      	ldr	r1, [sp, #12]
 8003cec:	1a5b      	subs	r3, r3, r1
 8003cee:	42ab      	cmp	r3, r5
 8003cf0:	dcf2      	bgt.n	8003cd8 <_printf_i+0x214>
 8003cf2:	e7eb      	b.n	8003ccc <_printf_i+0x208>
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	f104 0619 	add.w	r6, r4, #25
 8003cfa:	e7f5      	b.n	8003ce8 <_printf_i+0x224>
 8003cfc:	08004c36 	.word	0x08004c36
 8003d00:	08004c47 	.word	0x08004c47

08003d04 <memmove>:
 8003d04:	4288      	cmp	r0, r1
 8003d06:	b510      	push	{r4, lr}
 8003d08:	eb01 0402 	add.w	r4, r1, r2
 8003d0c:	d902      	bls.n	8003d14 <memmove+0x10>
 8003d0e:	4284      	cmp	r4, r0
 8003d10:	4623      	mov	r3, r4
 8003d12:	d807      	bhi.n	8003d24 <memmove+0x20>
 8003d14:	1e43      	subs	r3, r0, #1
 8003d16:	42a1      	cmp	r1, r4
 8003d18:	d008      	beq.n	8003d2c <memmove+0x28>
 8003d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d22:	e7f8      	b.n	8003d16 <memmove+0x12>
 8003d24:	4601      	mov	r1, r0
 8003d26:	4402      	add	r2, r0
 8003d28:	428a      	cmp	r2, r1
 8003d2a:	d100      	bne.n	8003d2e <memmove+0x2a>
 8003d2c:	bd10      	pop	{r4, pc}
 8003d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d36:	e7f7      	b.n	8003d28 <memmove+0x24>

08003d38 <_sbrk_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4d05      	ldr	r5, [pc, #20]	@ (8003d54 <_sbrk_r+0x1c>)
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	f7fc fcfc 	bl	8000740 <_sbrk>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_sbrk_r+0x1a>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_sbrk_r+0x1a>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	2000061c 	.word	0x2000061c

08003d58 <memchr>:
 8003d58:	4603      	mov	r3, r0
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	b2c9      	uxtb	r1, r1
 8003d5e:	4402      	add	r2, r0
 8003d60:	4293      	cmp	r3, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	d101      	bne.n	8003d6a <memchr+0x12>
 8003d66:	2000      	movs	r0, #0
 8003d68:	e003      	b.n	8003d72 <memchr+0x1a>
 8003d6a:	7804      	ldrb	r4, [r0, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	428c      	cmp	r4, r1
 8003d70:	d1f6      	bne.n	8003d60 <memchr+0x8>
 8003d72:	bd10      	pop	{r4, pc}

08003d74 <memcpy>:
 8003d74:	440a      	add	r2, r1
 8003d76:	4291      	cmp	r1, r2
 8003d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d7c:	d100      	bne.n	8003d80 <memcpy+0xc>
 8003d7e:	4770      	bx	lr
 8003d80:	b510      	push	{r4, lr}
 8003d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d86:	4291      	cmp	r1, r2
 8003d88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d8c:	d1f9      	bne.n	8003d82 <memcpy+0xe>
 8003d8e:	bd10      	pop	{r4, pc}

08003d90 <_realloc_r>:
 8003d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d94:	4680      	mov	r8, r0
 8003d96:	4615      	mov	r5, r2
 8003d98:	460c      	mov	r4, r1
 8003d9a:	b921      	cbnz	r1, 8003da6 <_realloc_r+0x16>
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003da2:	f7ff bc39 	b.w	8003618 <_malloc_r>
 8003da6:	b92a      	cbnz	r2, 8003db4 <_realloc_r+0x24>
 8003da8:	f7ff fbcc 	bl	8003544 <_free_r>
 8003dac:	2400      	movs	r4, #0
 8003dae:	4620      	mov	r0, r4
 8003db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003db4:	f000 f81a 	bl	8003dec <_malloc_usable_size_r>
 8003db8:	4285      	cmp	r5, r0
 8003dba:	4606      	mov	r6, r0
 8003dbc:	d802      	bhi.n	8003dc4 <_realloc_r+0x34>
 8003dbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003dc2:	d8f4      	bhi.n	8003dae <_realloc_r+0x1e>
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	f7ff fc26 	bl	8003618 <_malloc_r>
 8003dcc:	4607      	mov	r7, r0
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d0ec      	beq.n	8003dac <_realloc_r+0x1c>
 8003dd2:	42b5      	cmp	r5, r6
 8003dd4:	462a      	mov	r2, r5
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	bf28      	it	cs
 8003dda:	4632      	movcs	r2, r6
 8003ddc:	f7ff ffca 	bl	8003d74 <memcpy>
 8003de0:	4621      	mov	r1, r4
 8003de2:	4640      	mov	r0, r8
 8003de4:	f7ff fbae 	bl	8003544 <_free_r>
 8003de8:	463c      	mov	r4, r7
 8003dea:	e7e0      	b.n	8003dae <_realloc_r+0x1e>

08003dec <_malloc_usable_size_r>:
 8003dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df0:	1f18      	subs	r0, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bfbc      	itt	lt
 8003df6:	580b      	ldrlt	r3, [r1, r0]
 8003df8:	18c0      	addlt	r0, r0, r3
 8003dfa:	4770      	bx	lr

08003dfc <_init>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr

08003e08 <_fini>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr
