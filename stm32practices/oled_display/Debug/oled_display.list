
oled_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000251c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002128  08002628  08002628  00003628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  0000601c  2**0
                  CONTENTS
  4 .ARM          00000000  08004750  08004750  0000601c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004750  08004750  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004754  08004754  00005754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004758  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000001c  08004774  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08004774  00006498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c63  00000000  00000000  00006045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168f  00000000  00000000  0000cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005db  00000000  00000000  0000eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cae  00000000  00000000  0000f0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0b2  00000000  00000000  00025d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d46  00000000  00000000  0002fe1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1b61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee8  00000000  00000000  000b1ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b3a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002610 	.word	0x08002610

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002610 	.word	0x08002610

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f9e9 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f88d 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8f5 	bl	8000348 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8c5 	bl	80002ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000162:	f001 ff0b 	bl	8001f7c <SSD1306_Init>
    char snum[5];

    SSD1306_GotoXY (0,0);
 8000166:	2100      	movs	r1, #0
 8000168:	2000      	movs	r0, #0
 800016a:	f002 f86f 	bl	800224c <SSD1306_GotoXY>
    SSD1306_Puts ("NIZAR", &Font_11x18, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	493a      	ldr	r1, [pc, #232]	@ (800025c <main+0x110>)
 8000172:	483b      	ldr	r0, [pc, #236]	@ (8000260 <main+0x114>)
 8000174:	f002 f8fe 	bl	8002374 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000178:	211e      	movs	r1, #30
 800017a:	2000      	movs	r0, #0
 800017c:	f002 f866 	bl	800224c <SSD1306_GotoXY>
    SSD1306_Puts ("MOHIDEEN", &Font_11x18, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	4936      	ldr	r1, [pc, #216]	@ (800025c <main+0x110>)
 8000184:	4837      	ldr	r0, [pc, #220]	@ (8000264 <main+0x118>)
 8000186:	f002 f8f5 	bl	8002374 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800018a:	f001 ffbb 	bl	8002104 <SSD1306_UpdateScreen>
    HAL_Delay (1000);
 800018e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000192:	f000 fa2b 	bl	80005ec <HAL_Delay>

    SSD1306_ScrollRight(0,7);
 8000196:	2107      	movs	r1, #7
 8000198:	2000      	movs	r0, #0
 800019a:	f001 fe79 	bl	8001e90 <SSD1306_ScrollRight>
    HAL_Delay(3000);
 800019e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001a2:	f000 fa23 	bl	80005ec <HAL_Delay>
    SSD1306_ScrollLeft(0,7);
 80001a6:	2107      	movs	r1, #7
 80001a8:	2000      	movs	r0, #0
 80001aa:	f001 fea7 	bl	8001efc <SSD1306_ScrollLeft>
    HAL_Delay(3000);
 80001ae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001b2:	f000 fa1b 	bl	80005ec <HAL_Delay>
    SSD1306_Stopscroll();
 80001b6:	f001 fed7 	bl	8001f68 <SSD1306_Stopscroll>
    SSD1306_Clear();
 80001ba:	f002 f900 	bl	80023be <SSD1306_Clear>
    SSD1306_GotoXY (35,0);
 80001be:	2100      	movs	r1, #0
 80001c0:	2023      	movs	r0, #35	@ 0x23
 80001c2:	f002 f843 	bl	800224c <SSD1306_GotoXY>
    SSD1306_Puts ("SCORE", &Font_11x18, 1);
 80001c6:	2201      	movs	r2, #1
 80001c8:	4924      	ldr	r1, [pc, #144]	@ (800025c <main+0x110>)
 80001ca:	4827      	ldr	r0, [pc, #156]	@ (8000268 <main+0x11c>)
 80001cc:	f002 f8d2 	bl	8002374 <SSD1306_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for ( int x = 1; x <= 10000 ; x++ )
 80001d0:	2301      	movs	r3, #1
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	e03c      	b.n	8000250 <main+0x104>
	  	{
	  		itoa(x, snum, 10);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	220a      	movs	r2, #10
 80001da:	4619      	mov	r1, r3
 80001dc:	68f8      	ldr	r0, [r7, #12]
 80001de:	f002 f9a7 	bl	8002530 <itoa>
	  		SSD1306_GotoXY (0, 30);
 80001e2:	211e      	movs	r1, #30
 80001e4:	2000      	movs	r0, #0
 80001e6:	f002 f831 	bl	800224c <SSD1306_GotoXY>
	  		SSD1306_Puts ("             ", &Font_16x26, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	491f      	ldr	r1, [pc, #124]	@ (800026c <main+0x120>)
 80001ee:	4820      	ldr	r0, [pc, #128]	@ (8000270 <main+0x124>)
 80001f0:	f002 f8c0 	bl	8002374 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 80001f4:	f001 ff86 	bl	8002104 <SSD1306_UpdateScreen>
	  		if(x < 10) {
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	2b09      	cmp	r3, #9
 80001fc:	dc04      	bgt.n	8000208 <main+0xbc>
	  			SSD1306_GotoXY (53, 30);  // 1 DIGIT
 80001fe:	211e      	movs	r1, #30
 8000200:	2035      	movs	r0, #53	@ 0x35
 8000202:	f002 f823 	bl	800224c <SSD1306_GotoXY>
 8000206:	e014      	b.n	8000232 <main+0xe6>
	  		}
	  		else if (x < 100 ) {
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	2b63      	cmp	r3, #99	@ 0x63
 800020c:	dc04      	bgt.n	8000218 <main+0xcc>
	  			SSD1306_GotoXY (45, 30);  // 2 DIGITS
 800020e:	211e      	movs	r1, #30
 8000210:	202d      	movs	r0, #45	@ 0x2d
 8000212:	f002 f81b 	bl	800224c <SSD1306_GotoXY>
 8000216:	e00c      	b.n	8000232 <main+0xe6>
	  		}
	  		else if (x < 1000 ) {
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800021e:	da04      	bge.n	800022a <main+0xde>
	  			SSD1306_GotoXY (37, 30);  // 3 DIGITS
 8000220:	211e      	movs	r1, #30
 8000222:	2025      	movs	r0, #37	@ 0x25
 8000224:	f002 f812 	bl	800224c <SSD1306_GotoXY>
 8000228:	e003      	b.n	8000232 <main+0xe6>
	  		}
	  		else {
	  			SSD1306_GotoXY (30, 30);  // 4 DIGIS
 800022a:	211e      	movs	r1, #30
 800022c:	201e      	movs	r0, #30
 800022e:	f002 f80d 	bl	800224c <SSD1306_GotoXY>
	  		}
	  		SSD1306_Puts (snum, &Font_16x26, 1);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2201      	movs	r2, #1
 8000236:	490d      	ldr	r1, [pc, #52]	@ (800026c <main+0x120>)
 8000238:	4618      	mov	r0, r3
 800023a:	f002 f89b 	bl	8002374 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 800023e:	f001 ff61 	bl	8002104 <SSD1306_UpdateScreen>
	  		HAL_Delay (500);
 8000242:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000246:	f000 f9d1 	bl	80005ec <HAL_Delay>
	  for ( int x = 1; x <= 10000 ; x++ )
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	3301      	adds	r3, #1
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000256:	4293      	cmp	r3, r2
 8000258:	ddbd      	ble.n	80001d6 <main+0x8a>
 800025a:	e7b9      	b.n	80001d0 <main+0x84>
 800025c:	2000000c 	.word	0x2000000c
 8000260:	08002628 	.word	0x08002628
 8000264:	08002630 	.word	0x08002630
 8000268:	0800263c 	.word	0x0800263c
 800026c:	20000014 	.word	0x20000014
 8000270:	08002644 	.word	0x08002644

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	@ 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	@ 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 f998 	bl	80025b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a2:	2300      	movs	r3, #0
 80002a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 f9f4 	bl	8001698 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002b6:	f000 f869 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fc62 	bl	8001b9c <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002de:	f000 f855 	bl	800038c <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3740      	adds	r7, #64	@ 0x40
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_I2C1_Init+0x50>)
 80002f2:	4a13      	ldr	r2, [pc, #76]	@ (8000340 <MX_I2C1_Init+0x54>)
 80002f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_I2C1_Init+0x50>)
 80002f8:	4a12      	ldr	r2, [pc, #72]	@ (8000344 <MX_I2C1_Init+0x58>)
 80002fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_I2C1_Init+0x50>)
 800030a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800030e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000310:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <MX_I2C1_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000316:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_I2C1_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031c:	4b07      	ldr	r3, [pc, #28]	@ (800033c <MX_I2C1_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000322:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_I2C1_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	@ (800033c <MX_I2C1_Init+0x50>)
 800032a:	f000 fbeb 	bl	8000b04 <HAL_I2C_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000334:	f000 f82a 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000038 	.word	0x20000038
 8000340:	40005400 	.word	0x40005400
 8000344:	00061a80 	.word	0x00061a80

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_GPIO_Init+0x40>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <MX_GPIO_Init+0x40>)
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_GPIO_Init+0x40>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0304 	and.w	r3, r3, #4
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_GPIO_Init+0x40>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a07      	ldr	r2, [pc, #28]	@ (8000388 <MX_GPIO_Init+0x40>)
 800036c:	f043 0308 	orr.w	r3, r3, #8
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <MX_GPIO_Init+0x40>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0308 	and.w	r3, r3, #8
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <Error_Handler+0x8>

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4b15      	ldr	r3, [pc, #84]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a14      	ldr	r2, [pc, #80]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a0e      	ldr	r2, [pc, #56]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c0:	61d3      	str	r3, [r2, #28]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <HAL_MspInit+0x5c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ce:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <HAL_MspInit+0x60>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	4a04      	ldr	r2, [pc, #16]	@ (80003f8 <HAL_MspInit+0x60>)
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010000 	.word	0x40010000

080003fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a15      	ldr	r2, [pc, #84]	@ (800046c <HAL_I2C_MspInit+0x70>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d123      	bne.n	8000464 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <HAL_I2C_MspInit+0x74>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a13      	ldr	r2, [pc, #76]	@ (8000470 <HAL_I2C_MspInit+0x74>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <HAL_I2C_MspInit+0x74>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0308 	and.w	r3, r3, #8
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000434:	23c0      	movs	r3, #192	@ 0xc0
 8000436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000438:	2312      	movs	r3, #18
 800043a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043c:	2303      	movs	r3, #3
 800043e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	480b      	ldr	r0, [pc, #44]	@ (8000474 <HAL_I2C_MspInit+0x78>)
 8000448:	f000 f9d8 	bl	80007fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800044c:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <HAL_I2C_MspInit+0x74>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <HAL_I2C_MspInit+0x74>)
 8000452:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000456:	61d3      	str	r3, [r2, #28]
 8000458:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <HAL_I2C_MspInit+0x74>)
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40005400 	.word	0x40005400
 8000470:	40021000 	.word	0x40021000
 8000474:	40010c00 	.word	0x40010c00

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <NMI_Handler+0x4>

08000480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <MemManage_Handler+0x4>

08000490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <UsageFault_Handler+0x4>

080004a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f874 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004dc:	f7ff fff8 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480b      	ldr	r0, [pc, #44]	@ (8000510 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004e2:	490c      	ldr	r1, [pc, #48]	@ (8000514 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a09      	ldr	r2, [pc, #36]	@ (800051c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004f8:	4c09      	ldr	r4, [pc, #36]	@ (8000520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000506:	f002 f85f 	bl	80025c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff fe1f 	bl	800014c <main>
  bx lr
 800050e:	4770      	bx	lr
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000518:	08004758 	.word	0x08004758
  ldr r2, =_sbss
 800051c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000520:	20000498 	.word	0x20000498

08000524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC1_2_IRQHandler>
	...

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <HAL_Init+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <HAL_Init+0x28>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f92b 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	200f      	movs	r0, #15
 8000540:	f000 f808 	bl	8000554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f7ff ff28 	bl	8000398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40022000 	.word	0x40022000

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f935 	bl	80007e2 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f90b 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000004 	.word	0x20000004

080005b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <HAL_IncTick+0x1c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <HAL_IncTick+0x20>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a03      	ldr	r2, [pc, #12]	@ (80005d4 <HAL_IncTick+0x20>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	20000008 	.word	0x20000008
 80005d4:	2000008c 	.word	0x2000008c

080005d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b02      	ldr	r3, [pc, #8]	@ (80005e8 <HAL_GetTick+0x10>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	2000008c 	.word	0x2000008c

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff fff0 	bl	80005d8 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000606:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <HAL_Delay+0x44>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffe0 	bl	80005d8 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000008 	.word	0x20000008

08000634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800065c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000680:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <__NVIC_GetPriorityGrouping+0x18>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	f003 0307 	and.w	r3, r3, #7
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	@ (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	@ (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	@ 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	@ 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff90 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff49 	bl	8000634 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff5e 	bl	800067c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffb0 	bl	8000750 <SysTick_Config>
 80007f0:	4603      	mov	r3, r0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b08b      	sub	sp, #44	@ 0x2c
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080e:	e169      	b.n	8000ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000810:	2201      	movs	r2, #1
 8000812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	69fa      	ldr	r2, [r7, #28]
 8000820:	4013      	ands	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	429a      	cmp	r2, r3
 800082a:	f040 8158 	bne.w	8000ade <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4a9a      	ldr	r2, [pc, #616]	@ (8000a9c <HAL_GPIO_Init+0x2a0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d05e      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000838:	4a98      	ldr	r2, [pc, #608]	@ (8000a9c <HAL_GPIO_Init+0x2a0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d875      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800083e:	4a98      	ldr	r2, [pc, #608]	@ (8000aa0 <HAL_GPIO_Init+0x2a4>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d058      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000844:	4a96      	ldr	r2, [pc, #600]	@ (8000aa0 <HAL_GPIO_Init+0x2a4>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d86f      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800084a:	4a96      	ldr	r2, [pc, #600]	@ (8000aa4 <HAL_GPIO_Init+0x2a8>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d052      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000850:	4a94      	ldr	r2, [pc, #592]	@ (8000aa4 <HAL_GPIO_Init+0x2a8>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d869      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000856:	4a94      	ldr	r2, [pc, #592]	@ (8000aa8 <HAL_GPIO_Init+0x2ac>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d04c      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 800085c:	4a92      	ldr	r2, [pc, #584]	@ (8000aa8 <HAL_GPIO_Init+0x2ac>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d863      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000862:	4a92      	ldr	r2, [pc, #584]	@ (8000aac <HAL_GPIO_Init+0x2b0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d046      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000868:	4a90      	ldr	r2, [pc, #576]	@ (8000aac <HAL_GPIO_Init+0x2b0>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d85d      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800086e:	2b12      	cmp	r3, #18
 8000870:	d82a      	bhi.n	80008c8 <HAL_GPIO_Init+0xcc>
 8000872:	2b12      	cmp	r3, #18
 8000874:	d859      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000876:	a201      	add	r2, pc, #4	@ (adr r2, 800087c <HAL_GPIO_Init+0x80>)
 8000878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087c:	080008f7 	.word	0x080008f7
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008e3 	.word	0x080008e3
 8000888:	08000925 	.word	0x08000925
 800088c:	0800092b 	.word	0x0800092b
 8000890:	0800092b 	.word	0x0800092b
 8000894:	0800092b 	.word	0x0800092b
 8000898:	0800092b 	.word	0x0800092b
 800089c:	0800092b 	.word	0x0800092b
 80008a0:	0800092b 	.word	0x0800092b
 80008a4:	0800092b 	.word	0x0800092b
 80008a8:	0800092b 	.word	0x0800092b
 80008ac:	0800092b 	.word	0x0800092b
 80008b0:	0800092b 	.word	0x0800092b
 80008b4:	0800092b 	.word	0x0800092b
 80008b8:	0800092b 	.word	0x0800092b
 80008bc:	0800092b 	.word	0x0800092b
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008ed 	.word	0x080008ed
 80008c8:	4a79      	ldr	r2, [pc, #484]	@ (8000ab0 <HAL_GPIO_Init+0x2b4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d013      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ce:	e02c      	b.n	800092a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	623b      	str	r3, [r7, #32]
          break;
 80008d6:	e029      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	3304      	adds	r3, #4
 80008de:	623b      	str	r3, [r7, #32]
          break;
 80008e0:	e024      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	3308      	adds	r3, #8
 80008e8:	623b      	str	r3, [r7, #32]
          break;
 80008ea:	e01f      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	330c      	adds	r3, #12
 80008f2:	623b      	str	r3, [r7, #32]
          break;
 80008f4:	e01a      	b.n	800092c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d102      	bne.n	8000904 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008fe:	2304      	movs	r3, #4
 8000900:	623b      	str	r3, [r7, #32]
          break;
 8000902:	e013      	b.n	800092c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d105      	bne.n	8000918 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800090c:	2308      	movs	r3, #8
 800090e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	611a      	str	r2, [r3, #16]
          break;
 8000916:	e009      	b.n	800092c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000918:	2308      	movs	r3, #8
 800091a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	615a      	str	r2, [r3, #20]
          break;
 8000922:	e003      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e000      	b.n	800092c <HAL_GPIO_Init+0x130>
          break;
 800092a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	2bff      	cmp	r3, #255	@ 0xff
 8000930:	d801      	bhi.n	8000936 <HAL_GPIO_Init+0x13a>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	e001      	b.n	800093a <HAL_GPIO_Init+0x13e>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3304      	adds	r3, #4
 800093a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2bff      	cmp	r3, #255	@ 0xff
 8000940:	d802      	bhi.n	8000948 <HAL_GPIO_Init+0x14c>
 8000942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	e002      	b.n	800094e <HAL_GPIO_Init+0x152>
 8000948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094a:	3b08      	subs	r3, #8
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	210f      	movs	r1, #15
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	401a      	ands	r2, r3
 8000960:	6a39      	ldr	r1, [r7, #32]
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	fa01 f303 	lsl.w	r3, r1, r3
 8000968:	431a      	orrs	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000976:	2b00      	cmp	r3, #0
 8000978:	f000 80b1 	beq.w	8000ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800097c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab4 <HAL_GPIO_Init+0x2b8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a4c      	ldr	r2, [pc, #304]	@ (8000ab4 <HAL_GPIO_Init+0x2b8>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab4 <HAL_GPIO_Init+0x2b8>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000994:	4a48      	ldr	r2, [pc, #288]	@ (8000ab8 <HAL_GPIO_Init+0x2bc>)
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3302      	adds	r3, #2
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	220f      	movs	r2, #15
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a40      	ldr	r2, [pc, #256]	@ (8000abc <HAL_GPIO_Init+0x2c0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d013      	beq.n	80009e8 <HAL_GPIO_Init+0x1ec>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ac0 <HAL_GPIO_Init+0x2c4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d00d      	beq.n	80009e4 <HAL_GPIO_Init+0x1e8>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a3e      	ldr	r2, [pc, #248]	@ (8000ac4 <HAL_GPIO_Init+0x2c8>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d007      	beq.n	80009e0 <HAL_GPIO_Init+0x1e4>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ac8 <HAL_GPIO_Init+0x2cc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d101      	bne.n	80009dc <HAL_GPIO_Init+0x1e0>
 80009d8:	2303      	movs	r3, #3
 80009da:	e006      	b.n	80009ea <HAL_GPIO_Init+0x1ee>
 80009dc:	2304      	movs	r3, #4
 80009de:	e004      	b.n	80009ea <HAL_GPIO_Init+0x1ee>
 80009e0:	2302      	movs	r3, #2
 80009e2:	e002      	b.n	80009ea <HAL_GPIO_Init+0x1ee>
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <HAL_GPIO_Init+0x1ee>
 80009e8:	2300      	movs	r3, #0
 80009ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009ec:	f002 0203 	and.w	r2, r2, #3
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	4093      	lsls	r3, r2
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009fa:	492f      	ldr	r1, [pc, #188]	@ (8000ab8 <HAL_GPIO_Init+0x2bc>)
 80009fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3302      	adds	r3, #2
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d006      	beq.n	8000a22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a14:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	492c      	ldr	r1, [pc, #176]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	608b      	str	r3, [r1, #8]
 8000a20:	e006      	b.n	8000a30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	4928      	ldr	r1, [pc, #160]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d006      	beq.n	8000a4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a3c:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	4922      	ldr	r1, [pc, #136]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60cb      	str	r3, [r1, #12]
 8000a48:	e006      	b.n	8000a58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a4a:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	491e      	ldr	r1, [pc, #120]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	4918      	ldr	r1, [pc, #96]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	604b      	str	r3, [r1, #4]
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	4914      	ldr	r1, [pc, #80]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d021      	beq.n	8000ad0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	490e      	ldr	r1, [pc, #56]	@ (8000acc <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	600b      	str	r3, [r1, #0]
 8000a98:	e021      	b.n	8000ade <HAL_GPIO_Init+0x2e2>
 8000a9a:	bf00      	nop
 8000a9c:	10320000 	.word	0x10320000
 8000aa0:	10310000 	.word	0x10310000
 8000aa4:	10220000 	.word	0x10220000
 8000aa8:	10210000 	.word	0x10210000
 8000aac:	10120000 	.word	0x10120000
 8000ab0:	10110000 	.word	0x10110000
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40011400 	.word	0x40011400
 8000acc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_GPIO_Init+0x304>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4909      	ldr	r1, [pc, #36]	@ (8000b00 <HAL_GPIO_Init+0x304>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	fa22 f303 	lsr.w	r3, r2, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f47f ae8e 	bne.w	8000810 <HAL_GPIO_Init+0x14>
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	372c      	adds	r7, #44	@ 0x2c
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40010400 	.word	0x40010400

08000b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e12b      	b.n	8000d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d106      	bne.n	8000b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fc66 	bl	80003fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2224      	movs	r2, #36	@ 0x24
 8000b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0201 	bic.w	r2, r2, #1
 8000b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b68:	f001 f960 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8000b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a81      	ldr	r2, [pc, #516]	@ (8000d78 <HAL_I2C_Init+0x274>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d807      	bhi.n	8000b88 <HAL_I2C_Init+0x84>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4a80      	ldr	r2, [pc, #512]	@ (8000d7c <HAL_I2C_Init+0x278>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	bf94      	ite	ls
 8000b80:	2301      	movls	r3, #1
 8000b82:	2300      	movhi	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	e006      	b.n	8000b96 <HAL_I2C_Init+0x92>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4a7d      	ldr	r2, [pc, #500]	@ (8000d80 <HAL_I2C_Init+0x27c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	bf94      	ite	ls
 8000b90:	2301      	movls	r3, #1
 8000b92:	2300      	movhi	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e0e7      	b.n	8000d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4a78      	ldr	r2, [pc, #480]	@ (8000d84 <HAL_I2C_Init+0x280>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8000d78 <HAL_I2C_Init+0x274>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d802      	bhi.n	8000bd8 <HAL_I2C_Init+0xd4>
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	e009      	b.n	8000bec <HAL_I2C_Init+0xe8>
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	4a69      	ldr	r2, [pc, #420]	@ (8000d88 <HAL_I2C_Init+0x284>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	099b      	lsrs	r3, r3, #6
 8000bea:	3301      	adds	r3, #1
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000bfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	495c      	ldr	r1, [pc, #368]	@ (8000d78 <HAL_I2C_Init+0x274>)
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d819      	bhi.n	8000c40 <HAL_I2C_Init+0x13c>
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	1e59      	subs	r1, r3, #1
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c1a:	1c59      	adds	r1, r3, #1
 8000c1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000c20:	400b      	ands	r3, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00a      	beq.n	8000c3c <HAL_I2C_Init+0x138>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	1e59      	subs	r1, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c34:	3301      	adds	r3, #1
 8000c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c3a:	e051      	b.n	8000ce0 <HAL_I2C_Init+0x1dc>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e04f      	b.n	8000ce0 <HAL_I2C_Init+0x1dc>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <HAL_I2C_Init+0x168>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	1e58      	subs	r0, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6859      	ldr	r1, [r3, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	440b      	add	r3, r1
 8000c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bf0c      	ite	eq
 8000c64:	2301      	moveq	r3, #1
 8000c66:	2300      	movne	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	e012      	b.n	8000c92 <HAL_I2C_Init+0x18e>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	1e58      	subs	r0, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6859      	ldr	r1, [r3, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	440b      	add	r3, r1
 8000c7a:	0099      	lsls	r1, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf0c      	ite	eq
 8000c8c:	2301      	moveq	r3, #1
 8000c8e:	2300      	movne	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_I2C_Init+0x196>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e022      	b.n	8000ce0 <HAL_I2C_Init+0x1dc>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10e      	bne.n	8000cc0 <HAL_I2C_Init+0x1bc>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	1e58      	subs	r0, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6859      	ldr	r1, [r3, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	440b      	add	r3, r1
 8000cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cbe:	e00f      	b.n	8000ce0 <HAL_I2C_Init+0x1dc>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	1e58      	subs	r0, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6859      	ldr	r1, [r3, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	0099      	lsls	r1, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	6809      	ldr	r1, [r1, #0]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000d0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6911      	ldr	r1, [r2, #16]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68d2      	ldr	r2, [r2, #12]
 8000d1a:	4311      	orrs	r1, r2
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	430b      	orrs	r3, r1
 8000d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0201 	orr.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2220      	movs	r2, #32
 8000d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	000186a0 	.word	0x000186a0
 8000d7c:	001e847f 	.word	0x001e847f
 8000d80:	003d08ff 	.word	0x003d08ff
 8000d84:	431bde83 	.word	0x431bde83
 8000d88:	10624dd3 	.word	0x10624dd3

08000d8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	461a      	mov	r2, r3
 8000d98:	460b      	mov	r3, r1
 8000d9a:	817b      	strh	r3, [r7, #10]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff fc1a 	bl	80005d8 <HAL_GetTick>
 8000da4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b20      	cmp	r3, #32
 8000db0:	f040 80e0 	bne.w	8000f74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2319      	movs	r3, #25
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4970      	ldr	r1, [pc, #448]	@ (8000f80 <HAL_I2C_Master_Transmit+0x1f4>)
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f000 fa92 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e0d3      	b.n	8000f76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d101      	bne.n	8000ddc <HAL_I2C_Master_Transmit+0x50>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e0cc      	b.n	8000f76 <HAL_I2C_Master_Transmit+0x1ea>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d007      	beq.n	8000e02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0201 	orr.w	r2, r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2221      	movs	r2, #33	@ 0x21
 8000e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	893a      	ldrh	r2, [r7, #8]
 8000e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4a50      	ldr	r2, [pc, #320]	@ (8000f84 <HAL_I2C_Master_Transmit+0x1f8>)
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e44:	8979      	ldrh	r1, [r7, #10]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	6a3a      	ldr	r2, [r7, #32]
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f000 f9ca 	bl	80011e4 <I2C_MasterRequestWrite>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e08d      	b.n	8000f76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e70:	e066      	b.n	8000f40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	6a39      	ldr	r1, [r7, #32]
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f000 fb50 	bl	800151c <I2C_WaitOnTXEFlagUntilTimeout>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00d      	beq.n	8000e9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d107      	bne.n	8000e9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e06b      	b.n	8000f76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d11b      	bne.n	8000f14 <HAL_I2C_Master_Transmit+0x188>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d017      	beq.n	8000f14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	6a39      	ldr	r1, [r7, #32]
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 fb47 	bl	80015ac <I2C_WaitOnBTFFlagUntilTimeout>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00d      	beq.n	8000f40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d107      	bne.n	8000f3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e01a      	b.n	8000f76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d194      	bne.n	8000e72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e000      	b.n	8000f76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f74:	2302      	movs	r3, #2
  }
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	00100002 	.word	0x00100002
 8000f84:	ffff0000 	.word	0xffff0000

08000f88 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	460b      	mov	r3, r1
 8000f96:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff fb1e 	bl	80005d8 <HAL_GetTick>
 8000f9c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b20      	cmp	r3, #32
 8000fac:	f040 8111 	bne.w	80011d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2319      	movs	r3, #25
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4988      	ldr	r1, [pc, #544]	@ (80011dc <HAL_I2C_IsDeviceReady+0x254>)
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f000 f994 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e104      	b.n	80011d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_I2C_IsDeviceReady+0x50>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e0fd      	b.n	80011d4 <HAL_I2C_IsDeviceReady+0x24c>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d007      	beq.n	8000ffe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800100c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2224      	movs	r2, #36	@ 0x24
 8001012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4a70      	ldr	r2, [pc, #448]	@ (80011e0 <HAL_I2C_IsDeviceReady+0x258>)
 8001020:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001030:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f952 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00d      	beq.n	8001066 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001058:	d103      	bne.n	8001062 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e0b6      	b.n	80011d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001066:	897b      	ldrh	r3, [r7, #10]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001074:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff faaf 	bl	80005d8 <HAL_GetTick>
 800107a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800109c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80010aa:	e025      	b.n	80010f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010ac:	f7ff fa94 	bl	80005d8 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d302      	bcc.n	80010c2 <HAL_I2C_IsDeviceReady+0x13a>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	22a0      	movs	r2, #160	@ 0xa0
 80010c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	bf0c      	ite	eq
 80010d8:	2301      	moveq	r3, #1
 80010da:	2300      	movne	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ee:	bf0c      	ite	eq
 80010f0:	2301      	moveq	r3, #1
 80010f2:	2300      	movne	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2ba0      	cmp	r3, #160	@ 0xa0
 8001102:	d005      	beq.n	8001110 <HAL_I2C_IsDeviceReady+0x188>
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_I2C_IsDeviceReady+0x188>
 800110a:	7dbb      	ldrb	r3, [r7, #22]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0cd      	beq.n	80010ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2220      	movs	r2, #32
 8001114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b02      	cmp	r3, #2
 8001124:	d129      	bne.n	800117a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001134:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2319      	movs	r3, #25
 8001152:	2201      	movs	r2, #1
 8001154:	4921      	ldr	r1, [pc, #132]	@ (80011dc <HAL_I2C_IsDeviceReady+0x254>)
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f000 f8c6 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e036      	b.n	80011d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2220      	movs	r2, #32
 800116a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e02c      	b.n	80011d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001188:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001192:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2319      	movs	r3, #25
 800119a:	2201      	movs	r2, #1
 800119c:	490f      	ldr	r1, [pc, #60]	@ (80011dc <HAL_I2C_IsDeviceReady+0x254>)
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f8a2 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e012      	b.n	80011d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f4ff af32 	bcc.w	8001022 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2220      	movs	r2, #32
 80011c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80011d2:	2302      	movs	r3, #2
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	00100002 	.word	0x00100002
 80011e0:	ffff0000 	.word	0xffff0000

080011e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	460b      	mov	r3, r1
 80011f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d006      	beq.n	800120e <I2C_MasterRequestWrite+0x2a>
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d003      	beq.n	800120e <I2C_MasterRequestWrite+0x2a>
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800120c:	d108      	bne.n	8001220 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e00b      	b.n	8001238 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001224:	2b12      	cmp	r3, #18
 8001226:	d107      	bne.n	8001238 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001236:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 f84f 	bl	80012e8 <I2C_WaitOnFlagUntilTimeout>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00d      	beq.n	800126c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800125e:	d103      	bne.n	8001268 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001266:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e035      	b.n	80012d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001274:	d108      	bne.n	8001288 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001276:	897b      	ldrh	r3, [r7, #10]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	e01b      	b.n	80012c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001288:	897b      	ldrh	r3, [r7, #10]
 800128a:	11db      	asrs	r3, r3, #7
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0306 	and.w	r3, r3, #6
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f063 030f 	orn	r3, r3, #15
 8001298:	b2da      	uxtb	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	490e      	ldr	r1, [pc, #56]	@ (80012e0 <I2C_MasterRequestWrite+0xfc>)
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f898 	bl	80013dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e010      	b.n	80012d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4907      	ldr	r1, [pc, #28]	@ (80012e4 <I2C_MasterRequestWrite+0x100>)
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f888 	bl	80013dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	00010008 	.word	0x00010008
 80012e4:	00010002 	.word	0x00010002

080012e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012f8:	e048      	b.n	800138c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d044      	beq.n	800138c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001302:	f7ff f969 	bl	80005d8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d302      	bcc.n	8001318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d139      	bne.n	800138c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	0c1b      	lsrs	r3, r3, #16
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10d      	bne.n	800133e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	43da      	mvns	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	4013      	ands	r3, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	bf0c      	ite	eq
 8001334:	2301      	moveq	r3, #1
 8001336:	2300      	movne	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	e00c      	b.n	8001358 <I2C_WaitOnFlagUntilTimeout+0x70>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	43da      	mvns	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4013      	ands	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	429a      	cmp	r2, r3
 800135c:	d116      	bne.n	800138c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2220      	movs	r2, #32
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f043 0220 	orr.w	r2, r3, #32
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e023      	b.n	80013d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d10d      	bne.n	80013b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	43da      	mvns	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	4013      	ands	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf0c      	ite	eq
 80013a8:	2301      	moveq	r3, #1
 80013aa:	2300      	movne	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	e00c      	b.n	80013cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	43da      	mvns	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4013      	ands	r3, r2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d093      	beq.n	80012fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013ea:	e071      	b.n	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013fa:	d123      	bne.n	8001444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800140a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2220      	movs	r2, #32
 8001420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f043 0204 	orr.w	r2, r3, #4
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e067      	b.n	8001514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144a:	d041      	beq.n	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800144c:	f7ff f8c4 	bl	80005d8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d302      	bcc.n	8001462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d136      	bne.n	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	0c1b      	lsrs	r3, r3, #16
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d10c      	bne.n	8001486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4013      	ands	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	e00b      	b.n	800149e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	43da      	mvns	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	4013      	ands	r3, r2
 8001492:	b29b      	uxth	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf14      	ite	ne
 8001498:	2301      	movne	r3, #1
 800149a:	2300      	moveq	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d016      	beq.n	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2220      	movs	r2, #32
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	f043 0220 	orr.w	r2, r3, #32
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e021      	b.n	8001514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10c      	bne.n	80014f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	43da      	mvns	r2, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	4013      	ands	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	e00b      	b.n	800150c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4013      	ands	r3, r2
 8001500:	b29b      	uxth	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	f47f af6d 	bne.w	80013ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001528:	e034      	b.n	8001594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f886 	bl	800163c <I2C_IsAcknowledgeFailed>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e034      	b.n	80015a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d028      	beq.n	8001594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001542:	f7ff f849 	bl	80005d8 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	429a      	cmp	r2, r3
 8001550:	d302      	bcc.n	8001558 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001562:	2b80      	cmp	r3, #128	@ 0x80
 8001564:	d016      	beq.n	8001594 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2220      	movs	r2, #32
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f043 0220 	orr.w	r2, r3, #32
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e007      	b.n	80015a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	2b80      	cmp	r3, #128	@ 0x80
 80015a0:	d1c3      	bne.n	800152a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015b8:	e034      	b.n	8001624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f83e 	bl	800163c <I2C_IsAcknowledgeFailed>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e034      	b.n	8001634 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d028      	beq.n	8001624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d2:	f7ff f801 	bl	80005d8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d302      	bcc.n	80015e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11d      	bne.n	8001624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d016      	beq.n	8001624 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	f043 0220 	orr.w	r2, r3, #32
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e007      	b.n	8001634 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b04      	cmp	r3, #4
 8001630:	d1c3      	bne.n	80015ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001652:	d11b      	bne.n	800168c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800165c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f043 0204 	orr.w	r2, r3, #4
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e272      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8087 	beq.w	80017c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b8:	4b92      	ldr	r3, [pc, #584]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d00c      	beq.n	80016de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d112      	bne.n	80016f6 <HAL_RCC_OscConfig+0x5e>
 80016d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016dc:	d10b      	bne.n	80016f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	4b89      	ldr	r3, [pc, #548]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d06c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x12c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d168      	bne.n	80017c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e24c      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x76>
 8001700:	4b80      	ldr	r3, [pc, #512]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a7f      	ldr	r2, [pc, #508]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e02e      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b7b      	ldr	r3, [pc, #492]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a7a      	ldr	r2, [pc, #488]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b78      	ldr	r3, [pc, #480]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a77      	ldr	r2, [pc, #476]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e01d      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0xbc>
 800173a:	4b72      	ldr	r3, [pc, #456]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a71      	ldr	r2, [pc, #452]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b6f      	ldr	r3, [pc, #444]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6e      	ldr	r2, [pc, #440]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 8001754:	4b6b      	ldr	r3, [pc, #428]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a6a      	ldr	r2, [pc, #424]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b68      	ldr	r3, [pc, #416]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a67      	ldr	r2, [pc, #412]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7fe ff30 	bl	80005d8 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7fe ff2c 	bl	80005d8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e200      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b5d      	ldr	r3, [pc, #372]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0xe4>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7fe ff1c 	bl	80005d8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7fe ff18 	bl	80005d8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	@ 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1ec      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x10c>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017de:	4b49      	ldr	r3, [pc, #292]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d11c      	bne.n	8001824 <HAL_RCC_OscConfig+0x18c>
 80017ea:	4b46      	ldr	r3, [pc, #280]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	4b43      	ldr	r3, [pc, #268]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x176>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e1c0      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b3d      	ldr	r3, [pc, #244]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4939      	ldr	r1, [pc, #228]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	e03a      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182c:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <HAL_RCC_OscConfig+0x270>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7fe fed1 	bl	80005d8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7fe fecd 	bl	80005d8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1a1      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4927      	ldr	r1, [pc, #156]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <HAL_RCC_OscConfig+0x270>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7fe feb0 	bl	80005d8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187c:	f7fe feac 	bl	80005d8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e180      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d03a      	beq.n	800191c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d019      	beq.n	80018e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_RCC_OscConfig+0x274>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7fe fe90 	bl	80005d8 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018bc:	f7fe fe8c 	bl	80005d8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e160      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 faba 	bl	8001e54 <RCC_Delay>
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_RCC_OscConfig+0x274>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7fe fe76 	bl	80005d8 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ee:	e00f      	b.n	8001910 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f0:	f7fe fe72 	bl	80005d8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d908      	bls.n	8001910 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e146      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	42420000 	.word	0x42420000
 800190c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b92      	ldr	r3, [pc, #584]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e9      	bne.n	80018f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a6 	beq.w	8001a76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10d      	bne.n	8001956 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a87      	ldr	r2, [pc, #540]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b85      	ldr	r3, [pc, #532]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b82      	ldr	r3, [pc, #520]	@ (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4b7f      	ldr	r3, [pc, #508]	@ (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a7e      	ldr	r2, [pc, #504]	@ (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7fe fe33 	bl	80005d8 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001976:	f7fe fe2f 	bl	80005d8 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b64      	cmp	r3, #100	@ 0x64
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e103      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	4b75      	ldr	r3, [pc, #468]	@ (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x312>
 800199c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6213      	str	r3, [r2, #32]
 80019a8:	e02d      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x334>
 80019b2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a69      	ldr	r2, [pc, #420]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a66      	ldr	r2, [pc, #408]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6213      	str	r3, [r2, #32]
 80019ca:	e01c      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x356>
 80019d4:	4b61      	ldr	r3, [pc, #388]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a60      	ldr	r2, [pc, #384]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6213      	str	r3, [r2, #32]
 80019fa:	4b58      	ldr	r3, [pc, #352]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a57      	ldr	r2, [pc, #348]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7fe fde3 	bl	80005d8 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7fe fddf 	bl	80005d8 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0b1      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ee      	beq.n	8001a16 <HAL_RCC_OscConfig+0x37e>
 8001a38:	e014      	b.n	8001a64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fdcd 	bl	80005d8 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7fe fdc9 	bl	80005d8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e09b      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	4b40      	ldr	r3, [pc, #256]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ee      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a80:	4b36      	ldr	r3, [pc, #216]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d061      	beq.n	8001b50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d146      	bne.n	8001b22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a94:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7fe fd9d 	bl	80005d8 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7fe fd99 	bl	80005d8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e06d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac8:	d108      	bne.n	8001adc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aca:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4921      	ldr	r1, [pc, #132]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a19      	ldr	r1, [r3, #32]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	430b      	orrs	r3, r1
 8001aee:	491b      	ldr	r1, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7fe fd6d 	bl	80005d8 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe fd69 	bl	80005d8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e03d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46a>
 8001b20:	e035      	b.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7fe fd56 	bl	80005d8 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7fe fd52 	bl	80005d8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e026      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x498>
 8001b4e:	e01e      	b.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e019      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40007000 	.word	0x40007000
 8001b64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_RCC_OscConfig+0x500>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d0      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d910      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b67      	ldr	r3, [pc, #412]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4965      	ldr	r1, [pc, #404]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d040      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d115      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e073      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06b      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b39      	ldr	r3, [pc, #228]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4936      	ldr	r1, [pc, #216]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7fe fca4 	bl	80005d8 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7fe fca0 	bl	80005d8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e053      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d210      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4922      	ldr	r1, [pc, #136]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d16:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f821 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	490a      	ldr	r1, [pc, #40]	@ (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3c:	5ccb      	ldrb	r3, [r1, r3]
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <HAL_RCC_ClockConfig+0x1cc>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_RCC_ClockConfig+0x1d0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fc02 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08002654 	.word	0x08002654
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x30>
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x36>
 8001d9e:	e027      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001da2:	613b      	str	r3, [r7, #16]
      break;
 8001da4:	e027      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001db0:	5cd3      	ldrb	r3, [r2, r3]
 8001db2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	0c5b      	lsrs	r3, r3, #17
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e004      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	613b      	str	r3, [r7, #16]
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001df2:	613b      	str	r3, [r7, #16]
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	693b      	ldr	r3, [r7, #16]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	007a1200 	.word	0x007a1200
 8001e0c:	0800266c 	.word	0x0800266c
 8001e10:	0800267c 	.word	0x0800267c
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	@ (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	@ (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08002664 	.word	0x08002664

08001e54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <RCC_Delay+0x34>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <RCC_Delay+0x38>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0a5b      	lsrs	r3, r3, #9
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e70:	bf00      	nop
  }
  while (Delay --);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	60fa      	str	r2, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f9      	bne.n	8001e70 <RCC_Delay+0x1c>
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	10624dd3 	.word	0x10624dd3

08001e90 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	460a      	mov	r2, r1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8001ea0:	2226      	movs	r2, #38	@ 0x26
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2078      	movs	r0, #120	@ 0x78
 8001ea6:	f000 fb0d 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2078      	movs	r0, #120	@ 0x78
 8001eb0:	f000 fb08 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2078      	movs	r0, #120	@ 0x78
 8001ebc:	f000 fb02 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2078      	movs	r0, #120	@ 0x78
 8001ec6:	f000 fafd 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2078      	movs	r0, #120	@ 0x78
 8001ed2:	f000 faf7 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2078      	movs	r0, #120	@ 0x78
 8001edc:	f000 faf2 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001ee0:	22ff      	movs	r2, #255	@ 0xff
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2078      	movs	r0, #120	@ 0x78
 8001ee6:	f000 faed 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001eea:	222f      	movs	r2, #47	@ 0x2f
 8001eec:	2100      	movs	r1, #0
 8001eee:	2078      	movs	r0, #120	@ 0x78
 8001ef0:	f000 fae8 	bl	80024c4 <ssd1306_I2C_Write>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	460a      	mov	r2, r1
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8001f0c:	2227      	movs	r2, #39	@ 0x27
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2078      	movs	r0, #120	@ 0x78
 8001f12:	f000 fad7 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2078      	movs	r0, #120	@ 0x78
 8001f1c:	f000 fad2 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	461a      	mov	r2, r3
 8001f24:	2100      	movs	r1, #0
 8001f26:	2078      	movs	r0, #120	@ 0x78
 8001f28:	f000 facc 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2078      	movs	r0, #120	@ 0x78
 8001f32:	f000 fac7 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2078      	movs	r0, #120	@ 0x78
 8001f3e:	f000 fac1 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2078      	movs	r0, #120	@ 0x78
 8001f48:	f000 fabc 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001f4c:	22ff      	movs	r2, #255	@ 0xff
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2078      	movs	r0, #120	@ 0x78
 8001f52:	f000 fab7 	bl	80024c4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001f56:	222f      	movs	r2, #47	@ 0x2f
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2078      	movs	r0, #120	@ 0x78
 8001f5c:	f000 fab2 	bl	80024c4 <ssd1306_I2C_Write>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001f6c:	222e      	movs	r2, #46	@ 0x2e
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2078      	movs	r0, #120	@ 0x78
 8001f72:	f000 faa7 	bl	80024c4 <ssd1306_I2C_Write>
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f82:	f000 fa25 	bl	80023d0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f86:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2178      	movs	r1, #120	@ 0x78
 8001f8e:	485b      	ldr	r0, [pc, #364]	@ (80020fc <SSD1306_Init+0x180>)
 8001f90:	f7fe fffa 	bl	8000f88 <HAL_I2C_IsDeviceReady>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e0a9      	b.n	80020f2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001f9e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001fa2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fa4:	e002      	b.n	8001fac <SSD1306_Init+0x30>
		p--;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f9      	bne.n	8001fa6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001fb2:	22ae      	movs	r2, #174	@ 0xae
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2078      	movs	r0, #120	@ 0x78
 8001fb8:	f000 fa84 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2078      	movs	r0, #120	@ 0x78
 8001fc2:	f000 fa7f 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2078      	movs	r0, #120	@ 0x78
 8001fcc:	f000 fa7a 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fd0:	22b0      	movs	r2, #176	@ 0xb0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2078      	movs	r0, #120	@ 0x78
 8001fd6:	f000 fa75 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001fda:	22c8      	movs	r2, #200	@ 0xc8
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2078      	movs	r0, #120	@ 0x78
 8001fe0:	f000 fa70 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2078      	movs	r0, #120	@ 0x78
 8001fea:	f000 fa6b 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001fee:	2210      	movs	r2, #16
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2078      	movs	r0, #120	@ 0x78
 8001ff4:	f000 fa66 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001ff8:	2240      	movs	r2, #64	@ 0x40
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2078      	movs	r0, #120	@ 0x78
 8001ffe:	f000 fa61 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002002:	2281      	movs	r2, #129	@ 0x81
 8002004:	2100      	movs	r1, #0
 8002006:	2078      	movs	r0, #120	@ 0x78
 8002008:	f000 fa5c 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800200c:	22ff      	movs	r2, #255	@ 0xff
 800200e:	2100      	movs	r1, #0
 8002010:	2078      	movs	r0, #120	@ 0x78
 8002012:	f000 fa57 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002016:	22a1      	movs	r2, #161	@ 0xa1
 8002018:	2100      	movs	r1, #0
 800201a:	2078      	movs	r0, #120	@ 0x78
 800201c:	f000 fa52 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002020:	22a6      	movs	r2, #166	@ 0xa6
 8002022:	2100      	movs	r1, #0
 8002024:	2078      	movs	r0, #120	@ 0x78
 8002026:	f000 fa4d 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800202a:	22a8      	movs	r2, #168	@ 0xa8
 800202c:	2100      	movs	r1, #0
 800202e:	2078      	movs	r0, #120	@ 0x78
 8002030:	f000 fa48 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002034:	223f      	movs	r2, #63	@ 0x3f
 8002036:	2100      	movs	r1, #0
 8002038:	2078      	movs	r0, #120	@ 0x78
 800203a:	f000 fa43 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800203e:	22a4      	movs	r2, #164	@ 0xa4
 8002040:	2100      	movs	r1, #0
 8002042:	2078      	movs	r0, #120	@ 0x78
 8002044:	f000 fa3e 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002048:	22d3      	movs	r2, #211	@ 0xd3
 800204a:	2100      	movs	r1, #0
 800204c:	2078      	movs	r0, #120	@ 0x78
 800204e:	f000 fa39 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	2078      	movs	r0, #120	@ 0x78
 8002058:	f000 fa34 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800205c:	22d5      	movs	r2, #213	@ 0xd5
 800205e:	2100      	movs	r1, #0
 8002060:	2078      	movs	r0, #120	@ 0x78
 8002062:	f000 fa2f 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002066:	22f0      	movs	r2, #240	@ 0xf0
 8002068:	2100      	movs	r1, #0
 800206a:	2078      	movs	r0, #120	@ 0x78
 800206c:	f000 fa2a 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002070:	22d9      	movs	r2, #217	@ 0xd9
 8002072:	2100      	movs	r1, #0
 8002074:	2078      	movs	r0, #120	@ 0x78
 8002076:	f000 fa25 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800207a:	2222      	movs	r2, #34	@ 0x22
 800207c:	2100      	movs	r1, #0
 800207e:	2078      	movs	r0, #120	@ 0x78
 8002080:	f000 fa20 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002084:	22da      	movs	r2, #218	@ 0xda
 8002086:	2100      	movs	r1, #0
 8002088:	2078      	movs	r0, #120	@ 0x78
 800208a:	f000 fa1b 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800208e:	2212      	movs	r2, #18
 8002090:	2100      	movs	r1, #0
 8002092:	2078      	movs	r0, #120	@ 0x78
 8002094:	f000 fa16 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002098:	22db      	movs	r2, #219	@ 0xdb
 800209a:	2100      	movs	r1, #0
 800209c:	2078      	movs	r0, #120	@ 0x78
 800209e:	f000 fa11 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020a2:	2220      	movs	r2, #32
 80020a4:	2100      	movs	r1, #0
 80020a6:	2078      	movs	r0, #120	@ 0x78
 80020a8:	f000 fa0c 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020ac:	228d      	movs	r2, #141	@ 0x8d
 80020ae:	2100      	movs	r1, #0
 80020b0:	2078      	movs	r0, #120	@ 0x78
 80020b2:	f000 fa07 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020b6:	2214      	movs	r2, #20
 80020b8:	2100      	movs	r1, #0
 80020ba:	2078      	movs	r0, #120	@ 0x78
 80020bc:	f000 fa02 	bl	80024c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80020c0:	22af      	movs	r2, #175	@ 0xaf
 80020c2:	2100      	movs	r1, #0
 80020c4:	2078      	movs	r0, #120	@ 0x78
 80020c6:	f000 f9fd 	bl	80024c4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80020ca:	222e      	movs	r2, #46	@ 0x2e
 80020cc:	2100      	movs	r1, #0
 80020ce:	2078      	movs	r0, #120	@ 0x78
 80020d0:	f000 f9f8 	bl	80024c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 f843 	bl	8002160 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80020da:	f000 f813 	bl	8002104 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <SSD1306_Init+0x184>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <SSD1306_Init+0x184>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <SSD1306_Init+0x184>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000038 	.word	0x20000038
 8002100:	20000490 	.word	0x20000490

08002104 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800210a:	2300      	movs	r3, #0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	e01d      	b.n	800214c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	3b50      	subs	r3, #80	@ 0x50
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	2100      	movs	r1, #0
 800211a:	2078      	movs	r0, #120	@ 0x78
 800211c:	f000 f9d2 	bl	80024c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	2078      	movs	r0, #120	@ 0x78
 8002126:	f000 f9cd 	bl	80024c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800212a:	2210      	movs	r2, #16
 800212c:	2100      	movs	r1, #0
 800212e:	2078      	movs	r0, #120	@ 0x78
 8002130:	f000 f9c8 	bl	80024c4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	01db      	lsls	r3, r3, #7
 8002138:	4a08      	ldr	r2, [pc, #32]	@ (800215c <SSD1306_UpdateScreen+0x58>)
 800213a:	441a      	add	r2, r3
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	2140      	movs	r1, #64	@ 0x40
 8002140:	2078      	movs	r0, #120	@ 0x78
 8002142:	f000 f959 	bl	80023f8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	3301      	adds	r3, #1
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	2b07      	cmp	r3, #7
 8002150:	d9de      	bls.n	8002110 <SSD1306_UpdateScreen+0xc>
	}
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000090 	.word	0x20000090

08002160 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <SSD1306_Fill+0x14>
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <SSD1306_Fill+0x16>
 8002174:	23ff      	movs	r3, #255	@ 0xff
 8002176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800217a:	4619      	mov	r1, r3
 800217c:	4803      	ldr	r0, [pc, #12]	@ (800218c <SSD1306_Fill+0x2c>)
 800217e:	f000 fa1b 	bl	80025b8 <memset>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000090 	.word	0x20000090

08002190 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
 800219a:	460b      	mov	r3, r1
 800219c:	80bb      	strh	r3, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	70fb      	strb	r3, [r7, #3]
	if (
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80021a6:	d848      	bhi.n	800223a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80021ac:	d845      	bhi.n	800223a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021ae:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <SSD1306_DrawPixel+0xb4>)
 80021b0:	791b      	ldrb	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d11a      	bne.n	8002200 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	88bb      	ldrh	r3, [r7, #4]
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	b298      	uxth	r0, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	01db      	lsls	r3, r3, #7
 80021d6:	4413      	add	r3, r2
 80021d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <SSD1306_DrawPixel+0xb8>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	b25a      	sxtb	r2, r3
 80021de:	88bb      	ldrh	r3, [r7, #4]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	b25b      	sxtb	r3, r3
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b259      	sxtb	r1, r3
 80021f0:	88fa      	ldrh	r2, [r7, #6]
 80021f2:	4603      	mov	r3, r0
 80021f4:	01db      	lsls	r3, r3, #7
 80021f6:	4413      	add	r3, r2
 80021f8:	b2c9      	uxtb	r1, r1
 80021fa:	4a13      	ldr	r2, [pc, #76]	@ (8002248 <SSD1306_DrawPixel+0xb8>)
 80021fc:	54d1      	strb	r1, [r2, r3]
 80021fe:	e01d      	b.n	800223c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	88bb      	ldrh	r3, [r7, #4]
 8002204:	08db      	lsrs	r3, r3, #3
 8002206:	b298      	uxth	r0, r3
 8002208:	4603      	mov	r3, r0
 800220a:	01db      	lsls	r3, r3, #7
 800220c:	4413      	add	r3, r2
 800220e:	4a0e      	ldr	r2, [pc, #56]	@ (8002248 <SSD1306_DrawPixel+0xb8>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	b25a      	sxtb	r2, r3
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	b25b      	sxtb	r3, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	b25b      	sxtb	r3, r3
 8002226:	4013      	ands	r3, r2
 8002228:	b259      	sxtb	r1, r3
 800222a:	88fa      	ldrh	r2, [r7, #6]
 800222c:	4603      	mov	r3, r0
 800222e:	01db      	lsls	r3, r3, #7
 8002230:	4413      	add	r3, r2
 8002232:	b2c9      	uxtb	r1, r1
 8002234:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <SSD1306_DrawPixel+0xb8>)
 8002236:	54d1      	strb	r1, [r2, r3]
 8002238:	e000      	b.n	800223c <SSD1306_DrawPixel+0xac>
		return;
 800223a:	bf00      	nop
	}
}
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000490 	.word	0x20000490
 8002248:	20000090 	.word	0x20000090

0800224c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	460a      	mov	r2, r1
 8002256:	80fb      	strh	r3, [r7, #6]
 8002258:	4613      	mov	r3, r2
 800225a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800225c:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <SSD1306_GotoXY+0x28>)
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002262:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <SSD1306_GotoXY+0x28>)
 8002264:	88bb      	ldrh	r3, [r7, #4]
 8002266:	8053      	strh	r3, [r2, #2]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000490 	.word	0x20000490

08002278 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	4613      	mov	r3, r2
 8002286:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002288:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <SSD1306_Putc+0xf8>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
	if (
 8002294:	2b7f      	cmp	r3, #127	@ 0x7f
 8002296:	dc07      	bgt.n	80022a8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002298:	4b35      	ldr	r3, [pc, #212]	@ (8002370 <SSD1306_Putc+0xf8>)
 800229a:	885b      	ldrh	r3, [r3, #2]
 800229c:	461a      	mov	r2, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80022a6:	dd01      	ble.n	80022ac <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e05d      	b.n	8002368 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e04b      	b.n	800234a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	3b20      	subs	r3, #32
 80022ba:	6839      	ldr	r1, [r7, #0]
 80022bc:	7849      	ldrb	r1, [r1, #1]
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4619      	mov	r1, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	440b      	add	r3, r1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	e030      	b.n	8002338 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <SSD1306_Putc+0xf8>)
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	b298      	uxth	r0, r3
 80022f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <SSD1306_Putc+0xf8>)
 80022f4:	885a      	ldrh	r2, [r3, #2]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	79ba      	ldrb	r2, [r7, #6]
 8002300:	4619      	mov	r1, r3
 8002302:	f7ff ff45 	bl	8002190 <SSD1306_DrawPixel>
 8002306:	e014      	b.n	8002332 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <SSD1306_Putc+0xf8>)
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4413      	add	r3, r2
 8002312:	b298      	uxth	r0, r3
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <SSD1306_Putc+0xf8>)
 8002316:	885a      	ldrh	r2, [r3, #2]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4413      	add	r3, r2
 800231e:	b299      	uxth	r1, r3
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf0c      	ite	eq
 8002326:	2301      	moveq	r3, #1
 8002328:	2300      	movne	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	f7ff ff2f 	bl	8002190 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3301      	adds	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4293      	cmp	r3, r2
 8002342:	d3c8      	bcc.n	80022d6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	461a      	mov	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4293      	cmp	r3, r2
 8002354:	d3ad      	bcc.n	80022b2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <SSD1306_Putc+0xf8>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	4413      	add	r3, r2
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <SSD1306_Putc+0xf8>)
 8002364:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002366:	79fb      	ldrb	r3, [r7, #7]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000490 	.word	0x20000490

08002374 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002382:	e012      	b.n	80023aa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff73 	bl	8002278 <SSD1306_Putc>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d002      	beq.n	80023a4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	e008      	b.n	80023b6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e8      	bne.n	8002384 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	781b      	ldrb	r3, [r3, #0]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff fecc 	bl	8002160 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80023c8:	f7ff fe9c 	bl	8002104 <SSD1306_UpdateScreen>
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80023d6:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <ssd1306_I2C_Init+0x24>)
 80023d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023da:	e002      	b.n	80023e2 <ssd1306_I2C_Init+0x12>
		p--;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f9      	bne.n	80023dc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	0003d090 	.word	0x0003d090

080023f8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b0c7      	sub	sp, #284	@ 0x11c
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002406:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800240a:	600a      	str	r2, [r1, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002412:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002416:	4622      	mov	r2, r4
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800241e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002422:	4602      	mov	r2, r0
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800242a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800242e:	460a      	mov	r2, r1
 8002430:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002432:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800243a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800243e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800244c:	e015      	b.n	800247a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800244e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002452:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002456:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	441a      	add	r2, r3
 800245e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002462:	3301      	adds	r3, #1
 8002464:	7811      	ldrb	r1, [r2, #0]
 8002466:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800246a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800246e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002470:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002474:	3301      	adds	r3, #1
 8002476:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800247a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800247e:	b29b      	uxth	r3, r3
 8002480:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002484:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002488:	8812      	ldrh	r2, [r2, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d8df      	bhi.n	800244e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800248e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002492:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b299      	uxth	r1, r3
 800249a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800249e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f107 020c 	add.w	r2, r7, #12
 80024ac:	200a      	movs	r0, #10
 80024ae:	9000      	str	r0, [sp, #0]
 80024b0:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <ssd1306_I2C_WriteMulti+0xc8>)
 80024b2:	f7fe fc6b 	bl	8000d8c <HAL_I2C_Master_Transmit>
}
 80024b6:	bf00      	nop
 80024b8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	20000038 	.word	0x20000038

080024c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
 80024ce:	460b      	mov	r3, r1
 80024d0:	71bb      	strb	r3, [r7, #6]
 80024d2:	4613      	mov	r3, r2
 80024d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80024d6:	79bb      	ldrb	r3, [r7, #6]
 80024d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80024da:	797b      	ldrb	r3, [r7, #5]
 80024dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	b299      	uxth	r1, r3
 80024e2:	f107 020c 	add.w	r2, r7, #12
 80024e6:	230a      	movs	r3, #10
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2302      	movs	r3, #2
 80024ec:	4803      	ldr	r0, [pc, #12]	@ (80024fc <ssd1306_I2C_Write+0x38>)
 80024ee:	f7fe fc4d 	bl	8000d8c <HAL_I2C_Master_Transmit>
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000038 	.word	0x20000038

08002500 <__itoa>:
 8002500:	1e93      	subs	r3, r2, #2
 8002502:	2b22      	cmp	r3, #34	@ 0x22
 8002504:	b510      	push	{r4, lr}
 8002506:	460c      	mov	r4, r1
 8002508:	d904      	bls.n	8002514 <__itoa+0x14>
 800250a:	2300      	movs	r3, #0
 800250c:	461c      	mov	r4, r3
 800250e:	700b      	strb	r3, [r1, #0]
 8002510:	4620      	mov	r0, r4
 8002512:	bd10      	pop	{r4, pc}
 8002514:	2a0a      	cmp	r2, #10
 8002516:	d109      	bne.n	800252c <__itoa+0x2c>
 8002518:	2800      	cmp	r0, #0
 800251a:	da07      	bge.n	800252c <__itoa+0x2c>
 800251c:	232d      	movs	r3, #45	@ 0x2d
 800251e:	700b      	strb	r3, [r1, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	4240      	negs	r0, r0
 8002524:	4421      	add	r1, r4
 8002526:	f000 f805 	bl	8002534 <__utoa>
 800252a:	e7f1      	b.n	8002510 <__itoa+0x10>
 800252c:	2100      	movs	r1, #0
 800252e:	e7f9      	b.n	8002524 <__itoa+0x24>

08002530 <itoa>:
 8002530:	f7ff bfe6 	b.w	8002500 <__itoa>

08002534 <__utoa>:
 8002534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002536:	b08b      	sub	sp, #44	@ 0x2c
 8002538:	4605      	mov	r5, r0
 800253a:	460b      	mov	r3, r1
 800253c:	466e      	mov	r6, sp
 800253e:	4c1d      	ldr	r4, [pc, #116]	@ (80025b4 <__utoa+0x80>)
 8002540:	f104 0c20 	add.w	ip, r4, #32
 8002544:	4637      	mov	r7, r6
 8002546:	6820      	ldr	r0, [r4, #0]
 8002548:	6861      	ldr	r1, [r4, #4]
 800254a:	3408      	adds	r4, #8
 800254c:	c703      	stmia	r7!, {r0, r1}
 800254e:	4564      	cmp	r4, ip
 8002550:	463e      	mov	r6, r7
 8002552:	d1f7      	bne.n	8002544 <__utoa+0x10>
 8002554:	7921      	ldrb	r1, [r4, #4]
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	7139      	strb	r1, [r7, #4]
 800255a:	1e91      	subs	r1, r2, #2
 800255c:	2922      	cmp	r1, #34	@ 0x22
 800255e:	6038      	str	r0, [r7, #0]
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	d904      	bls.n	8002570 <__utoa+0x3c>
 8002566:	7019      	strb	r1, [r3, #0]
 8002568:	460b      	mov	r3, r1
 800256a:	4618      	mov	r0, r3
 800256c:	b00b      	add	sp, #44	@ 0x2c
 800256e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002570:	1e58      	subs	r0, r3, #1
 8002572:	4684      	mov	ip, r0
 8002574:	fbb5 f7f2 	udiv	r7, r5, r2
 8002578:	fb02 5617 	mls	r6, r2, r7, r5
 800257c:	3628      	adds	r6, #40	@ 0x28
 800257e:	446e      	add	r6, sp
 8002580:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002584:	460c      	mov	r4, r1
 8002586:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800258a:	462e      	mov	r6, r5
 800258c:	42b2      	cmp	r2, r6
 800258e:	463d      	mov	r5, r7
 8002590:	f101 0101 	add.w	r1, r1, #1
 8002594:	d9ee      	bls.n	8002574 <__utoa+0x40>
 8002596:	2200      	movs	r2, #0
 8002598:	545a      	strb	r2, [r3, r1]
 800259a:	1919      	adds	r1, r3, r4
 800259c:	1aa5      	subs	r5, r4, r2
 800259e:	42aa      	cmp	r2, r5
 80025a0:	dae3      	bge.n	800256a <__utoa+0x36>
 80025a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80025a6:	780e      	ldrb	r6, [r1, #0]
 80025a8:	3201      	adds	r2, #1
 80025aa:	7006      	strb	r6, [r0, #0]
 80025ac:	f801 5901 	strb.w	r5, [r1], #-1
 80025b0:	e7f4      	b.n	800259c <__utoa+0x68>
 80025b2:	bf00      	nop
 80025b4:	08004728 	.word	0x08004728

080025b8 <memset>:
 80025b8:	4603      	mov	r3, r0
 80025ba:	4402      	add	r2, r0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d100      	bne.n	80025c2 <memset+0xa>
 80025c0:	4770      	bx	lr
 80025c2:	f803 1b01 	strb.w	r1, [r3], #1
 80025c6:	e7f9      	b.n	80025bc <memset+0x4>

080025c8 <__libc_init_array>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	2600      	movs	r6, #0
 80025cc:	4d0c      	ldr	r5, [pc, #48]	@ (8002600 <__libc_init_array+0x38>)
 80025ce:	4c0d      	ldr	r4, [pc, #52]	@ (8002604 <__libc_init_array+0x3c>)
 80025d0:	1b64      	subs	r4, r4, r5
 80025d2:	10a4      	asrs	r4, r4, #2
 80025d4:	42a6      	cmp	r6, r4
 80025d6:	d109      	bne.n	80025ec <__libc_init_array+0x24>
 80025d8:	f000 f81a 	bl	8002610 <_init>
 80025dc:	2600      	movs	r6, #0
 80025de:	4d0a      	ldr	r5, [pc, #40]	@ (8002608 <__libc_init_array+0x40>)
 80025e0:	4c0a      	ldr	r4, [pc, #40]	@ (800260c <__libc_init_array+0x44>)
 80025e2:	1b64      	subs	r4, r4, r5
 80025e4:	10a4      	asrs	r4, r4, #2
 80025e6:	42a6      	cmp	r6, r4
 80025e8:	d105      	bne.n	80025f6 <__libc_init_array+0x2e>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f0:	4798      	blx	r3
 80025f2:	3601      	adds	r6, #1
 80025f4:	e7ee      	b.n	80025d4 <__libc_init_array+0xc>
 80025f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fa:	4798      	blx	r3
 80025fc:	3601      	adds	r6, #1
 80025fe:	e7f2      	b.n	80025e6 <__libc_init_array+0x1e>
 8002600:	08004750 	.word	0x08004750
 8002604:	08004750 	.word	0x08004750
 8002608:	08004750 	.word	0x08004750
 800260c:	08004754 	.word	0x08004754

08002610 <_init>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	bf00      	nop
 8002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002616:	bc08      	pop	{r3}
 8002618:	469e      	mov	lr, r3
 800261a:	4770      	bx	lr

0800261c <_fini>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr
