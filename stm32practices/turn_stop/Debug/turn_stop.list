
turn_stop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  08003a88  08003a88  00004a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004858  08004858  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004858  08004858  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004858  08004858  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004858  08004858  00005858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800485c  0800485c  0000585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004860  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000014  08004874  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08004874  00006568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be1d  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6c  00000000  00000000  00011e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00013bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5c  00000000  00000000  000148f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bb7  00000000  00000000  00015354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f31d  00000000  00000000  0002cf0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a769  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  000c69d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000ca208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a70 	.word	0x08003a70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003a70 	.word	0x08003a70

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc39 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f88f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa23 	bl	80005a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8c7 	bl	80002f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000162:	f000 f8f3 	bl	800034c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000166:	f000 f949 	bl	80003fc <MX_TIM2_Init>
  MX_TIM3_Init();
 800016a:	f000 f99b 	bl	80004a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800016e:	f003 f935 	bl	80033dc <SSD1306_Init>
  SSD1306_GotoXY(10, 10);
 8000172:	210a      	movs	r1, #10
 8000174:	200a      	movs	r0, #10
 8000176:	f003 fa99 	bl	80036ac <SSD1306_GotoXY>
  SSD1306_Puts("Hello", &Font_11x18, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	4937      	ldr	r1, [pc, #220]	@ (800025c <main+0x110>)
 800017e:	4838      	ldr	r0, [pc, #224]	@ (8000260 <main+0x114>)
 8000180:	f003 fb28 	bl	80037d4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000184:	f003 f9ee 	bl	8003564 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8000188:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800018c:	f000 fc7e 	bl	8000a8c <HAL_Delay>

  int counterValueLeft=0;
 8000190:	2300      	movs	r3, #0
 8000192:	617b      	str	r3, [r7, #20]
  char snumLeft[5];
  int counterValueRight=0;
 8000194:	2300      	movs	r3, #0
 8000196:	613b      	str	r3, [r7, #16]
  char snumRight[5];

  SSD1306_GotoXY (0,0);
 8000198:	2100      	movs	r1, #0
 800019a:	2000      	movs	r0, #0
 800019c:	f003 fa86 	bl	80036ac <SSD1306_GotoXY>
      SSD1306_Puts ("Imanchana", &Font_11x18, 1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	492e      	ldr	r1, [pc, #184]	@ (800025c <main+0x110>)
 80001a4:	482f      	ldr	r0, [pc, #188]	@ (8000264 <main+0x118>)
 80001a6:	f003 fb15 	bl	80037d4 <SSD1306_Puts>
      SSD1306_GotoXY (0, 30);
 80001aa:	211e      	movs	r1, #30
 80001ac:	2000      	movs	r0, #0
 80001ae:	f003 fa7d 	bl	80036ac <SSD1306_GotoXY>
      SSD1306_Puts ("Kaveeshwara", &Font_11x18, 1);
 80001b2:	2201      	movs	r2, #1
 80001b4:	4929      	ldr	r1, [pc, #164]	@ (800025c <main+0x110>)
 80001b6:	482c      	ldr	r0, [pc, #176]	@ (8000268 <main+0x11c>)
 80001b8:	f003 fb0c 	bl	80037d4 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 80001bc:	f003 f9d2 	bl	8003564 <SSD1306_UpdateScreen>
      HAL_Delay (1000);
 80001c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001c4:	f000 fc62 	bl	8000a8c <HAL_Delay>

      SSD1306_ScrollRight(0,7);
 80001c8:	2107      	movs	r1, #7
 80001ca:	2000      	movs	r0, #0
 80001cc:	f003 f890 	bl	80032f0 <SSD1306_ScrollRight>
      HAL_Delay(3000);
 80001d0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001d4:	f000 fc5a 	bl	8000a8c <HAL_Delay>
      SSD1306_ScrollLeft(0,7);
 80001d8:	2107      	movs	r1, #7
 80001da:	2000      	movs	r0, #0
 80001dc:	f003 f8be 	bl	800335c <SSD1306_ScrollLeft>
      HAL_Delay(3000);
 80001e0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001e4:	f000 fc52 	bl	8000a8c <HAL_Delay>
      SSD1306_Stopscroll();
 80001e8:	f003 f8ee 	bl	80033c8 <SSD1306_Stopscroll>
      SSD1306_Clear();
 80001ec:	f003 fb17 	bl	800381e <SSD1306_Clear>
      HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80001f0:	213c      	movs	r1, #60	@ 0x3c
 80001f2:	481e      	ldr	r0, [pc, #120]	@ (800026c <main+0x120>)
 80001f4:	f002 fa27 	bl	8002646 <HAL_TIM_Encoder_Start>
        HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80001f8:	213c      	movs	r1, #60	@ 0x3c
 80001fa:	481d      	ldr	r0, [pc, #116]	@ (8000270 <main+0x124>)
 80001fc:	f002 fa23 	bl	8002646 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counterValueRight = TIM1->CNT;
 8000200:	4b1c      	ldr	r3, [pc, #112]	@ (8000274 <main+0x128>)
 8000202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000204:	613b      	str	r3, [r7, #16]
	  counterValueLeft = TIM2->CNT;
 8000206:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800020a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800020c:	617b      	str	r3, [r7, #20]
	  itoa(counterValueLeft, snumLeft, 10);
 800020e:	f107 0308 	add.w	r3, r7, #8
 8000212:	220a      	movs	r2, #10
 8000214:	4619      	mov	r1, r3
 8000216:	6978      	ldr	r0, [r7, #20]
 8000218:	f003 fbba 	bl	8003990 <itoa>
	  itoa(counterValueRight, snumRight, 10);
 800021c:	463b      	mov	r3, r7
 800021e:	220a      	movs	r2, #10
 8000220:	4619      	mov	r1, r3
 8000222:	6938      	ldr	r0, [r7, #16]
 8000224:	f003 fbb4 	bl	8003990 <itoa>
	  SSD1306_GotoXY (37, 10);
 8000228:	210a      	movs	r1, #10
 800022a:	2025      	movs	r0, #37	@ 0x25
 800022c:	f003 fa3e 	bl	80036ac <SSD1306_GotoXY>
	  SSD1306_Puts (snumLeft, &Font_11x18, 1);
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	2201      	movs	r2, #1
 8000236:	4909      	ldr	r1, [pc, #36]	@ (800025c <main+0x110>)
 8000238:	4618      	mov	r0, r3
 800023a:	f003 facb 	bl	80037d4 <SSD1306_Puts>
	  SSD1306_GotoXY (37, 40);
 800023e:	2128      	movs	r1, #40	@ 0x28
 8000240:	2025      	movs	r0, #37	@ 0x25
 8000242:	f003 fa33 	bl	80036ac <SSD1306_GotoXY>
	  SSD1306_Puts (snumRight, &Font_11x18, 1);
 8000246:	463b      	mov	r3, r7
 8000248:	2201      	movs	r2, #1
 800024a:	4904      	ldr	r1, [pc, #16]	@ (800025c <main+0x110>)
 800024c:	4618      	mov	r0, r3
 800024e:	f003 fac1 	bl	80037d4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000252:	f003 f987 	bl	8003564 <SSD1306_UpdateScreen>
	  counterValueRight = TIM1->CNT;
 8000256:	bf00      	nop
 8000258:	e7d2      	b.n	8000200 <main+0xb4>
 800025a:	bf00      	nop
 800025c:	2000000c 	.word	0x2000000c
 8000260:	08003a88 	.word	0x08003a88
 8000264:	08003a90 	.word	0x08003a90
 8000268:	08003a9c 	.word	0x08003a9c
 800026c:	20000084 	.word	0x20000084
 8000270:	200000cc 	.word	0x200000cc
 8000274:	40012c00 	.word	0x40012c00

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	@ 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	@ 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fbc6 	bl	8003a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fc84 	bl	8001bbc <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ba:	f000 f9c7 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fef2 	bl	80020c0 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e2:	f000 f9b3 	bl	800064c <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3740      	adds	r7, #64	@ 0x40
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f4:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <MX_I2C1_Init+0x50>)
 80002f6:	4a13      	ldr	r2, [pc, #76]	@ (8000344 <MX_I2C1_Init+0x54>)
 80002f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002fa:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <MX_I2C1_Init+0x50>)
 80002fc:	4a12      	ldr	r2, [pc, #72]	@ (8000348 <MX_I2C1_Init+0x58>)
 80002fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000300:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <MX_I2C1_Init+0x50>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_I2C1_Init+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030c:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <MX_I2C1_Init+0x50>)
 800030e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000314:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800031a:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000320:	4b07      	ldr	r3, [pc, #28]	@ (8000340 <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000326:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <MX_I2C1_Init+0x50>)
 800032e:	f000 fe7b 	bl	8001028 <HAL_I2C_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000338:	f000 f988 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000030 	.word	0x20000030
 8000344:	40005400 	.word	0x40005400
 8000348:	00061a80 	.word	0x00061a80

0800034c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08c      	sub	sp, #48	@ 0x30
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	2224      	movs	r2, #36	@ 0x24
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f003 fb5c 	bl	8003a18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000368:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 800036a:	4a23      	ldr	r2, [pc, #140]	@ (80003f8 <MX_TIM1_Init+0xac>)
 800036c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800036e:	4b21      	ldr	r3, [pc, #132]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000374:	4b1f      	ldr	r3, [pc, #124]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800037a:	4b1e      	ldr	r3, [pc, #120]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 800037c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000380:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000382:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000388:	4b1a      	ldr	r3, [pc, #104]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038e:	4b19      	ldr	r3, [pc, #100]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000394:	2303      	movs	r3, #3
 8000396:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800039c:	2301      	movs	r3, #1
 800039e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80003a4:	2305      	movs	r3, #5
 80003a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003a8:	2300      	movs	r3, #0
 80003aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003ac:	2301      	movs	r3, #1
 80003ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80003b4:	2305      	movs	r3, #5
 80003b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80003b8:	f107 030c 	add.w	r3, r7, #12
 80003bc:	4619      	mov	r1, r3
 80003be:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 80003c0:	f002 f89f 	bl	8002502 <HAL_TIM_Encoder_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80003ca:	f000 f93f 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4619      	mov	r1, r3
 80003da:	4806      	ldr	r0, [pc, #24]	@ (80003f4 <MX_TIM1_Init+0xa8>)
 80003dc:	f002 ff18 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80003e6:	f000 f931 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	3730      	adds	r7, #48	@ 0x30
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000084 	.word	0x20000084
 80003f8:	40012c00 	.word	0x40012c00

080003fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08c      	sub	sp, #48	@ 0x30
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	2224      	movs	r2, #36	@ 0x24
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fb04 	bl	8003a18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000418:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <MX_TIM2_Init+0xa4>)
 800041a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800041e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000420:	4b1f      	ldr	r3, [pc, #124]	@ (80004a0 <MX_TIM2_Init+0xa4>)
 8000422:	2200      	movs	r2, #0
 8000424:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000426:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <MX_TIM2_Init+0xa4>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800042c:	4b1c      	ldr	r3, [pc, #112]	@ (80004a0 <MX_TIM2_Init+0xa4>)
 800042e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000432:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b1a      	ldr	r3, [pc, #104]	@ (80004a0 <MX_TIM2_Init+0xa4>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043a:	4b19      	ldr	r3, [pc, #100]	@ (80004a0 <MX_TIM2_Init+0xa4>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000440:	2303      	movs	r3, #3
 8000442:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000448:	2301      	movs	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000450:	2305      	movs	r3, #5
 8000452:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000458:	2301      	movs	r3, #1
 800045a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000460:	2305      	movs	r3, #5
 8000462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	4619      	mov	r1, r3
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <MX_TIM2_Init+0xa4>)
 800046c:	f002 f849 	bl	8002502 <HAL_TIM_Encoder_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000476:	f000 f8e9 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	@ (80004a0 <MX_TIM2_Init+0xa4>)
 8000488:	f002 fec2 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000492:	f000 f8db 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	3730      	adds	r7, #48	@ 0x30
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000cc 	.word	0x200000cc

080004a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08e      	sub	sp, #56	@ 0x38
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	f107 0320 	add.w	r3, r7, #32
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004d4:	4b31      	ldr	r3, [pc, #196]	@ (800059c <MX_TIM3_Init+0xf8>)
 80004d6:	4a32      	ldr	r2, [pc, #200]	@ (80005a0 <MX_TIM3_Init+0xfc>)
 80004d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80004da:	4b30      	ldr	r3, [pc, #192]	@ (800059c <MX_TIM3_Init+0xf8>)
 80004dc:	2207      	movs	r2, #7
 80004de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	@ (800059c <MX_TIM3_Init+0xf8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	@ (800059c <MX_TIM3_Init+0xf8>)
 80004e8:	22c7      	movs	r2, #199	@ 0xc7
 80004ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	@ (800059c <MX_TIM3_Init+0xf8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b2a      	ldr	r3, [pc, #168]	@ (800059c <MX_TIM3_Init+0xf8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004f8:	4828      	ldr	r0, [pc, #160]	@ (800059c <MX_TIM3_Init+0xf8>)
 80004fa:	f001 ff5b 	bl	80023b4 <HAL_TIM_Base_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000504:	f000 f8a2 	bl	800064c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800050c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800050e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000512:	4619      	mov	r1, r3
 8000514:	4821      	ldr	r0, [pc, #132]	@ (800059c <MX_TIM3_Init+0xf8>)
 8000516:	f002 fad7 	bl	8002ac8 <HAL_TIM_ConfigClockSource>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000520:	f000 f894 	bl	800064c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000524:	481d      	ldr	r0, [pc, #116]	@ (800059c <MX_TIM3_Init+0xf8>)
 8000526:	f001 ff94 	bl	8002452 <HAL_TIM_PWM_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000530:	f000 f88c 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800053c:	f107 0320 	add.w	r3, r7, #32
 8000540:	4619      	mov	r1, r3
 8000542:	4816      	ldr	r0, [pc, #88]	@ (800059c <MX_TIM3_Init+0xf8>)
 8000544:	f002 fe64 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800054e:	f000 f87d 	bl	800064c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000552:	2360      	movs	r3, #96	@ 0x60
 8000554:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	480c      	ldr	r0, [pc, #48]	@ (800059c <MX_TIM3_Init+0xf8>)
 800056a:	f002 f9eb 	bl	8002944 <HAL_TIM_PWM_ConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000574:	f000 f86a 	bl	800064c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2204      	movs	r2, #4
 800057c:	4619      	mov	r1, r3
 800057e:	4807      	ldr	r0, [pc, #28]	@ (800059c <MX_TIM3_Init+0xf8>)
 8000580:	f002 f9e0 	bl	8002944 <HAL_TIM_PWM_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800058a:	f000 f85f 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800058e:	4803      	ldr	r0, [pc, #12]	@ (800059c <MX_TIM3_Init+0xf8>)
 8000590:	f000 f97c 	bl	800088c <HAL_TIM_MspPostInit>

}
 8000594:	bf00      	nop
 8000596:	3738      	adds	r7, #56	@ 0x38
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000114 	.word	0x20000114
 80005a0:	40000400 	.word	0x40000400

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <MX_GPIO_Init+0x9c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a20      	ldr	r2, [pc, #128]	@ (8000640 <MX_GPIO_Init+0x9c>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <MX_GPIO_Init+0x9c>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <MX_GPIO_Init+0x9c>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000640 <MX_GPIO_Init+0x9c>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_GPIO_Init+0x9c>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80005ee:	4815      	ldr	r0, [pc, #84]	@ (8000644 <MX_GPIO_Init+0xa0>)
 80005f0:	f000 fd02 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2118      	movs	r1, #24
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <MX_GPIO_Init+0xa4>)
 80005fa:	f000 fcfd 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80005fe:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2302      	movs	r3, #2
 800060e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	@ (8000644 <MX_GPIO_Init+0xa0>)
 8000618:	f000 fb6a 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800061c:	2318      	movs	r3, #24
 800061e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2302      	movs	r3, #2
 800062a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_GPIO_Init+0xa4>)
 8000634:	f000 fb5c 	bl	8000cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	40010800 	.word	0x40010800
 8000648:	40010c00 	.word	0x40010c00

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <Error_Handler+0x8>

08000658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <HAL_MspInit+0x5c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_MspInit+0x5c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <HAL_MspInit+0x5c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <HAL_MspInit+0x5c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_MspInit+0x60>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <HAL_MspInit+0x60>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000

080006bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a1d      	ldr	r2, [pc, #116]	@ (800074c <HAL_I2C_MspInit+0x90>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d132      	bne.n	8000742 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <HAL_I2C_MspInit+0x94>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <HAL_I2C_MspInit+0x94>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <HAL_I2C_MspInit+0x94>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fa:	2312      	movs	r3, #18
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4812      	ldr	r0, [pc, #72]	@ (8000754 <HAL_I2C_MspInit+0x98>)
 800070a:	f000 faf1 	bl	8000cf0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <HAL_I2C_MspInit+0x9c>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
 8000714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000716:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24
 800071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071e:	f043 0302 	orr.w	r3, r3, #2
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
 8000724:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <HAL_I2C_MspInit+0x9c>)
 8000726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000728:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_I2C_MspInit+0x94>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <HAL_I2C_MspInit+0x94>)
 8000730:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_I2C_MspInit+0x94>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	@ 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40005400 	.word	0x40005400
 8000750:	40021000 	.word	0x40021000
 8000754:	40010c00 	.word	0x40010c00
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a33      	ldr	r2, [pc, #204]	@ (8000844 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d12d      	bne.n	80007d8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800077c:	4b32      	ldr	r3, [pc, #200]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a31      	ldr	r2, [pc, #196]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 8000782:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a2b      	ldr	r2, [pc, #172]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	4619      	mov	r1, r3
 80007c0:	4822      	ldr	r0, [pc, #136]	@ (800084c <HAL_TIM_Encoder_MspInit+0xf0>)
 80007c2:	f000 fa95 	bl	8000cf0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2019      	movs	r0, #25
 80007cc:	f000 fa59 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007d0:	2019      	movs	r0, #25
 80007d2:	f000 fa72 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007d6:	e030      	b.n	800083a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007e0:	d12b      	bne.n	800083a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <HAL_TIM_Encoder_MspInit+0xec>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000812:	2303      	movs	r3, #3
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0318 	add.w	r3, r7, #24
 8000822:	4619      	mov	r1, r3
 8000824:	4809      	ldr	r0, [pc, #36]	@ (800084c <HAL_TIM_Encoder_MspInit+0xf0>)
 8000826:	f000 fa63 	bl	8000cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	201c      	movs	r0, #28
 8000830:	f000 fa27 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000834:	201c      	movs	r0, #28
 8000836:	f000 fa40 	bl	8000cba <HAL_NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40012c00 	.word	0x40012c00
 8000848:	40021000 	.word	0x40021000
 800084c:	40010800 	.word	0x40010800

08000850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <HAL_TIM_Base_MspInit+0x34>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d10b      	bne.n	800087a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_TIM_Base_MspInit+0x38>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_TIM_Base_MspInit+0x38>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_TIM_Base_MspInit+0x38>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40000400 	.word	0x40000400
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <HAL_TIM_MspPostInit+0x58>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d117      	bne.n	80008dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_TIM_MspPostInit+0x5c>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <HAL_TIM_MspPostInit+0x5c>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_TIM_MspPostInit+0x5c>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008c4:	23c0      	movs	r3, #192	@ 0xc0
 80008c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <HAL_TIM_MspPostInit+0x60>)
 80008d8:	f000 fa0a 	bl	8000cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40000400 	.word	0x40000400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40010800 	.word	0x40010800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <MemManage_Handler+0x4>

08000908 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <UsageFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 f888 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <TIM1_UP_IRQHandler+0x10>)
 800094e:	f001 ff08 	bl	8002762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000084 	.word	0x20000084

0800095c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <TIM2_IRQHandler+0x10>)
 8000962:	f001 fefe 	bl	8002762 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000cc 	.word	0x200000cc

08000970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800097c:	f7ff fff8 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000982:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000984:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a09      	ldr	r2, [pc, #36]	@ (80009bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000998:	4c09      	ldr	r4, [pc, #36]	@ (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a6:	f003 f83f 	bl	8003a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fbcf 	bl	800014c <main>
  bx lr
 80009ae:	4770      	bx	lr
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009b8:	08004860 	.word	0x08004860
  ldr r2, =_sbss
 80009bc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009c0:	20000568 	.word	0x20000568

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_Init+0x28>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_Init+0x28>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f947 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fe38 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f95f 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 f927 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	20000008 	.word	0x20000008
 8000a74:	2000015c 	.word	0x2000015c

08000a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	@ (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	2000015c 	.word	0x2000015c

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffe0 	bl	8000a78 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4906      	ldr	r1, [pc, #24]	@ (8000b6c <__NVIC_EnableIRQ+0x34>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	@ (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	@ (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	@ 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	@ 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff90 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff2d 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff42 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff90 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5f 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff35 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b08b      	sub	sp, #44	@ 0x2c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e169      	b.n	8000fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d04:	2201      	movs	r2, #1
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8158 	bne.w	8000fd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4a9a      	ldr	r2, [pc, #616]	@ (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05e      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d2c:	4a98      	ldr	r2, [pc, #608]	@ (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d875      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d32:	4a98      	ldr	r2, [pc, #608]	@ (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d058      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d38:	4a96      	ldr	r2, [pc, #600]	@ (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d86f      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d3e:	4a96      	ldr	r2, [pc, #600]	@ (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d052      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d44:	4a94      	ldr	r2, [pc, #592]	@ (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d869      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d4a:	4a94      	ldr	r2, [pc, #592]	@ (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d04c      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d50:	4a92      	ldr	r2, [pc, #584]	@ (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d863      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d56:	4a92      	ldr	r2, [pc, #584]	@ (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d046      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d5c:	4a90      	ldr	r2, [pc, #576]	@ (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d85d      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d82a      	bhi.n	8000dbc <HAL_GPIO_Init+0xcc>
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d859      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d70 <HAL_GPIO_Init+0x80>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000dd7 	.word	0x08000dd7
 8000d7c:	08000e19 	.word	0x08000e19
 8000d80:	08000e1f 	.word	0x08000e1f
 8000d84:	08000e1f 	.word	0x08000e1f
 8000d88:	08000e1f 	.word	0x08000e1f
 8000d8c:	08000e1f 	.word	0x08000e1f
 8000d90:	08000e1f 	.word	0x08000e1f
 8000d94:	08000e1f 	.word	0x08000e1f
 8000d98:	08000e1f 	.word	0x08000e1f
 8000d9c:	08000e1f 	.word	0x08000e1f
 8000da0:	08000e1f 	.word	0x08000e1f
 8000da4:	08000e1f 	.word	0x08000e1f
 8000da8:	08000e1f 	.word	0x08000e1f
 8000dac:	08000e1f 	.word	0x08000e1f
 8000db0:	08000e1f 	.word	0x08000e1f
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000de1 	.word	0x08000de1
 8000dbc:	4a79      	ldr	r2, [pc, #484]	@ (8000fa4 <HAL_GPIO_Init+0x2b4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dc2:	e02c      	b.n	8000e1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e029      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e024      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e01f      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	330c      	adds	r3, #12
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e01a      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df2:	2304      	movs	r3, #4
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e013      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d105      	bne.n	8000e0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	611a      	str	r2, [r3, #16]
          break;
 8000e0a:	e009      	b.n	8000e20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	615a      	str	r2, [r3, #20]
          break;
 8000e16:	e003      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          break;
 8000e1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2bff      	cmp	r3, #255	@ 0xff
 8000e24:	d801      	bhi.n	8000e2a <HAL_GPIO_Init+0x13a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	e001      	b.n	8000e2e <HAL_GPIO_Init+0x13e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2bff      	cmp	r3, #255	@ 0xff
 8000e34:	d802      	bhi.n	8000e3c <HAL_GPIO_Init+0x14c>
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0x152>
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	3b08      	subs	r3, #8
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	210f      	movs	r1, #15
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	6a39      	ldr	r1, [r7, #32]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80b1 	beq.w	8000fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e70:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e88:	4a48      	ldr	r2, [pc, #288]	@ (8000fac <HAL_GPIO_Init+0x2bc>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a40      	ldr	r2, [pc, #256]	@ (8000fb0 <HAL_GPIO_Init+0x2c0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d013      	beq.n	8000edc <HAL_GPIO_Init+0x1ec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <HAL_GPIO_Init+0x1e8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x1e4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d101      	bne.n	8000ed0 <HAL_GPIO_Init+0x1e0>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000edc:	2300      	movs	r3, #0
 8000ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eee:	492f      	ldr	r1, [pc, #188]	@ (8000fac <HAL_GPIO_Init+0x2bc>)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f08:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	492c      	ldr	r1, [pc, #176]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	608b      	str	r3, [r1, #8]
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f16:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4928      	ldr	r1, [pc, #160]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f30:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	4922      	ldr	r1, [pc, #136]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60cb      	str	r3, [r1, #12]
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	491e      	ldr	r1, [pc, #120]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	4918      	ldr	r1, [pc, #96]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4914      	ldr	r1, [pc, #80]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d021      	beq.n	8000fc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	490e      	ldr	r1, [pc, #56]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
 8000f8c:	e021      	b.n	8000fd2 <HAL_GPIO_Init+0x2e2>
 8000f8e:	bf00      	nop
 8000f90:	10320000 	.word	0x10320000
 8000f94:	10310000 	.word	0x10310000
 8000f98:	10220000 	.word	0x10220000
 8000f9c:	10210000 	.word	0x10210000
 8000fa0:	10120000 	.word	0x10120000
 8000fa4:	10110000 	.word	0x10110000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40011400 	.word	0x40011400
 8000fc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	4909      	ldr	r1, [pc, #36]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f47f ae8e 	bne.w	8000d04 <HAL_GPIO_Init+0x14>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	372c      	adds	r7, #44	@ 0x2c
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001014:	e003      	b.n	800101e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	611a      	str	r2, [r3, #16]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e12b      	b.n	8001292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fb34 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2224      	movs	r2, #36	@ 0x24
 8001058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800107a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800108a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800108c:	f001 f960 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8001090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a81      	ldr	r2, [pc, #516]	@ (800129c <HAL_I2C_Init+0x274>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d807      	bhi.n	80010ac <HAL_I2C_Init+0x84>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a80      	ldr	r2, [pc, #512]	@ (80012a0 <HAL_I2C_Init+0x278>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	bf94      	ite	ls
 80010a4:	2301      	movls	r3, #1
 80010a6:	2300      	movhi	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	e006      	b.n	80010ba <HAL_I2C_Init+0x92>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a7d      	ldr	r2, [pc, #500]	@ (80012a4 <HAL_I2C_Init+0x27c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	bf94      	ite	ls
 80010b4:	2301      	movls	r3, #1
 80010b6:	2300      	movhi	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0e7      	b.n	8001292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4a78      	ldr	r2, [pc, #480]	@ (80012a8 <HAL_I2C_Init+0x280>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a6a      	ldr	r2, [pc, #424]	@ (800129c <HAL_I2C_Init+0x274>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d802      	bhi.n	80010fc <HAL_I2C_Init+0xd4>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3301      	adds	r3, #1
 80010fa:	e009      	b.n	8001110 <HAL_I2C_Init+0xe8>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a69      	ldr	r2, [pc, #420]	@ (80012ac <HAL_I2C_Init+0x284>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	099b      	lsrs	r3, r3, #6
 800110e:	3301      	adds	r3, #1
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	430b      	orrs	r3, r1
 8001116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001122:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	495c      	ldr	r1, [pc, #368]	@ (800129c <HAL_I2C_Init+0x274>)
 800112c:	428b      	cmp	r3, r1
 800112e:	d819      	bhi.n	8001164 <HAL_I2C_Init+0x13c>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1e59      	subs	r1, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fbb1 f3f3 	udiv	r3, r1, r3
 800113e:	1c59      	adds	r1, r3, #1
 8001140:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001144:	400b      	ands	r3, r1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_I2C_Init+0x138>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1e59      	subs	r1, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fbb1 f3f3 	udiv	r3, r1, r3
 8001158:	3301      	adds	r3, #1
 800115a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115e:	e051      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 8001160:	2304      	movs	r3, #4
 8001162:	e04f      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d111      	bne.n	8001190 <HAL_I2C_Init+0x168>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1e58      	subs	r0, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	440b      	add	r3, r1
 800117a:	fbb0 f3f3 	udiv	r3, r0, r3
 800117e:	3301      	adds	r3, #1
 8001180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e012      	b.n	80011b6 <HAL_I2C_Init+0x18e>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1e58      	subs	r0, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	0099      	lsls	r1, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_Init+0x196>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e022      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10e      	bne.n	80011e4 <HAL_I2C_Init+0x1bc>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1e58      	subs	r0, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6859      	ldr	r1, [r3, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	440b      	add	r3, r1
 80011d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d8:	3301      	adds	r3, #1
 80011da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e2:	e00f      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1e58      	subs	r0, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	0099      	lsls	r1, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	6809      	ldr	r1, [r1, #0]
 8001208:	4313      	orrs	r3, r2
 800120a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69da      	ldr	r2, [r3, #28]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001232:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6911      	ldr	r1, [r2, #16]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68d2      	ldr	r2, [r2, #12]
 800123e:	4311      	orrs	r1, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	430b      	orrs	r3, r1
 8001246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2220      	movs	r2, #32
 800127e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	000186a0 	.word	0x000186a0
 80012a0:	001e847f 	.word	0x001e847f
 80012a4:	003d08ff 	.word	0x003d08ff
 80012a8:	431bde83 	.word	0x431bde83
 80012ac:	10624dd3 	.word	0x10624dd3

080012b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	461a      	mov	r2, r3
 80012bc:	460b      	mov	r3, r1
 80012be:	817b      	strh	r3, [r7, #10]
 80012c0:	4613      	mov	r3, r2
 80012c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fbd8 	bl	8000a78 <HAL_GetTick>
 80012c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	f040 80e0 	bne.w	8001498 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2319      	movs	r3, #25
 80012de:	2201      	movs	r2, #1
 80012e0:	4970      	ldr	r1, [pc, #448]	@ (80014a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 fa92 	bl	800180c <I2C_WaitOnFlagUntilTimeout>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
 80012f0:	e0d3      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_I2C_Master_Transmit+0x50>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e0cc      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d007      	beq.n	8001326 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001334:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2221      	movs	r2, #33	@ 0x21
 800133a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2210      	movs	r2, #16
 8001342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	893a      	ldrh	r2, [r7, #8]
 8001356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a50      	ldr	r2, [pc, #320]	@ (80014a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001368:	8979      	ldrh	r1, [r7, #10]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	6a3a      	ldr	r2, [r7, #32]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f9ca 	bl	8001708 <I2C_MasterRequestWrite>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e08d      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001394:	e066      	b.n	8001464 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	6a39      	ldr	r1, [r7, #32]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 fb50 	bl	8001a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00d      	beq.n	80013c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d107      	bne.n	80013be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e06b      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d11b      	bne.n	8001438 <HAL_I2C_Master_Transmit+0x188>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001404:	2b00      	cmp	r3, #0
 8001406:	d017      	beq.n	8001438 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001430:	3b01      	subs	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	6a39      	ldr	r1, [r7, #32]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 fb47 	bl	8001ad0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00d      	beq.n	8001464 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	2b04      	cmp	r3, #4
 800144e:	d107      	bne.n	8001460 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800145e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e01a      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001468:	2b00      	cmp	r3, #0
 800146a:	d194      	bne.n	8001396 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800147a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2220      	movs	r2, #32
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001498:	2302      	movs	r3, #2
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	00100002 	.word	0x00100002
 80014a8:	ffff0000 	.word	0xffff0000

080014ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	460b      	mov	r3, r1
 80014ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff fadc 	bl	8000a78 <HAL_GetTick>
 80014c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	f040 8111 	bne.w	80016f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2319      	movs	r3, #25
 80014da:	2201      	movs	r2, #1
 80014dc:	4988      	ldr	r1, [pc, #544]	@ (8001700 <HAL_I2C_IsDeviceReady+0x254>)
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f994 	bl	800180c <I2C_WaitOnFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80014ea:	2302      	movs	r3, #2
 80014ec:	e104      	b.n	80016f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <HAL_I2C_IsDeviceReady+0x50>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e0fd      	b.n	80016f8 <HAL_I2C_IsDeviceReady+0x24c>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d007      	beq.n	8001522 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2224      	movs	r2, #36	@ 0x24
 8001536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a70      	ldr	r2, [pc, #448]	@ (8001704 <HAL_I2C_IsDeviceReady+0x258>)
 8001544:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001554:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 f952 	bl	800180c <I2C_WaitOnFlagUntilTimeout>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00d      	beq.n	800158a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157c:	d103      	bne.n	8001586 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001584:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0b6      	b.n	80016f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800158a:	897b      	ldrh	r3, [r7, #10]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001598:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fa6d 	bl	8000a78 <HAL_GetTick>
 800159e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80015ce:	e025      	b.n	800161c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015d0:	f7ff fa52 	bl	8000a78 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d302      	bcc.n	80015e6 <HAL_I2C_IsDeviceReady+0x13a>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d103      	bne.n	80015ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	22a0      	movs	r2, #160	@ 0xa0
 80015ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2ba0      	cmp	r3, #160	@ 0xa0
 8001626:	d005      	beq.n	8001634 <HAL_I2C_IsDeviceReady+0x188>
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_I2C_IsDeviceReady+0x188>
 800162e:	7dbb      	ldrb	r3, [r7, #22]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0cd      	beq.n	80015d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b02      	cmp	r3, #2
 8001648:	d129      	bne.n	800169e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001658:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2319      	movs	r3, #25
 8001676:	2201      	movs	r2, #1
 8001678:	4921      	ldr	r1, [pc, #132]	@ (8001700 <HAL_I2C_IsDeviceReady+0x254>)
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f8c6 	bl	800180c <I2C_WaitOnFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e036      	b.n	80016f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e02c      	b.n	80016f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80016b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2319      	movs	r3, #25
 80016be:	2201      	movs	r2, #1
 80016c0:	490f      	ldr	r1, [pc, #60]	@ (8001700 <HAL_I2C_IsDeviceReady+0x254>)
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 f8a2 	bl	800180c <I2C_WaitOnFlagUntilTimeout>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e012      	b.n	80016f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	3301      	adds	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f4ff af32 	bcc.w	8001546 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80016f6:	2302      	movs	r3, #2
  }
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	00100002 	.word	0x00100002
 8001704:	ffff0000 	.word	0xffff0000

08001708 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	460b      	mov	r3, r1
 8001716:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b08      	cmp	r3, #8
 8001722:	d006      	beq.n	8001732 <I2C_MasterRequestWrite+0x2a>
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d003      	beq.n	8001732 <I2C_MasterRequestWrite+0x2a>
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001730:	d108      	bne.n	8001744 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e00b      	b.n	800175c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001748:	2b12      	cmp	r3, #18
 800174a:	d107      	bne.n	800175c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800175a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 f84f 	bl	800180c <I2C_WaitOnFlagUntilTimeout>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00d      	beq.n	8001790 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001782:	d103      	bne.n	800178c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e035      	b.n	80017fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001798:	d108      	bne.n	80017ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800179a:	897b      	ldrh	r3, [r7, #10]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	e01b      	b.n	80017e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017ac:	897b      	ldrh	r3, [r7, #10]
 80017ae:	11db      	asrs	r3, r3, #7
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f003 0306 	and.w	r3, r3, #6
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f063 030f 	orn	r3, r3, #15
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	490e      	ldr	r1, [pc, #56]	@ (8001804 <I2C_MasterRequestWrite+0xfc>)
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f898 	bl	8001900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e010      	b.n	80017fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4907      	ldr	r1, [pc, #28]	@ (8001808 <I2C_MasterRequestWrite+0x100>)
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f888 	bl	8001900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	00010008 	.word	0x00010008
 8001808:	00010002 	.word	0x00010002

0800180c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800181c:	e048      	b.n	80018b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d044      	beq.n	80018b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001826:	f7ff f927 	bl	8000a78 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d302      	bcc.n	800183c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d139      	bne.n	80018b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10d      	bne.n	8001862 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	43da      	mvns	r2, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	4013      	ands	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	e00c      	b.n	800187c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	43da      	mvns	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4013      	ands	r3, r2
 800186e:	b29b      	uxth	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	429a      	cmp	r2, r3
 8001880:	d116      	bne.n	80018b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e023      	b.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10d      	bne.n	80018d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	43da      	mvns	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4013      	ands	r3, r2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	e00c      	b.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	43da      	mvns	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4013      	ands	r3, r2
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d093      	beq.n	800181e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800190e:	e071      	b.n	80019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800191e:	d123      	bne.n	8001968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2220      	movs	r2, #32
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f043 0204 	orr.w	r2, r3, #4
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e067      	b.n	8001a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196e:	d041      	beq.n	80019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001970:	f7ff f882 	bl	8000a78 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	d302      	bcc.n	8001986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d136      	bne.n	80019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10c      	bne.n	80019aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4013      	ands	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	e00b      	b.n	80019c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	43da      	mvns	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	4013      	ands	r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f043 0220 	orr.w	r2, r3, #32
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e021      	b.n	8001a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	0c1b      	lsrs	r3, r3, #16
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10c      	bne.n	8001a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	43da      	mvns	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	e00b      	b.n	8001a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4013      	ands	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f47f af6d 	bne.w	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a4c:	e034      	b.n	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f886 	bl	8001b60 <I2C_IsAcknowledgeFailed>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e034      	b.n	8001ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d028      	beq.n	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a66:	f7ff f807 	bl	8000a78 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d302      	bcc.n	8001a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d11d      	bne.n	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a86:	2b80      	cmp	r3, #128	@ 0x80
 8001a88:	d016      	beq.n	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f043 0220 	orr.w	r2, r3, #32
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e007      	b.n	8001ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac2:	2b80      	cmp	r3, #128	@ 0x80
 8001ac4:	d1c3      	bne.n	8001a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001adc:	e034      	b.n	8001b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f83e 	bl	8001b60 <I2C_IsAcknowledgeFailed>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e034      	b.n	8001b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d028      	beq.n	8001b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af6:	f7fe ffbf 	bl	8000a78 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d302      	bcc.n	8001b0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d11d      	bne.n	8001b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d016      	beq.n	8001b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e007      	b.n	8001b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d1c3      	bne.n	8001ade <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b76:	d11b      	bne.n	8001bb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f043 0204 	orr.w	r2, r3, #4
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e272      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bdc:	4b92      	ldr	r3, [pc, #584]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be8:	4b8f      	ldr	r3, [pc, #572]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d112      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c02:	4b89      	ldr	r3, [pc, #548]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d06c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d168      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e24c      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76>
 8001c24:	4b80      	ldr	r3, [pc, #512]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a7f      	ldr	r2, [pc, #508]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e02e      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x98>
 8001c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7a      	ldr	r2, [pc, #488]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b78      	ldr	r3, [pc, #480]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a77      	ldr	r2, [pc, #476]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xbc>
 8001c5e:	4b72      	ldr	r3, [pc, #456]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a71      	ldr	r2, [pc, #452]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c78:	4b6b      	ldr	r3, [pc, #428]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b68      	ldr	r3, [pc, #416]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a67      	ldr	r2, [pc, #412]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe feee 	bl	8000a78 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7fe feea 	bl	8000a78 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e200      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe4>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe feda 	bl	8000a78 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7fe fed6 	bl	8000a78 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1ec      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b53      	ldr	r3, [pc, #332]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x10c>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d02:	4b49      	ldr	r3, [pc, #292]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
 8001d0e:	4b46      	ldr	r3, [pc, #280]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1c0      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b3d      	ldr	r3, [pc, #244]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4939      	ldr	r1, [pc, #228]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b36      	ldr	r3, [pc, #216]	@ (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7fe fe8f 	bl	8000a78 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7fe fe8b 	bl	8000a78 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1a1      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4927      	ldr	r1, [pc, #156]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b26      	ldr	r3, [pc, #152]	@ (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fe6e 	bl	8000a78 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7fe fe6a 	bl	8000a78 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e180      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03a      	beq.n	8001e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d019      	beq.n	8001e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fe4e 	bl	8000a78 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7fe fe4a 	bl	8000a78 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e160      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f000 faba 	bl	8002378 <RCC_Delay>
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7fe fe34 	bl	8000a78 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7fe fe30 	bl	8000a78 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d908      	bls.n	8001e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e146      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	42420000 	.word	0x42420000
 8001e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b92      	ldr	r3, [pc, #584]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e9      	bne.n	8001e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a6 	beq.w	8001f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b8b      	ldr	r3, [pc, #556]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b88      	ldr	r3, [pc, #544]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a87      	ldr	r2, [pc, #540]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b85      	ldr	r3, [pc, #532]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b82      	ldr	r3, [pc, #520]	@ (8002084 <HAL_RCC_OscConfig+0x4c8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b7f      	ldr	r3, [pc, #508]	@ (8002084 <HAL_RCC_OscConfig+0x4c8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002084 <HAL_RCC_OscConfig+0x4c8>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7fe fdf1 	bl	8000a78 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7fe fded 	bl	8000a78 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	@ 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e103      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b75      	ldr	r3, [pc, #468]	@ (8002084 <HAL_RCC_OscConfig+0x4c8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x312>
 8001ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e02d      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x334>
 8001ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a69      	ldr	r2, [pc, #420]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	4b67      	ldr	r3, [pc, #412]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a66      	ldr	r2, [pc, #408]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	e01c      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x356>
 8001ef8:	4b61      	ldr	r3, [pc, #388]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a60      	ldr	r2, [pc, #384]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	4b5e      	ldr	r3, [pc, #376]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a5d      	ldr	r2, [pc, #372]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001f12:	4b5b      	ldr	r3, [pc, #364]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a5a      	ldr	r2, [pc, #360]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	4b58      	ldr	r3, [pc, #352]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a57      	ldr	r2, [pc, #348]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fda1 	bl	8000a78 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe fd9d 	bl	8000a78 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0b1      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4b4b      	ldr	r3, [pc, #300]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x37e>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fd8b 	bl	8000a78 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7fe fd87 	bl	8000a78 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e09b      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	4b40      	ldr	r3, [pc, #256]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a3b      	ldr	r2, [pc, #236]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8087 	beq.w	80020b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa4:	4b36      	ldr	r3, [pc, #216]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d061      	beq.n	8002074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d146      	bne.n	8002046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fd5b 	bl	8000a78 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe fd57 	bl	8000a78 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e06d      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	4b29      	ldr	r3, [pc, #164]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fec:	d108      	bne.n	8002000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fee:	4b24      	ldr	r3, [pc, #144]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	4921      	ldr	r1, [pc, #132]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b1f      	ldr	r3, [pc, #124]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a19      	ldr	r1, [r3, #32]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	430b      	orrs	r3, r1
 8002012:	491b      	ldr	r1, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7fe fd2b 	bl	8000a78 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7fe fd27 	bl	8000a78 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e03d      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x46a>
 8002044:	e035      	b.n	80020b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fd14 	bl	8000a78 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe fd10 	bl	8000a78 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e026      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x498>
 8002072:	e01e      	b.n	80020b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e019      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
 8002080:	40021000 	.word	0x40021000
 8002084:	40007000 	.word	0x40007000
 8002088:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_RCC_OscConfig+0x500>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	429a      	cmp	r2, r3
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0d0      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d910      	bls.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b67      	ldr	r3, [pc, #412]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4965      	ldr	r1, [pc, #404]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b63      	ldr	r3, [pc, #396]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0b8      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800211c:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002134:	4b53      	ldr	r3, [pc, #332]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800213e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b50      	ldr	r3, [pc, #320]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	494d      	ldr	r1, [pc, #308]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d040      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b47      	ldr	r3, [pc, #284]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d115      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e07f      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e073      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06b      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b39      	ldr	r3, [pc, #228]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4936      	ldr	r1, [pc, #216]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fc62 	bl	8000a78 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7fe fc5e 	bl	8000a78 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e053      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d210      	bcs.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4922      	ldr	r1, [pc, #136]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e032      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4916      	ldr	r1, [pc, #88]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	490e      	ldr	r1, [pc, #56]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224e:	f000 f821 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8002252:	4602      	mov	r2, r0
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	490a      	ldr	r1, [pc, #40]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	4a09      	ldr	r2, [pc, #36]	@ (800228c <HAL_RCC_ClockConfig+0x1cc>)
 8002268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_RCC_ClockConfig+0x1d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fbc0 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000
 8002284:	40021000 	.word	0x40021000
 8002288:	08003aa8 	.word	0x08003aa8
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x94>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d002      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x30>
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x36>
 80022c2:	e027      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	@ (800232c <HAL_RCC_GetSysClockFreq+0x98>)
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	e027      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0c9b      	lsrs	r3, r3, #18
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	4a17      	ldr	r2, [pc, #92]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x94>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0c5b      	lsrs	r3, r3, #17
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	4a11      	ldr	r2, [pc, #68]	@ (8002334 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e004      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	613b      	str	r3, [r7, #16]
      break;
 8002312:	e002      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_RCC_GetSysClockFreq+0x98>)
 8002316:	613b      	str	r3, [r7, #16]
      break;
 8002318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231a:	693b      	ldr	r3, [r7, #16]
}
 800231c:	4618      	mov	r0, r3
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	007a1200 	.word	0x007a1200
 8002330:	08003ac0 	.word	0x08003ac0
 8002334:	08003ad0 	.word	0x08003ad0
 8002338:	003d0900 	.word	0x003d0900

0800233c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b02      	ldr	r3, [pc, #8]	@ (800234c <HAL_RCC_GetHCLKFreq+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000000 	.word	0x20000000

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002354:	f7ff fff2 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	@ (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	08003ab8 	.word	0x08003ab8

08002378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002380:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <RCC_Delay+0x34>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <RCC_Delay+0x38>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0a5b      	lsrs	r3, r3, #9
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002394:	bf00      	nop
  }
  while (Delay --);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	60fa      	str	r2, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f9      	bne.n	8002394 <RCC_Delay+0x1c>
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000000 	.word	0x20000000
 80023b0:	10624dd3 	.word	0x10624dd3

080023b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e041      	b.n	800244a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fa38 	bl	8000850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f000 fc5c 	bl	8002cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e041      	b.n	80024e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f839 	bl	80024f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f000 fc0d 	bl	8002cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e093      	b.n	800263e <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe f916 	bl	800075c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002546:	f023 0307 	bic.w	r3, r3, #7
 800254a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 fbaa 	bl	8002cb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002584:	f023 0303 	bic.w	r3, r3, #3
 8002588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	4313      	orrs	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80025a2:	f023 030c 	bic.w	r3, r3, #12
 80025a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	4313      	orrs	r3, r2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	011a      	lsls	r2, r3, #4
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	031b      	lsls	r3, r3, #12
 80025d2:	4313      	orrs	r3, r2
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80025e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	4313      	orrs	r3, r2
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002656:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800265e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002666:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800266e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d110      	bne.n	8002698 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800267c:	7b7b      	ldrb	r3, [r7, #13]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d001      	beq.n	8002686 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e069      	b.n	800275a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002696:	e031      	b.n	80026fc <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d110      	bne.n	80026c0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800269e:	7bbb      	ldrb	r3, [r7, #14]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d102      	bne.n	80026aa <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026a4:	7b3b      	ldrb	r3, [r7, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e055      	b.n	800275a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026be:	e01d      	b.n	80026fc <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80026c6:	7bbb      	ldrb	r3, [r7, #14]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026cc:	7b7b      	ldrb	r3, [r7, #13]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026d2:	7b3b      	ldrb	r3, [r7, #12]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d001      	beq.n	80026dc <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e03e      	b.n	800275a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_Encoder_Start+0xc4>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b04      	cmp	r3, #4
 8002706:	d008      	beq.n	800271a <HAL_TIM_Encoder_Start+0xd4>
 8002708:	e00f      	b.n	800272a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2201      	movs	r2, #1
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fd58 	bl	80031c8 <TIM_CCxChannelCmd>
      break;
 8002718:	e016      	b.n	8002748 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	2104      	movs	r1, #4
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fd50 	bl	80031c8 <TIM_CCxChannelCmd>
      break;
 8002728:	e00e      	b.n	8002748 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fd48 	bl	80031c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	2104      	movs	r1, #4
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fd41 	bl	80031c8 <TIM_CCxChannelCmd>
      break;
 8002746:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01b      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0202 	mvn.w	r2, #2
 8002796:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa64 	bl	8002c7a <HAL_TIM_IC_CaptureCallback>
 80027b2:	e005      	b.n	80027c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fa57 	bl	8002c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fa66 	bl	8002c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01b      	beq.n	8002812 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0204 	mvn.w	r2, #4
 80027e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fa3e 	bl	8002c7a <HAL_TIM_IC_CaptureCallback>
 80027fe:	e005      	b.n	800280c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fa31 	bl	8002c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fa40 	bl	8002c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01b      	beq.n	800285e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f06f 0208 	mvn.w	r2, #8
 800282e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2204      	movs	r2, #4
 8002834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fa18 	bl	8002c7a <HAL_TIM_IC_CaptureCallback>
 800284a:	e005      	b.n	8002858 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fa0b 	bl	8002c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fa1a 	bl	8002c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01b      	beq.n	80028aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f06f 0210 	mvn.w	r2, #16
 800287a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2208      	movs	r2, #8
 8002880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f9f2 	bl	8002c7a <HAL_TIM_IC_CaptureCallback>
 8002896:	e005      	b.n	80028a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f9e5 	bl	8002c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9f4 	bl	8002c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f06f 0201 	mvn.w	r2, #1
 80028c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f9c4 	bl	8002c56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00c      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fcf6 	bl	80032de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00c      	beq.n	8002916 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f9c4 	bl	8002c9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00c      	beq.n	800293a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0220 	mvn.w	r2, #32
 8002932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fcc9 	bl	80032cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800295e:	2302      	movs	r3, #2
 8002960:	e0ae      	b.n	8002ac0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	f200 809f 	bhi.w	8002ab0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002972:	a201      	add	r2, pc, #4	@ (adr r2, 8002978 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029ad 	.word	0x080029ad
 800297c:	08002ab1 	.word	0x08002ab1
 8002980:	08002ab1 	.word	0x08002ab1
 8002984:	08002ab1 	.word	0x08002ab1
 8002988:	080029ed 	.word	0x080029ed
 800298c:	08002ab1 	.word	0x08002ab1
 8002990:	08002ab1 	.word	0x08002ab1
 8002994:	08002ab1 	.word	0x08002ab1
 8002998:	08002a2f 	.word	0x08002a2f
 800299c:	08002ab1 	.word	0x08002ab1
 80029a0:	08002ab1 	.word	0x08002ab1
 80029a4:	08002ab1 	.word	0x08002ab1
 80029a8:	08002a6f 	.word	0x08002a6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f9ea 	bl	8002d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0208 	orr.w	r2, r2, #8
 80029c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6999      	ldr	r1, [r3, #24]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	619a      	str	r2, [r3, #24]
      break;
 80029ea:	e064      	b.n	8002ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fa30 	bl	8002e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6999      	ldr	r1, [r3, #24]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	021a      	lsls	r2, r3, #8
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	619a      	str	r2, [r3, #24]
      break;
 8002a2c:	e043      	b.n	8002ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fa79 	bl	8002f2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0208 	orr.w	r2, r2, #8
 8002a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0204 	bic.w	r2, r2, #4
 8002a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69d9      	ldr	r1, [r3, #28]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
      break;
 8002a6c:	e023      	b.n	8002ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fac3 	bl	8003000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	021a      	lsls	r2, r3, #8
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	61da      	str	r2, [r3, #28]
      break;
 8002aae:	e002      	b.n	8002ab6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e0b4      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x186>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b1c:	d03e      	beq.n	8002b9c <HAL_TIM_ConfigClockSource+0xd4>
 8002b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b22:	f200 8087 	bhi.w	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b2a:	f000 8086 	beq.w	8002c3a <HAL_TIM_ConfigClockSource+0x172>
 8002b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b32:	d87f      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
 8002b34:	2b70      	cmp	r3, #112	@ 0x70
 8002b36:	d01a      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0xa6>
 8002b38:	2b70      	cmp	r3, #112	@ 0x70
 8002b3a:	d87b      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
 8002b3c:	2b60      	cmp	r3, #96	@ 0x60
 8002b3e:	d050      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x11a>
 8002b40:	2b60      	cmp	r3, #96	@ 0x60
 8002b42:	d877      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b50      	cmp	r3, #80	@ 0x50
 8002b46:	d03c      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b48:	2b50      	cmp	r3, #80	@ 0x50
 8002b4a:	d873      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	d058      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x13a>
 8002b50:	2b40      	cmp	r3, #64	@ 0x40
 8002b52:	d86f      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b30      	cmp	r3, #48	@ 0x30
 8002b56:	d064      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x15a>
 8002b58:	2b30      	cmp	r3, #48	@ 0x30
 8002b5a:	d86b      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d060      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x15a>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d867      	bhi.n	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d05c      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x15a>
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d05a      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x15a>
 8002b6c:	e062      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b7e:	f000 fb04 	bl	800318a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	609a      	str	r2, [r3, #8]
      break;
 8002b9a:	e04f      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bac:	f000 faed 	bl	800318a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bbe:	609a      	str	r2, [r3, #8]
      break;
 8002bc0:	e03c      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f000 fa64 	bl	800309c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2150      	movs	r1, #80	@ 0x50
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fabb 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002be0:	e02c      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 fa82 	bl	80030f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2160      	movs	r1, #96	@ 0x60
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 faab 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002c00:	e01c      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f000 fa44 	bl	800309c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2140      	movs	r1, #64	@ 0x40
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fa9b 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002c20:	e00c      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f000 fa92 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002c32:	e003      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e000      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002d80 <TIM_Base_SetConfig+0xd0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <TIM_Base_SetConfig+0x30>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cce:	d007      	beq.n	8002ce0 <TIM_Base_SetConfig+0x30>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d84 <TIM_Base_SetConfig+0xd4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_Base_SetConfig+0x30>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a2b      	ldr	r2, [pc, #172]	@ (8002d88 <TIM_Base_SetConfig+0xd8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d108      	bne.n	8002cf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <TIM_Base_SetConfig+0xd0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00b      	beq.n	8002d12 <TIM_Base_SetConfig+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d00:	d007      	beq.n	8002d12 <TIM_Base_SetConfig+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <TIM_Base_SetConfig+0xd4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_Base_SetConfig+0x62>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <TIM_Base_SetConfig+0xd8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d108      	bne.n	8002d24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d80 <TIM_Base_SetConfig+0xd0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f023 0201 	bic.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	611a      	str	r2, [r3, #16]
  }
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40000800 	.word	0x40000800

08002d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 0201 	bic.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f023 0302 	bic.w	r3, r3, #2
 8002dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <TIM_OC1_SetConfig+0xc8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10c      	bne.n	8002e02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0308 	bic.w	r3, r3, #8
 8002dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <TIM_OC1_SetConfig+0xc8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	621a      	str	r2, [r3, #32]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40012c00 	.word	0x40012c00

08002e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 0210 	bic.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0320 	bic.w	r3, r3, #32
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <TIM_OC2_SetConfig+0xd0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10d      	bne.n	8002ed4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a14      	ldr	r2, [pc, #80]	@ (8002f28 <TIM_OC2_SetConfig+0xd0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d113      	bne.n	8002f04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	40012c00 	.word	0x40012c00

08002f2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	@ (8002ffc <TIM_OC3_SetConfig+0xd0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10d      	bne.n	8002fa6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a14      	ldr	r2, [pc, #80]	@ (8002ffc <TIM_OC3_SetConfig+0xd0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d113      	bne.n	8002fd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	621a      	str	r2, [r3, #32]
}
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40012c00 	.word	0x40012c00

08003000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800302e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800304a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	031b      	lsls	r3, r3, #12
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a0f      	ldr	r2, [pc, #60]	@ (8003098 <TIM_OC4_SetConfig+0x98>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d109      	bne.n	8003074 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00

0800309c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 030a 	bic.w	r3, r3, #10
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f023 0210 	bic.w	r2, r3, #16
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	031b      	lsls	r3, r3, #12
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003134:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	f043 0307 	orr.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	609a      	str	r2, [r3, #8]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800318a:	b480      	push	{r7}
 800318c:	b087      	sub	sp, #28
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	021a      	lsls	r2, r3, #8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	609a      	str	r2, [r3, #8]
}
 80031be:	bf00      	nop
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2201      	movs	r2, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a1a      	ldr	r2, [r3, #32]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	401a      	ands	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003224:	2302      	movs	r3, #2
 8003226:	e046      	b.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a16      	ldr	r2, [pc, #88]	@ (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003274:	d009      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a12      	ldr	r2, [pc, #72]	@ (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a10      	ldr	r2, [pc, #64]	@ (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10c      	bne.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4313      	orrs	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800

080032cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	460a      	mov	r2, r1
 80032fa:	71fb      	strb	r3, [r7, #7]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8003300:	2226      	movs	r2, #38	@ 0x26
 8003302:	2100      	movs	r1, #0
 8003304:	2078      	movs	r0, #120	@ 0x78
 8003306:	f000 fb0d 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800330a:	2200      	movs	r2, #0
 800330c:	2100      	movs	r1, #0
 800330e:	2078      	movs	r0, #120	@ 0x78
 8003310:	f000 fb08 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	461a      	mov	r2, r3
 8003318:	2100      	movs	r1, #0
 800331a:	2078      	movs	r0, #120	@ 0x78
 800331c:	f000 fb02 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8003320:	2200      	movs	r2, #0
 8003322:	2100      	movs	r1, #0
 8003324:	2078      	movs	r0, #120	@ 0x78
 8003326:	f000 fafd 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800332a:	79bb      	ldrb	r3, [r7, #6]
 800332c:	461a      	mov	r2, r3
 800332e:	2100      	movs	r1, #0
 8003330:	2078      	movs	r0, #120	@ 0x78
 8003332:	f000 faf7 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	2078      	movs	r0, #120	@ 0x78
 800333c:	f000 faf2 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8003340:	22ff      	movs	r2, #255	@ 0xff
 8003342:	2100      	movs	r1, #0
 8003344:	2078      	movs	r0, #120	@ 0x78
 8003346:	f000 faed 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800334a:	222f      	movs	r2, #47	@ 0x2f
 800334c:	2100      	movs	r1, #0
 800334e:	2078      	movs	r0, #120	@ 0x78
 8003350:	f000 fae8 	bl	8003924 <ssd1306_I2C_Write>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	460a      	mov	r2, r1
 8003366:	71fb      	strb	r3, [r7, #7]
 8003368:	4613      	mov	r3, r2
 800336a:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 800336c:	2227      	movs	r2, #39	@ 0x27
 800336e:	2100      	movs	r1, #0
 8003370:	2078      	movs	r0, #120	@ 0x78
 8003372:	f000 fad7 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8003376:	2200      	movs	r2, #0
 8003378:	2100      	movs	r1, #0
 800337a:	2078      	movs	r0, #120	@ 0x78
 800337c:	f000 fad2 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	461a      	mov	r2, r3
 8003384:	2100      	movs	r1, #0
 8003386:	2078      	movs	r0, #120	@ 0x78
 8003388:	f000 facc 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	2078      	movs	r0, #120	@ 0x78
 8003392:	f000 fac7 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8003396:	79bb      	ldrb	r3, [r7, #6]
 8003398:	461a      	mov	r2, r3
 800339a:	2100      	movs	r1, #0
 800339c:	2078      	movs	r0, #120	@ 0x78
 800339e:	f000 fac1 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	2078      	movs	r0, #120	@ 0x78
 80033a8:	f000 fabc 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80033ac:	22ff      	movs	r2, #255	@ 0xff
 80033ae:	2100      	movs	r1, #0
 80033b0:	2078      	movs	r0, #120	@ 0x78
 80033b2:	f000 fab7 	bl	8003924 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80033b6:	222f      	movs	r2, #47	@ 0x2f
 80033b8:	2100      	movs	r1, #0
 80033ba:	2078      	movs	r0, #120	@ 0x78
 80033bc:	f000 fab2 	bl	8003924 <ssd1306_I2C_Write>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80033cc:	222e      	movs	r2, #46	@ 0x2e
 80033ce:	2100      	movs	r1, #0
 80033d0:	2078      	movs	r0, #120	@ 0x78
 80033d2:	f000 faa7 	bl	8003924 <ssd1306_I2C_Write>
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80033e2:	f000 fa25 	bl	8003830 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80033e6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80033ea:	2201      	movs	r2, #1
 80033ec:	2178      	movs	r1, #120	@ 0x78
 80033ee:	485b      	ldr	r0, [pc, #364]	@ (800355c <SSD1306_Init+0x180>)
 80033f0:	f7fe f85c 	bl	80014ac <HAL_I2C_IsDeviceReady>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e0a9      	b.n	8003552 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80033fe:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003402:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003404:	e002      	b.n	800340c <SSD1306_Init+0x30>
		p--;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3b01      	subs	r3, #1
 800340a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f9      	bne.n	8003406 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003412:	22ae      	movs	r2, #174	@ 0xae
 8003414:	2100      	movs	r1, #0
 8003416:	2078      	movs	r0, #120	@ 0x78
 8003418:	f000 fa84 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800341c:	2220      	movs	r2, #32
 800341e:	2100      	movs	r1, #0
 8003420:	2078      	movs	r0, #120	@ 0x78
 8003422:	f000 fa7f 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003426:	2210      	movs	r2, #16
 8003428:	2100      	movs	r1, #0
 800342a:	2078      	movs	r0, #120	@ 0x78
 800342c:	f000 fa7a 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003430:	22b0      	movs	r2, #176	@ 0xb0
 8003432:	2100      	movs	r1, #0
 8003434:	2078      	movs	r0, #120	@ 0x78
 8003436:	f000 fa75 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800343a:	22c8      	movs	r2, #200	@ 0xc8
 800343c:	2100      	movs	r1, #0
 800343e:	2078      	movs	r0, #120	@ 0x78
 8003440:	f000 fa70 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003444:	2200      	movs	r2, #0
 8003446:	2100      	movs	r1, #0
 8003448:	2078      	movs	r0, #120	@ 0x78
 800344a:	f000 fa6b 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800344e:	2210      	movs	r2, #16
 8003450:	2100      	movs	r1, #0
 8003452:	2078      	movs	r0, #120	@ 0x78
 8003454:	f000 fa66 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003458:	2240      	movs	r2, #64	@ 0x40
 800345a:	2100      	movs	r1, #0
 800345c:	2078      	movs	r0, #120	@ 0x78
 800345e:	f000 fa61 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003462:	2281      	movs	r2, #129	@ 0x81
 8003464:	2100      	movs	r1, #0
 8003466:	2078      	movs	r0, #120	@ 0x78
 8003468:	f000 fa5c 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800346c:	22ff      	movs	r2, #255	@ 0xff
 800346e:	2100      	movs	r1, #0
 8003470:	2078      	movs	r0, #120	@ 0x78
 8003472:	f000 fa57 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003476:	22a1      	movs	r2, #161	@ 0xa1
 8003478:	2100      	movs	r1, #0
 800347a:	2078      	movs	r0, #120	@ 0x78
 800347c:	f000 fa52 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003480:	22a6      	movs	r2, #166	@ 0xa6
 8003482:	2100      	movs	r1, #0
 8003484:	2078      	movs	r0, #120	@ 0x78
 8003486:	f000 fa4d 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800348a:	22a8      	movs	r2, #168	@ 0xa8
 800348c:	2100      	movs	r1, #0
 800348e:	2078      	movs	r0, #120	@ 0x78
 8003490:	f000 fa48 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003494:	223f      	movs	r2, #63	@ 0x3f
 8003496:	2100      	movs	r1, #0
 8003498:	2078      	movs	r0, #120	@ 0x78
 800349a:	f000 fa43 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800349e:	22a4      	movs	r2, #164	@ 0xa4
 80034a0:	2100      	movs	r1, #0
 80034a2:	2078      	movs	r0, #120	@ 0x78
 80034a4:	f000 fa3e 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80034a8:	22d3      	movs	r2, #211	@ 0xd3
 80034aa:	2100      	movs	r1, #0
 80034ac:	2078      	movs	r0, #120	@ 0x78
 80034ae:	f000 fa39 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80034b2:	2200      	movs	r2, #0
 80034b4:	2100      	movs	r1, #0
 80034b6:	2078      	movs	r0, #120	@ 0x78
 80034b8:	f000 fa34 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80034bc:	22d5      	movs	r2, #213	@ 0xd5
 80034be:	2100      	movs	r1, #0
 80034c0:	2078      	movs	r0, #120	@ 0x78
 80034c2:	f000 fa2f 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80034c6:	22f0      	movs	r2, #240	@ 0xf0
 80034c8:	2100      	movs	r1, #0
 80034ca:	2078      	movs	r0, #120	@ 0x78
 80034cc:	f000 fa2a 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80034d0:	22d9      	movs	r2, #217	@ 0xd9
 80034d2:	2100      	movs	r1, #0
 80034d4:	2078      	movs	r0, #120	@ 0x78
 80034d6:	f000 fa25 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80034da:	2222      	movs	r2, #34	@ 0x22
 80034dc:	2100      	movs	r1, #0
 80034de:	2078      	movs	r0, #120	@ 0x78
 80034e0:	f000 fa20 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80034e4:	22da      	movs	r2, #218	@ 0xda
 80034e6:	2100      	movs	r1, #0
 80034e8:	2078      	movs	r0, #120	@ 0x78
 80034ea:	f000 fa1b 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80034ee:	2212      	movs	r2, #18
 80034f0:	2100      	movs	r1, #0
 80034f2:	2078      	movs	r0, #120	@ 0x78
 80034f4:	f000 fa16 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80034f8:	22db      	movs	r2, #219	@ 0xdb
 80034fa:	2100      	movs	r1, #0
 80034fc:	2078      	movs	r0, #120	@ 0x78
 80034fe:	f000 fa11 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003502:	2220      	movs	r2, #32
 8003504:	2100      	movs	r1, #0
 8003506:	2078      	movs	r0, #120	@ 0x78
 8003508:	f000 fa0c 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800350c:	228d      	movs	r2, #141	@ 0x8d
 800350e:	2100      	movs	r1, #0
 8003510:	2078      	movs	r0, #120	@ 0x78
 8003512:	f000 fa07 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003516:	2214      	movs	r2, #20
 8003518:	2100      	movs	r1, #0
 800351a:	2078      	movs	r0, #120	@ 0x78
 800351c:	f000 fa02 	bl	8003924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003520:	22af      	movs	r2, #175	@ 0xaf
 8003522:	2100      	movs	r1, #0
 8003524:	2078      	movs	r0, #120	@ 0x78
 8003526:	f000 f9fd 	bl	8003924 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800352a:	222e      	movs	r2, #46	@ 0x2e
 800352c:	2100      	movs	r1, #0
 800352e:	2078      	movs	r0, #120	@ 0x78
 8003530:	f000 f9f8 	bl	8003924 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003534:	2000      	movs	r0, #0
 8003536:	f000 f843 	bl	80035c0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800353a:	f000 f813 	bl	8003564 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <SSD1306_Init+0x184>)
 8003540:	2200      	movs	r2, #0
 8003542:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <SSD1306_Init+0x184>)
 8003546:	2200      	movs	r2, #0
 8003548:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800354a:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <SSD1306_Init+0x184>)
 800354c:	2201      	movs	r2, #1
 800354e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003550:	2301      	movs	r3, #1
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000030 	.word	0x20000030
 8003560:	20000560 	.word	0x20000560

08003564 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800356a:	2300      	movs	r3, #0
 800356c:	71fb      	strb	r3, [r7, #7]
 800356e:	e01d      	b.n	80035ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	3b50      	subs	r3, #80	@ 0x50
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	2100      	movs	r1, #0
 800357a:	2078      	movs	r0, #120	@ 0x78
 800357c:	f000 f9d2 	bl	8003924 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003580:	2200      	movs	r2, #0
 8003582:	2100      	movs	r1, #0
 8003584:	2078      	movs	r0, #120	@ 0x78
 8003586:	f000 f9cd 	bl	8003924 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800358a:	2210      	movs	r2, #16
 800358c:	2100      	movs	r1, #0
 800358e:	2078      	movs	r0, #120	@ 0x78
 8003590:	f000 f9c8 	bl	8003924 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	01db      	lsls	r3, r3, #7
 8003598:	4a08      	ldr	r2, [pc, #32]	@ (80035bc <SSD1306_UpdateScreen+0x58>)
 800359a:	441a      	add	r2, r3
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	2140      	movs	r1, #64	@ 0x40
 80035a0:	2078      	movs	r0, #120	@ 0x78
 80035a2:	f000 f959 	bl	8003858 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	3301      	adds	r3, #1
 80035aa:	71fb      	strb	r3, [r7, #7]
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b07      	cmp	r3, #7
 80035b0:	d9de      	bls.n	8003570 <SSD1306_UpdateScreen+0xc>
	}
}
 80035b2:	bf00      	nop
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000160 	.word	0x20000160

080035c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <SSD1306_Fill+0x14>
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <SSD1306_Fill+0x16>
 80035d4:	23ff      	movs	r3, #255	@ 0xff
 80035d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035da:	4619      	mov	r1, r3
 80035dc:	4803      	ldr	r0, [pc, #12]	@ (80035ec <SSD1306_Fill+0x2c>)
 80035de:	f000 fa1b 	bl	8003a18 <memset>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000160 	.word	0x20000160

080035f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
 80035fa:	460b      	mov	r3, r1
 80035fc:	80bb      	strh	r3, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	70fb      	strb	r3, [r7, #3]
	if (
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	2b7f      	cmp	r3, #127	@ 0x7f
 8003606:	d848      	bhi.n	800369a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003608:	88bb      	ldrh	r3, [r7, #4]
 800360a:	2b3f      	cmp	r3, #63	@ 0x3f
 800360c:	d845      	bhi.n	800369a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800360e:	4b25      	ldr	r3, [pc, #148]	@ (80036a4 <SSD1306_DrawPixel+0xb4>)
 8003610:	791b      	ldrb	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d11a      	bne.n	8003660 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	88bb      	ldrh	r3, [r7, #4]
 800362e:	08db      	lsrs	r3, r3, #3
 8003630:	b298      	uxth	r0, r3
 8003632:	4603      	mov	r3, r0
 8003634:	01db      	lsls	r3, r3, #7
 8003636:	4413      	add	r3, r2
 8003638:	4a1b      	ldr	r2, [pc, #108]	@ (80036a8 <SSD1306_DrawPixel+0xb8>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	b25a      	sxtb	r2, r3
 800363e:	88bb      	ldrh	r3, [r7, #4]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	b25b      	sxtb	r3, r3
 800364c:	4313      	orrs	r3, r2
 800364e:	b259      	sxtb	r1, r3
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	4603      	mov	r3, r0
 8003654:	01db      	lsls	r3, r3, #7
 8003656:	4413      	add	r3, r2
 8003658:	b2c9      	uxtb	r1, r1
 800365a:	4a13      	ldr	r2, [pc, #76]	@ (80036a8 <SSD1306_DrawPixel+0xb8>)
 800365c:	54d1      	strb	r1, [r2, r3]
 800365e:	e01d      	b.n	800369c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	88bb      	ldrh	r3, [r7, #4]
 8003664:	08db      	lsrs	r3, r3, #3
 8003666:	b298      	uxth	r0, r3
 8003668:	4603      	mov	r3, r0
 800366a:	01db      	lsls	r3, r3, #7
 800366c:	4413      	add	r3, r2
 800366e:	4a0e      	ldr	r2, [pc, #56]	@ (80036a8 <SSD1306_DrawPixel+0xb8>)
 8003670:	5cd3      	ldrb	r3, [r2, r3]
 8003672:	b25a      	sxtb	r2, r3
 8003674:	88bb      	ldrh	r3, [r7, #4]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	2101      	movs	r1, #1
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	b25b      	sxtb	r3, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	b25b      	sxtb	r3, r3
 8003686:	4013      	ands	r3, r2
 8003688:	b259      	sxtb	r1, r3
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	4603      	mov	r3, r0
 800368e:	01db      	lsls	r3, r3, #7
 8003690:	4413      	add	r3, r2
 8003692:	b2c9      	uxtb	r1, r1
 8003694:	4a04      	ldr	r2, [pc, #16]	@ (80036a8 <SSD1306_DrawPixel+0xb8>)
 8003696:	54d1      	strb	r1, [r2, r3]
 8003698:	e000      	b.n	800369c <SSD1306_DrawPixel+0xac>
		return;
 800369a:	bf00      	nop
	}
}
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	20000560 	.word	0x20000560
 80036a8:	20000160 	.word	0x20000160

080036ac <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	460a      	mov	r2, r1
 80036b6:	80fb      	strh	r3, [r7, #6]
 80036b8:	4613      	mov	r3, r2
 80036ba:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80036bc:	4a05      	ldr	r2, [pc, #20]	@ (80036d4 <SSD1306_GotoXY+0x28>)
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80036c2:	4a04      	ldr	r2, [pc, #16]	@ (80036d4 <SSD1306_GotoXY+0x28>)
 80036c4:	88bb      	ldrh	r3, [r7, #4]
 80036c6:	8053      	strh	r3, [r2, #2]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000560 	.word	0x20000560

080036d8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
 80036e4:	4613      	mov	r3, r2
 80036e6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <SSD1306_Putc+0xf8>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	4413      	add	r3, r2
	if (
 80036f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80036f6:	dc07      	bgt.n	8003708 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80036f8:	4b35      	ldr	r3, [pc, #212]	@ (80037d0 <SSD1306_Putc+0xf8>)
 80036fa:	885b      	ldrh	r3, [r3, #2]
 80036fc:	461a      	mov	r2, r3
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	785b      	ldrb	r3, [r3, #1]
 8003702:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003704:	2b3f      	cmp	r3, #63	@ 0x3f
 8003706:	dd01      	ble.n	800370c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003708:	2300      	movs	r3, #0
 800370a:	e05d      	b.n	80037c8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e04b      	b.n	80037aa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	3b20      	subs	r3, #32
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	7849      	ldrb	r1, [r1, #1]
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4619      	mov	r1, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	440b      	add	r3, r1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	e030      	b.n	8003798 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d010      	beq.n	8003768 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003746:	4b22      	ldr	r3, [pc, #136]	@ (80037d0 <SSD1306_Putc+0xf8>)
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	b29b      	uxth	r3, r3
 800374e:	4413      	add	r3, r2
 8003750:	b298      	uxth	r0, r3
 8003752:	4b1f      	ldr	r3, [pc, #124]	@ (80037d0 <SSD1306_Putc+0xf8>)
 8003754:	885a      	ldrh	r2, [r3, #2]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	b29b      	uxth	r3, r3
 800375a:	4413      	add	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	79ba      	ldrb	r2, [r7, #6]
 8003760:	4619      	mov	r1, r3
 8003762:	f7ff ff45 	bl	80035f0 <SSD1306_DrawPixel>
 8003766:	e014      	b.n	8003792 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003768:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <SSD1306_Putc+0xf8>)
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	b29b      	uxth	r3, r3
 8003770:	4413      	add	r3, r2
 8003772:	b298      	uxth	r0, r3
 8003774:	4b16      	ldr	r3, [pc, #88]	@ (80037d0 <SSD1306_Putc+0xf8>)
 8003776:	885a      	ldrh	r2, [r3, #2]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	b29b      	uxth	r3, r3
 800377c:	4413      	add	r3, r2
 800377e:	b299      	uxth	r1, r3
 8003780:	79bb      	ldrb	r3, [r7, #6]
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	f7ff ff2f 	bl	80035f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	3301      	adds	r3, #1
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d3c8      	bcc.n	8003736 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	461a      	mov	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d3ad      	bcc.n	8003712 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80037b6:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <SSD1306_Putc+0xf8>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <SSD1306_Putc+0xf8>)
 80037c4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80037c6:	79fb      	ldrb	r3, [r7, #7]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000560 	.word	0x20000560

080037d4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80037e2:	e012      	b.n	800380a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	79fa      	ldrb	r2, [r7, #7]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff73 	bl	80036d8 <SSD1306_Putc>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d002      	beq.n	8003804 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	e008      	b.n	8003816 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e8      	bne.n	80037e4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	781b      	ldrb	r3, [r3, #0]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003822:	2000      	movs	r0, #0
 8003824:	f7ff fecc 	bl	80035c0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003828:	f7ff fe9c 	bl	8003564 <SSD1306_UpdateScreen>
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003836:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <ssd1306_I2C_Init+0x24>)
 8003838:	607b      	str	r3, [r7, #4]
	while(p>0)
 800383a:	e002      	b.n	8003842 <ssd1306_I2C_Init+0x12>
		p--;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f9      	bne.n	800383c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	0003d090 	.word	0x0003d090

08003858 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b0c7      	sub	sp, #284	@ 0x11c
 800385c:	af02      	add	r7, sp, #8
 800385e:	4604      	mov	r4, r0
 8003860:	4608      	mov	r0, r1
 8003862:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003866:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800386a:	600a      	str	r2, [r1, #0]
 800386c:	4619      	mov	r1, r3
 800386e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003872:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003876:	4622      	mov	r2, r4
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800387e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003882:	4602      	mov	r2, r0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800388a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800388e:	460a      	mov	r2, r1
 8003890:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003892:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800389a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800389e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80038ac:	e015      	b.n	80038da <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80038ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80038b2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80038b6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	441a      	add	r2, r3
 80038be:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80038c2:	3301      	adds	r3, #1
 80038c4:	7811      	ldrb	r1, [r2, #0]
 80038c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80038ca:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80038ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80038d0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80038d4:	3301      	adds	r3, #1
 80038d6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80038da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80038e4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d8df      	bhi.n	80038ae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80038ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038f2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b299      	uxth	r1, r3
 80038fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	b29b      	uxth	r3, r3
 8003908:	f107 020c 	add.w	r2, r7, #12
 800390c:	200a      	movs	r0, #10
 800390e:	9000      	str	r0, [sp, #0]
 8003910:	4803      	ldr	r0, [pc, #12]	@ (8003920 <ssd1306_I2C_WriteMulti+0xc8>)
 8003912:	f7fd fccd 	bl	80012b0 <HAL_I2C_Master_Transmit>
}
 8003916:	bf00      	nop
 8003918:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800391c:	46bd      	mov	sp, r7
 800391e:	bd90      	pop	{r4, r7, pc}
 8003920:	20000030 	.word	0x20000030

08003924 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af02      	add	r7, sp, #8
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
 800392e:	460b      	mov	r3, r1
 8003930:	71bb      	strb	r3, [r7, #6]
 8003932:	4613      	mov	r3, r2
 8003934:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800393a:	797b      	ldrb	r3, [r7, #5]
 800393c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	b299      	uxth	r1, r3
 8003942:	f107 020c 	add.w	r2, r7, #12
 8003946:	230a      	movs	r3, #10
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2302      	movs	r3, #2
 800394c:	4803      	ldr	r0, [pc, #12]	@ (800395c <ssd1306_I2C_Write+0x38>)
 800394e:	f7fd fcaf 	bl	80012b0 <HAL_I2C_Master_Transmit>
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000030 	.word	0x20000030

08003960 <__itoa>:
 8003960:	1e93      	subs	r3, r2, #2
 8003962:	2b22      	cmp	r3, #34	@ 0x22
 8003964:	b510      	push	{r4, lr}
 8003966:	460c      	mov	r4, r1
 8003968:	d904      	bls.n	8003974 <__itoa+0x14>
 800396a:	2300      	movs	r3, #0
 800396c:	461c      	mov	r4, r3
 800396e:	700b      	strb	r3, [r1, #0]
 8003970:	4620      	mov	r0, r4
 8003972:	bd10      	pop	{r4, pc}
 8003974:	2a0a      	cmp	r2, #10
 8003976:	d109      	bne.n	800398c <__itoa+0x2c>
 8003978:	2800      	cmp	r0, #0
 800397a:	da07      	bge.n	800398c <__itoa+0x2c>
 800397c:	232d      	movs	r3, #45	@ 0x2d
 800397e:	700b      	strb	r3, [r1, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	4240      	negs	r0, r0
 8003984:	4421      	add	r1, r4
 8003986:	f000 f805 	bl	8003994 <__utoa>
 800398a:	e7f1      	b.n	8003970 <__itoa+0x10>
 800398c:	2100      	movs	r1, #0
 800398e:	e7f9      	b.n	8003984 <__itoa+0x24>

08003990 <itoa>:
 8003990:	f7ff bfe6 	b.w	8003960 <__itoa>

08003994 <__utoa>:
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003996:	b08b      	sub	sp, #44	@ 0x2c
 8003998:	4605      	mov	r5, r0
 800399a:	460b      	mov	r3, r1
 800399c:	466e      	mov	r6, sp
 800399e:	4c1d      	ldr	r4, [pc, #116]	@ (8003a14 <__utoa+0x80>)
 80039a0:	f104 0c20 	add.w	ip, r4, #32
 80039a4:	4637      	mov	r7, r6
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	6861      	ldr	r1, [r4, #4]
 80039aa:	3408      	adds	r4, #8
 80039ac:	c703      	stmia	r7!, {r0, r1}
 80039ae:	4564      	cmp	r4, ip
 80039b0:	463e      	mov	r6, r7
 80039b2:	d1f7      	bne.n	80039a4 <__utoa+0x10>
 80039b4:	7921      	ldrb	r1, [r4, #4]
 80039b6:	6820      	ldr	r0, [r4, #0]
 80039b8:	7139      	strb	r1, [r7, #4]
 80039ba:	1e91      	subs	r1, r2, #2
 80039bc:	2922      	cmp	r1, #34	@ 0x22
 80039be:	6038      	str	r0, [r7, #0]
 80039c0:	f04f 0100 	mov.w	r1, #0
 80039c4:	d904      	bls.n	80039d0 <__utoa+0x3c>
 80039c6:	7019      	strb	r1, [r3, #0]
 80039c8:	460b      	mov	r3, r1
 80039ca:	4618      	mov	r0, r3
 80039cc:	b00b      	add	sp, #44	@ 0x2c
 80039ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d0:	1e58      	subs	r0, r3, #1
 80039d2:	4684      	mov	ip, r0
 80039d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80039d8:	fb02 5617 	mls	r6, r2, r7, r5
 80039dc:	3628      	adds	r6, #40	@ 0x28
 80039de:	446e      	add	r6, sp
 80039e0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80039e4:	460c      	mov	r4, r1
 80039e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80039ea:	462e      	mov	r6, r5
 80039ec:	42b2      	cmp	r2, r6
 80039ee:	463d      	mov	r5, r7
 80039f0:	f101 0101 	add.w	r1, r1, #1
 80039f4:	d9ee      	bls.n	80039d4 <__utoa+0x40>
 80039f6:	2200      	movs	r2, #0
 80039f8:	545a      	strb	r2, [r3, r1]
 80039fa:	1919      	adds	r1, r3, r4
 80039fc:	1aa5      	subs	r5, r4, r2
 80039fe:	42aa      	cmp	r2, r5
 8003a00:	dae3      	bge.n	80039ca <__utoa+0x36>
 8003a02:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003a06:	780e      	ldrb	r6, [r1, #0]
 8003a08:	3201      	adds	r2, #1
 8003a0a:	7006      	strb	r6, [r0, #0]
 8003a0c:	f801 5901 	strb.w	r5, [r1], #-1
 8003a10:	e7f4      	b.n	80039fc <__utoa+0x68>
 8003a12:	bf00      	nop
 8003a14:	08004830 	.word	0x08004830

08003a18 <memset>:
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4402      	add	r2, r0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	f803 1b01 	strb.w	r1, [r3], #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <__libc_init_array>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	2600      	movs	r6, #0
 8003a2c:	4d0c      	ldr	r5, [pc, #48]	@ (8003a60 <__libc_init_array+0x38>)
 8003a2e:	4c0d      	ldr	r4, [pc, #52]	@ (8003a64 <__libc_init_array+0x3c>)
 8003a30:	1b64      	subs	r4, r4, r5
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	42a6      	cmp	r6, r4
 8003a36:	d109      	bne.n	8003a4c <__libc_init_array+0x24>
 8003a38:	f000 f81a 	bl	8003a70 <_init>
 8003a3c:	2600      	movs	r6, #0
 8003a3e:	4d0a      	ldr	r5, [pc, #40]	@ (8003a68 <__libc_init_array+0x40>)
 8003a40:	4c0a      	ldr	r4, [pc, #40]	@ (8003a6c <__libc_init_array+0x44>)
 8003a42:	1b64      	subs	r4, r4, r5
 8003a44:	10a4      	asrs	r4, r4, #2
 8003a46:	42a6      	cmp	r6, r4
 8003a48:	d105      	bne.n	8003a56 <__libc_init_array+0x2e>
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}
 8003a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a50:	4798      	blx	r3
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7ee      	b.n	8003a34 <__libc_init_array+0xc>
 8003a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5a:	4798      	blx	r3
 8003a5c:	3601      	adds	r6, #1
 8003a5e:	e7f2      	b.n	8003a46 <__libc_init_array+0x1e>
 8003a60:	08004858 	.word	0x08004858
 8003a64:	08004858 	.word	0x08004858
 8003a68:	08004858 	.word	0x08004858
 8003a6c:	0800485c 	.word	0x0800485c

08003a70 <_init>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr

08003a7c <_fini>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	bf00      	nop
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr
