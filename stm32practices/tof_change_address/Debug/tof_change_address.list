
tof_change_address.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a94  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  08004ba4  08004ba4  00005ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  080059b0  080059b0  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059b0  080059b0  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059b4  080059b4  000069b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080059b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  2000006c  08005a24  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08005a24  00007638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008134  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aaa  00000000  00000000  0000f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00010c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c6  00000000  00000000  00011558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173a5  00000000  00000000  00011c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4fc  00000000  00000000  00028fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083657  00000000  00000000  000344bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7b16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000b7b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ba69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b8c 	.word	0x08004b8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08004b8c 	.word	0x08004b8c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_fmul>:
 80005d8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e0:	bf1e      	ittt	ne
 80005e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005e6:	ea92 0f0c 	teqne	r2, ip
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d06f      	beq.n	80006d0 <__aeabi_fmul+0xf8>
 80005f0:	441a      	add	r2, r3
 80005f2:	ea80 0c01 	eor.w	ip, r0, r1
 80005f6:	0240      	lsls	r0, r0, #9
 80005f8:	bf18      	it	ne
 80005fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80005fe:	d01e      	beq.n	800063e <__aeabi_fmul+0x66>
 8000600:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000604:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000608:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800060c:	fba0 3101 	umull	r3, r1, r0, r1
 8000610:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000614:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000618:	bf3e      	ittt	cc
 800061a:	0049      	lslcc	r1, r1, #1
 800061c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000620:	005b      	lslcc	r3, r3, #1
 8000622:	ea40 0001 	orr.w	r0, r0, r1
 8000626:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800062a:	2afd      	cmp	r2, #253	@ 0xfd
 800062c:	d81d      	bhi.n	800066a <__aeabi_fmul+0x92>
 800062e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000632:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000636:	bf08      	it	eq
 8000638:	f020 0001 	biceq.w	r0, r0, #1
 800063c:	4770      	bx	lr
 800063e:	f090 0f00 	teq	r0, #0
 8000642:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	0249      	lsleq	r1, r1, #9
 800064a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800064e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000652:	3a7f      	subs	r2, #127	@ 0x7f
 8000654:	bfc2      	ittt	gt
 8000656:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800065a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800065e:	4770      	bxgt	lr
 8000660:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	3a01      	subs	r2, #1
 800066a:	dc5d      	bgt.n	8000728 <__aeabi_fmul+0x150>
 800066c:	f112 0f19 	cmn.w	r2, #25
 8000670:	bfdc      	itt	le
 8000672:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000676:	4770      	bxle	lr
 8000678:	f1c2 0200 	rsb	r2, r2, #0
 800067c:	0041      	lsls	r1, r0, #1
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	f1c2 0220 	rsb	r2, r2, #32
 8000686:	fa00 fc02 	lsl.w	ip, r0, r2
 800068a:	ea5f 0031 	movs.w	r0, r1, rrx
 800068e:	f140 0000 	adc.w	r0, r0, #0
 8000692:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000696:	bf08      	it	eq
 8000698:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800069c:	4770      	bx	lr
 800069e:	f092 0f00 	teq	r2, #0
 80006a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80006a6:	bf02      	ittt	eq
 80006a8:	0040      	lsleq	r0, r0, #1
 80006aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80006ae:	3a01      	subeq	r2, #1
 80006b0:	d0f9      	beq.n	80006a6 <__aeabi_fmul+0xce>
 80006b2:	ea40 000c 	orr.w	r0, r0, ip
 80006b6:	f093 0f00 	teq	r3, #0
 80006ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80006be:	bf02      	ittt	eq
 80006c0:	0049      	lsleq	r1, r1, #1
 80006c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80006c6:	3b01      	subeq	r3, #1
 80006c8:	d0f9      	beq.n	80006be <__aeabi_fmul+0xe6>
 80006ca:	ea41 010c 	orr.w	r1, r1, ip
 80006ce:	e78f      	b.n	80005f0 <__aeabi_fmul+0x18>
 80006d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006d4:	ea92 0f0c 	teq	r2, ip
 80006d8:	bf18      	it	ne
 80006da:	ea93 0f0c 	teqne	r3, ip
 80006de:	d00a      	beq.n	80006f6 <__aeabi_fmul+0x11e>
 80006e0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006e4:	bf18      	it	ne
 80006e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006ea:	d1d8      	bne.n	800069e <__aeabi_fmul+0xc6>
 80006ec:	ea80 0001 	eor.w	r0, r0, r1
 80006f0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80006f4:	4770      	bx	lr
 80006f6:	f090 0f00 	teq	r0, #0
 80006fa:	bf17      	itett	ne
 80006fc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000700:	4608      	moveq	r0, r1
 8000702:	f091 0f00 	teqne	r1, #0
 8000706:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800070a:	d014      	beq.n	8000736 <__aeabi_fmul+0x15e>
 800070c:	ea92 0f0c 	teq	r2, ip
 8000710:	d101      	bne.n	8000716 <__aeabi_fmul+0x13e>
 8000712:	0242      	lsls	r2, r0, #9
 8000714:	d10f      	bne.n	8000736 <__aeabi_fmul+0x15e>
 8000716:	ea93 0f0c 	teq	r3, ip
 800071a:	d103      	bne.n	8000724 <__aeabi_fmul+0x14c>
 800071c:	024b      	lsls	r3, r1, #9
 800071e:	bf18      	it	ne
 8000720:	4608      	movne	r0, r1
 8000722:	d108      	bne.n	8000736 <__aeabi_fmul+0x15e>
 8000724:	ea80 0001 	eor.w	r0, r0, r1
 8000728:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000730:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000734:	4770      	bx	lr
 8000736:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800073a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800073e:	4770      	bx	lr

08000740 <__aeabi_fdiv>:
 8000740:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000744:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000748:	bf1e      	ittt	ne
 800074a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800074e:	ea92 0f0c 	teqne	r2, ip
 8000752:	ea93 0f0c 	teqne	r3, ip
 8000756:	d069      	beq.n	800082c <__aeabi_fdiv+0xec>
 8000758:	eba2 0203 	sub.w	r2, r2, r3
 800075c:	ea80 0c01 	eor.w	ip, r0, r1
 8000760:	0249      	lsls	r1, r1, #9
 8000762:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000766:	d037      	beq.n	80007d8 <__aeabi_fdiv+0x98>
 8000768:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800076c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000770:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000774:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000778:	428b      	cmp	r3, r1
 800077a:	bf38      	it	cc
 800077c:	005b      	lslcc	r3, r3, #1
 800077e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000782:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000786:	428b      	cmp	r3, r1
 8000788:	bf24      	itt	cs
 800078a:	1a5b      	subcs	r3, r3, r1
 800078c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000790:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000794:	bf24      	itt	cs
 8000796:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800079a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800079e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80007a2:	bf24      	itt	cs
 80007a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80007a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80007b0:	bf24      	itt	cs
 80007b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80007b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	bf18      	it	ne
 80007be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80007c2:	d1e0      	bne.n	8000786 <__aeabi_fdiv+0x46>
 80007c4:	2afd      	cmp	r2, #253	@ 0xfd
 80007c6:	f63f af50 	bhi.w	800066a <__aeabi_fmul+0x92>
 80007ca:	428b      	cmp	r3, r1
 80007cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007d0:	bf08      	it	eq
 80007d2:	f020 0001 	biceq.w	r0, r0, #1
 80007d6:	4770      	bx	lr
 80007d8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80007dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e0:	327f      	adds	r2, #127	@ 0x7f
 80007e2:	bfc2      	ittt	gt
 80007e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80007e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007ec:	4770      	bxgt	lr
 80007ee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	3a01      	subs	r2, #1
 80007f8:	e737      	b.n	800066a <__aeabi_fmul+0x92>
 80007fa:	f092 0f00 	teq	r2, #0
 80007fe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000802:	bf02      	ittt	eq
 8000804:	0040      	lsleq	r0, r0, #1
 8000806:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800080a:	3a01      	subeq	r2, #1
 800080c:	d0f9      	beq.n	8000802 <__aeabi_fdiv+0xc2>
 800080e:	ea40 000c 	orr.w	r0, r0, ip
 8000812:	f093 0f00 	teq	r3, #0
 8000816:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800081a:	bf02      	ittt	eq
 800081c:	0049      	lsleq	r1, r1, #1
 800081e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000822:	3b01      	subeq	r3, #1
 8000824:	d0f9      	beq.n	800081a <__aeabi_fdiv+0xda>
 8000826:	ea41 010c 	orr.w	r1, r1, ip
 800082a:	e795      	b.n	8000758 <__aeabi_fdiv+0x18>
 800082c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000830:	ea92 0f0c 	teq	r2, ip
 8000834:	d108      	bne.n	8000848 <__aeabi_fdiv+0x108>
 8000836:	0242      	lsls	r2, r0, #9
 8000838:	f47f af7d 	bne.w	8000736 <__aeabi_fmul+0x15e>
 800083c:	ea93 0f0c 	teq	r3, ip
 8000840:	f47f af70 	bne.w	8000724 <__aeabi_fmul+0x14c>
 8000844:	4608      	mov	r0, r1
 8000846:	e776      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000848:	ea93 0f0c 	teq	r3, ip
 800084c:	d104      	bne.n	8000858 <__aeabi_fdiv+0x118>
 800084e:	024b      	lsls	r3, r1, #9
 8000850:	f43f af4c 	beq.w	80006ec <__aeabi_fmul+0x114>
 8000854:	4608      	mov	r0, r1
 8000856:	e76e      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000858:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800085c:	bf18      	it	ne
 800085e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000862:	d1ca      	bne.n	80007fa <__aeabi_fdiv+0xba>
 8000864:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000868:	f47f af5c 	bne.w	8000724 <__aeabi_fmul+0x14c>
 800086c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000870:	f47f af3c 	bne.w	80006ec <__aeabi_fmul+0x114>
 8000874:	e75f      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000876:	bf00      	nop

08000878 <__gesf2>:
 8000878:	f04f 3cff 	mov.w	ip, #4294967295
 800087c:	e006      	b.n	800088c <__cmpsf2+0x4>
 800087e:	bf00      	nop

08000880 <__lesf2>:
 8000880:	f04f 0c01 	mov.w	ip, #1
 8000884:	e002      	b.n	800088c <__cmpsf2+0x4>
 8000886:	bf00      	nop

08000888 <__cmpsf2>:
 8000888:	f04f 0c01 	mov.w	ip, #1
 800088c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000890:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000894:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000898:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800089c:	bf18      	it	ne
 800089e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008a2:	d011      	beq.n	80008c8 <__cmpsf2+0x40>
 80008a4:	b001      	add	sp, #4
 80008a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80008aa:	bf18      	it	ne
 80008ac:	ea90 0f01 	teqne	r0, r1
 80008b0:	bf58      	it	pl
 80008b2:	ebb2 0003 	subspl.w	r0, r2, r3
 80008b6:	bf88      	it	hi
 80008b8:	17c8      	asrhi	r0, r1, #31
 80008ba:	bf38      	it	cc
 80008bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80008c0:	bf18      	it	ne
 80008c2:	f040 0001 	orrne.w	r0, r0, #1
 80008c6:	4770      	bx	lr
 80008c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008cc:	d102      	bne.n	80008d4 <__cmpsf2+0x4c>
 80008ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80008d2:	d105      	bne.n	80008e0 <__cmpsf2+0x58>
 80008d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80008d8:	d1e4      	bne.n	80008a4 <__cmpsf2+0x1c>
 80008da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80008de:	d0e1      	beq.n	80008a4 <__cmpsf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cfrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4608      	mov	r0, r1
 80008ec:	4661      	mov	r1, ip
 80008ee:	e7ff      	b.n	80008f0 <__aeabi_cfcmpeq>

080008f0 <__aeabi_cfcmpeq>:
 80008f0:	b50f      	push	{r0, r1, r2, r3, lr}
 80008f2:	f7ff ffc9 	bl	8000888 <__cmpsf2>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	bf48      	it	mi
 80008fa:	f110 0f00 	cmnmi.w	r0, #0
 80008fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000900 <__aeabi_fcmpeq>:
 8000900:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000904:	f7ff fff4 	bl	80008f0 <__aeabi_cfcmpeq>
 8000908:	bf0c      	ite	eq
 800090a:	2001      	moveq	r0, #1
 800090c:	2000      	movne	r0, #0
 800090e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000912:	bf00      	nop

08000914 <__aeabi_fcmplt>:
 8000914:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000918:	f7ff ffea 	bl	80008f0 <__aeabi_cfcmpeq>
 800091c:	bf34      	ite	cc
 800091e:	2001      	movcc	r0, #1
 8000920:	2000      	movcs	r0, #0
 8000922:	f85d fb08 	ldr.w	pc, [sp], #8
 8000926:	bf00      	nop

08000928 <__aeabi_fcmple>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff ffe0 	bl	80008f0 <__aeabi_cfcmpeq>
 8000930:	bf94      	ite	ls
 8000932:	2001      	movls	r0, #1
 8000934:	2000      	movhi	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_fcmpge>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffd2 	bl	80008e8 <__aeabi_cfrcmple>
 8000944:	bf94      	ite	ls
 8000946:	2001      	movls	r0, #1
 8000948:	2000      	movhi	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_fcmpgt>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffc8 	bl	80008e8 <__aeabi_cfrcmple>
 8000958:	bf34      	ite	cc
 800095a:	2001      	movcc	r0, #1
 800095c:	2000      	movcs	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_f2uiz>:
 8000964:	0042      	lsls	r2, r0, #1
 8000966:	d20e      	bcs.n	8000986 <__aeabi_f2uiz+0x22>
 8000968:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800096c:	d30b      	bcc.n	8000986 <__aeabi_f2uiz+0x22>
 800096e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000972:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000976:	d409      	bmi.n	800098c <__aeabi_f2uiz+0x28>
 8000978:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800097c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000980:	fa23 f002 	lsr.w	r0, r3, r2
 8000984:	4770      	bx	lr
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	4770      	bx	lr
 800098c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000990:	d101      	bne.n	8000996 <__aeabi_f2uiz+0x32>
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	d102      	bne.n	800099c <__aeabi_f2uiz+0x38>
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <millis>:
// PLL_period_ps = 1655; macro_period_vclks = 2304
#define calcMacroPeriod(vcsel_period_pclks) ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000)

uint32_t measurement_timing_budget_us;

uint32_t millis(){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
	uint32_t st=HAL_GetTick();
 80009aa:	f001 fc37 	bl	800221c <HAL_GetTick>
 80009ae:	6078      	str	r0, [r7, #4]
	return st;
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <writeReg>:

// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	4603      	mov	r3, r0
 80009c4:	460a      	mov	r2, r1
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	71bb      	strb	r3, [r7, #6]
	uint8_t array[2];
	array[0]=reg;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	733b      	strb	r3, [r7, #12]
	array[1]=value;
 80009d0:	79bb      	ldrb	r3, [r7, #6]
 80009d2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,2,HAL_MAX_DELAY);
 80009d4:	f107 020c 	add.w	r2, r7, #12
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2302      	movs	r3, #2
 80009e0:	2152      	movs	r1, #82	@ 0x52
 80009e2:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <writeReg+0x34>)
 80009e4:	f001 fff4 	bl	80029d0 <HAL_I2C_Master_Transmit>

}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000008c 	.word	0x2000008c

080009f4 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	80bb      	strh	r3, [r7, #4]
	uint8_t array[3];
	array[0]=reg;
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	733b      	strb	r3, [r7, #12]
	array[1]=(value >> 8) & 0xFF;
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	737b      	strb	r3, [r7, #13]
	array[2]= value  & 0xFF;
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,3,HAL_MAX_DELAY);
 8000a18:	f107 020c 	add.w	r2, r7, #12
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2303      	movs	r3, #3
 8000a24:	2152      	movs	r1, #82	@ 0x52
 8000a26:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <writeReg16Bit+0x40>)
 8000a28:	f001 ffd2 	bl	80029d0 <HAL_I2C_Master_Transmit>
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000008c 	.word	0x2000008c

08000a38 <readReg>:
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,5,HAL_MAX_DELAY);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
 	uint8_t array[1];
 	uint8_t data[1];
	array[0]=reg;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,1,HAL_MAX_DELAY);
 8000a46:	f107 020c 	add.w	r2, r7, #12
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	2152      	movs	r1, #82	@ 0x52
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <readReg+0x44>)
 8000a56:	f001 ffbb 	bl	80029d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,data,1,HAL_MAX_DELAY);
 8000a5a:	f107 0208 	add.w	r2, r7, #8
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2301      	movs	r3, #1
 8000a66:	2152      	movs	r1, #82	@ 0x52
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <readReg+0x44>)
 8000a6a:	f002 f8af 	bl	8002bcc <HAL_I2C_Master_Receive>
	value=data[0];
 8000a6e:	7a3b      	ldrb	r3, [r7, #8]
 8000a70:	73fb      	strb	r3, [r7, #15]
  return value;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000008c 	.word	0x2000008c

08000a80 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	uint16_t value;
	uint8_t array[1];
	uint8_t data[2];
	array[0]=reg;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,1,HAL_MAX_DELAY);
 8000a8e:	f107 020c 	add.w	r2, r7, #12
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	2152      	movs	r1, #82	@ 0x52
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <readReg16Bit+0x50>)
 8000a9e:	f001 ff97 	bl	80029d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,data,2,HAL_MAX_DELAY);
 8000aa2:	f107 0208 	add.w	r2, r7, #8
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2302      	movs	r3, #2
 8000aae:	2152      	movs	r1, #82	@ 0x52
 8000ab0:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <readReg16Bit+0x50>)
 8000ab2:	f002 f88b 	bl	8002bcc <HAL_I2C_Master_Receive>
	//value=array[1];
	value  = (uint16_t)data[0] << 8;
 8000ab6:	7a3b      	ldrb	r3, [r7, #8]
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	81fb      	strh	r3, [r7, #14]
	value |=data[1];
 8000abc:	7a7b      	ldrb	r3, [r7, #9]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	81fb      	strh	r3, [r7, #14]


  return value;
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000008c 	.word	0x2000008c

08000ad4 <writeMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
  ///Wire.beginTransmission(address);
  ///Wire.write(reg);
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,reg,1,HAL_MAX_DELAY);
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	2152      	movs	r1, #82	@ 0x52
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <writeMulti+0x54>)
 8000af4:	f001 ff6c 	bl	80029d0 <HAL_I2C_Master_Transmit>

  while (count-- > 0)
 8000af8:	e00c      	b.n	8000b14 <writeMulti+0x40>
  {
    //Wire.write(*(src++));
	  HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,*(src++),1,HAL_MAX_DELAY);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	603a      	str	r2, [r7, #0]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	2152      	movs	r1, #82	@ 0x52
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <writeMulti+0x54>)
 8000b10:	f001 ff5e 	bl	80029d0 <HAL_I2C_Master_Transmit>
  while (count-- > 0)
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	71ba      	strb	r2, [r7, #6]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1ed      	bne.n	8000afa <writeMulti+0x26>
  }

  //last_status = Wire.endTransmission();
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000008c 	.word	0x2000008c

08000b2c <readMulti>:

void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 8000b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b30:	b087      	sub	sp, #28
 8000b32:	af02      	add	r7, sp, #8
 8000b34:	4603      	mov	r3, r0
 8000b36:	6039      	str	r1, [r7, #0]
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	71bb      	strb	r3, [r7, #6]
 8000b3e:	466b      	mov	r3, sp
 8000b40:	461e      	mov	r6, r3
	uint8_t array[count];
 8000b42:	79b9      	ldrb	r1, [r7, #6]
 8000b44:	460b      	mov	r3, r1
 8000b46:	3b01      	subs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	b2cb      	uxtb	r3, r1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4691      	mov	r9, r2
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	f04f 0300 	mov.w	r3, #0
 8000b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b66:	b2cb      	uxtb	r3, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	461c      	mov	r4, r3
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	f04f 0200 	mov.w	r2, #0
 8000b72:	f04f 0300 	mov.w	r3, #0
 8000b76:	00eb      	lsls	r3, r5, #3
 8000b78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b7c:	00e2      	lsls	r2, r4, #3
 8000b7e:	460b      	mov	r3, r1
 8000b80:	3307      	adds	r3, #7
 8000b82:	08db      	lsrs	r3, r3, #3
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	ebad 0d03 	sub.w	sp, sp, r3
 8000b8a:	ab02      	add	r3, sp, #8
 8000b8c:	3300      	adds	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
	array[0]=reg;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	79fa      	ldrb	r2, [r7, #7]
 8000b94:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array[0],1,HAL_MAX_DELAY);
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	2152      	movs	r1, #82	@ 0x52
 8000ba6:	4810      	ldr	r0, [pc, #64]	@ (8000be8 <readMulti+0xbc>)
 8000ba8:	f001 ff12 	bl	80029d0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,count,HAL_MAX_DELAY);
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	9200      	str	r2, [sp, #0]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	2152      	movs	r1, #82	@ 0x52
 8000bba:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <readMulti+0xbc>)
 8000bbc:	f002 f806 	bl	8002bcc <HAL_I2C_Master_Receive>
  while (count-- > 0)
 8000bc0:	e007      	b.n	8000bd2 <readMulti+0xa6>
  {
    *(dst++) = array[count-1];
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	1c59      	adds	r1, r3, #1
 8000bca:	6039      	str	r1, [r7, #0]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	5c8a      	ldrb	r2, [r1, r2]
 8000bd0:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	1e5a      	subs	r2, r3, #1
 8000bd6:	71ba      	strb	r2, [r7, #6]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f2      	bne.n	8000bc2 <readMulti+0x96>
 8000bdc:	46b5      	mov	sp, r6
  }
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000be8:	2000008c 	.word	0x2000008c

08000bec <init>:
  address = new_addr;
}


bool init(bool io_2v8)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00a      	beq.n	8000c12 <init+0x26>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
    readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8000bfc:	2089      	movs	r0, #137	@ 0x89
 8000bfe:	f7ff ff1b 	bl	8000a38 <readReg>
 8000c02:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2089      	movs	r0, #137	@ 0x89
 8000c0e:	f7ff fed5 	bl	80009bc <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2088      	movs	r0, #136	@ 0x88
 8000c16:	f7ff fed1 	bl	80009bc <writeReg>

  writeReg(0x80, 0x01);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	2080      	movs	r0, #128	@ 0x80
 8000c1e:	f7ff fecd 	bl	80009bc <writeReg>
  writeReg(0xFF, 0x01);
 8000c22:	2101      	movs	r1, #1
 8000c24:	20ff      	movs	r0, #255	@ 0xff
 8000c26:	f7ff fec9 	bl	80009bc <writeReg>
  writeReg(0x00, 0x00);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fec5 	bl	80009bc <writeReg>
  stop_variable = readReg(0x91);
 8000c32:	2091      	movs	r0, #145	@ 0x91
 8000c34:	f7ff ff00 	bl	8000a38 <readReg>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d2c <init+0x140>)
 8000c3e:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8000c40:	2101      	movs	r1, #1
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff feba 	bl	80009bc <writeReg>
  writeReg(0xFF, 0x00);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	20ff      	movs	r0, #255	@ 0xff
 8000c4c:	f7ff feb6 	bl	80009bc <writeReg>
  writeReg(0x80, 0x00);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2080      	movs	r0, #128	@ 0x80
 8000c54:	f7ff feb2 	bl	80009bc <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8000c58:	2060      	movs	r0, #96	@ 0x60
 8000c5a:	f7ff feed 	bl	8000a38 <readReg>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f043 0312 	orr.w	r3, r3, #18
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	2060      	movs	r0, #96	@ 0x60
 8000c6a:	f7ff fea7 	bl	80009bc <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8000c6e:	f04f 507a 	mov.w	r0, #1048576000	@ 0x3e800000
 8000c72:	f000 fa05 	bl	8001080 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000c76:	21ff      	movs	r1, #255	@ 0xff
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fe9f 	bl	80009bc <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8000c7e:	f107 0213 	add.w	r2, r7, #19
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fb49 	bl	8001320 <getSpadInfo>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <init+0xac>
 8000c94:	2300      	movs	r3, #0
 8000c96:	e1ea      	b.n	800106e <init+0x482>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2206      	movs	r2, #6
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	20b0      	movs	r0, #176	@ 0xb0
 8000ca2:	f7ff ff43 	bl	8000b2c <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	20ff      	movs	r0, #255	@ 0xff
 8000caa:	f7ff fe87 	bl	80009bc <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	204f      	movs	r0, #79	@ 0x4f
 8000cb2:	f7ff fe83 	bl	80009bc <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000cb6:	212c      	movs	r1, #44	@ 0x2c
 8000cb8:	204e      	movs	r0, #78	@ 0x4e
 8000cba:	f7ff fe7f 	bl	80009bc <writeReg>
  writeReg(0xFF, 0x00);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	f7ff fe7b 	bl	80009bc <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000cc6:	21b4      	movs	r1, #180	@ 0xb4
 8000cc8:	20b6      	movs	r0, #182	@ 0xb6
 8000cca:	f7ff fe77 	bl	80009bc <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000cce:	7cfb      	ldrb	r3, [r7, #19]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <init+0xec>
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	e000      	b.n	8000cda <init+0xee>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	75bb      	strb	r3, [r7, #22]
 8000ce4:	e03b      	b.n	8000d5e <init+0x172>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000ce6:	7dba      	ldrb	r2, [r7, #22]
 8000ce8:	7d7b      	ldrb	r3, [r7, #21]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d303      	bcc.n	8000cf6 <init+0x10a>
 8000cee:	7d3b      	ldrb	r3, [r7, #20]
 8000cf0:	7dfa      	ldrb	r2, [r7, #23]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d11c      	bne.n	8000d30 <init+0x144>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8000cf6:	7dbb      	ldrb	r3, [r7, #22]
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	b2d8      	uxtb	r0, r3
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	3318      	adds	r3, #24
 8000d00:	443b      	add	r3, r7
 8000d02:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d06:	b25a      	sxtb	r2, r3
 8000d08:	7dbb      	ldrb	r3, [r7, #22]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	3318      	adds	r3, #24
 8000d24:	443b      	add	r3, r7
 8000d26:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000d2a:	e015      	b.n	8000d58 <init+0x16c>
 8000d2c:	20000008 	.word	0x20000008
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8000d30:	7dbb      	ldrb	r3, [r7, #22]
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	3318      	adds	r3, #24
 8000d38:	443b      	add	r3, r7
 8000d3a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	7dbb      	ldrb	r3, [r7, #22]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	fa42 f303 	asr.w	r3, r2, r3
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <init+0x16c>
    {
      spads_enabled++;
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	3301      	adds	r3, #1
 8000d56:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8000d58:	7dbb      	ldrb	r3, [r7, #22]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	75bb      	strb	r3, [r7, #22]
 8000d5e:	7dbb      	ldrb	r3, [r7, #22]
 8000d60:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d62:	d9c0      	bls.n	8000ce6 <init+0xfa>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2206      	movs	r2, #6
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	20b0      	movs	r0, #176	@ 0xb0
 8000d6e:	f7ff feb1 	bl	8000ad4 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8000d72:	2101      	movs	r1, #1
 8000d74:	20ff      	movs	r0, #255	@ 0xff
 8000d76:	f7ff fe21 	bl	80009bc <writeReg>
  writeReg(0x00, 0x00);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff fe1d 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x00);
 8000d82:	2100      	movs	r1, #0
 8000d84:	20ff      	movs	r0, #255	@ 0xff
 8000d86:	f7ff fe19 	bl	80009bc <writeReg>
  writeReg(0x09, 0x00);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2009      	movs	r0, #9
 8000d8e:	f7ff fe15 	bl	80009bc <writeReg>
  writeReg(0x10, 0x00);
 8000d92:	2100      	movs	r1, #0
 8000d94:	2010      	movs	r0, #16
 8000d96:	f7ff fe11 	bl	80009bc <writeReg>
  writeReg(0x11, 0x00);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2011      	movs	r0, #17
 8000d9e:	f7ff fe0d 	bl	80009bc <writeReg>

  writeReg(0x24, 0x01);
 8000da2:	2101      	movs	r1, #1
 8000da4:	2024      	movs	r0, #36	@ 0x24
 8000da6:	f7ff fe09 	bl	80009bc <writeReg>
  writeReg(0x25, 0xFF);
 8000daa:	21ff      	movs	r1, #255	@ 0xff
 8000dac:	2025      	movs	r0, #37	@ 0x25
 8000dae:	f7ff fe05 	bl	80009bc <writeReg>
  writeReg(0x75, 0x00);
 8000db2:	2100      	movs	r1, #0
 8000db4:	2075      	movs	r0, #117	@ 0x75
 8000db6:	f7ff fe01 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x01);
 8000dba:	2101      	movs	r1, #1
 8000dbc:	20ff      	movs	r0, #255	@ 0xff
 8000dbe:	f7ff fdfd 	bl	80009bc <writeReg>
  writeReg(0x4E, 0x2C);
 8000dc2:	212c      	movs	r1, #44	@ 0x2c
 8000dc4:	204e      	movs	r0, #78	@ 0x4e
 8000dc6:	f7ff fdf9 	bl	80009bc <writeReg>
  writeReg(0x48, 0x00);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2048      	movs	r0, #72	@ 0x48
 8000dce:	f7ff fdf5 	bl	80009bc <writeReg>
  writeReg(0x30, 0x20);
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	2030      	movs	r0, #48	@ 0x30
 8000dd6:	f7ff fdf1 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x00);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	20ff      	movs	r0, #255	@ 0xff
 8000dde:	f7ff fded 	bl	80009bc <writeReg>
  writeReg(0x30, 0x09);
 8000de2:	2109      	movs	r1, #9
 8000de4:	2030      	movs	r0, #48	@ 0x30
 8000de6:	f7ff fde9 	bl	80009bc <writeReg>
  writeReg(0x54, 0x00);
 8000dea:	2100      	movs	r1, #0
 8000dec:	2054      	movs	r0, #84	@ 0x54
 8000dee:	f7ff fde5 	bl	80009bc <writeReg>
  writeReg(0x31, 0x04);
 8000df2:	2104      	movs	r1, #4
 8000df4:	2031      	movs	r0, #49	@ 0x31
 8000df6:	f7ff fde1 	bl	80009bc <writeReg>
  writeReg(0x32, 0x03);
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	2032      	movs	r0, #50	@ 0x32
 8000dfe:	f7ff fddd 	bl	80009bc <writeReg>
  writeReg(0x40, 0x83);
 8000e02:	2183      	movs	r1, #131	@ 0x83
 8000e04:	2040      	movs	r0, #64	@ 0x40
 8000e06:	f7ff fdd9 	bl	80009bc <writeReg>
  writeReg(0x46, 0x25);
 8000e0a:	2125      	movs	r1, #37	@ 0x25
 8000e0c:	2046      	movs	r0, #70	@ 0x46
 8000e0e:	f7ff fdd5 	bl	80009bc <writeReg>
  writeReg(0x60, 0x00);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2060      	movs	r0, #96	@ 0x60
 8000e16:	f7ff fdd1 	bl	80009bc <writeReg>
  writeReg(0x27, 0x00);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2027      	movs	r0, #39	@ 0x27
 8000e1e:	f7ff fdcd 	bl	80009bc <writeReg>
  writeReg(0x50, 0x06);
 8000e22:	2106      	movs	r1, #6
 8000e24:	2050      	movs	r0, #80	@ 0x50
 8000e26:	f7ff fdc9 	bl	80009bc <writeReg>
  writeReg(0x51, 0x00);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2051      	movs	r0, #81	@ 0x51
 8000e2e:	f7ff fdc5 	bl	80009bc <writeReg>
  writeReg(0x52, 0x96);
 8000e32:	2196      	movs	r1, #150	@ 0x96
 8000e34:	2052      	movs	r0, #82	@ 0x52
 8000e36:	f7ff fdc1 	bl	80009bc <writeReg>
  writeReg(0x56, 0x08);
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	2056      	movs	r0, #86	@ 0x56
 8000e3e:	f7ff fdbd 	bl	80009bc <writeReg>
  writeReg(0x57, 0x30);
 8000e42:	2130      	movs	r1, #48	@ 0x30
 8000e44:	2057      	movs	r0, #87	@ 0x57
 8000e46:	f7ff fdb9 	bl	80009bc <writeReg>
  writeReg(0x61, 0x00);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2061      	movs	r0, #97	@ 0x61
 8000e4e:	f7ff fdb5 	bl	80009bc <writeReg>
  writeReg(0x62, 0x00);
 8000e52:	2100      	movs	r1, #0
 8000e54:	2062      	movs	r0, #98	@ 0x62
 8000e56:	f7ff fdb1 	bl	80009bc <writeReg>
  writeReg(0x64, 0x00);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2064      	movs	r0, #100	@ 0x64
 8000e5e:	f7ff fdad 	bl	80009bc <writeReg>
  writeReg(0x65, 0x00);
 8000e62:	2100      	movs	r1, #0
 8000e64:	2065      	movs	r0, #101	@ 0x65
 8000e66:	f7ff fda9 	bl	80009bc <writeReg>
  writeReg(0x66, 0xA0);
 8000e6a:	21a0      	movs	r1, #160	@ 0xa0
 8000e6c:	2066      	movs	r0, #102	@ 0x66
 8000e6e:	f7ff fda5 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x01);
 8000e72:	2101      	movs	r1, #1
 8000e74:	20ff      	movs	r0, #255	@ 0xff
 8000e76:	f7ff fda1 	bl	80009bc <writeReg>
  writeReg(0x22, 0x32);
 8000e7a:	2132      	movs	r1, #50	@ 0x32
 8000e7c:	2022      	movs	r0, #34	@ 0x22
 8000e7e:	f7ff fd9d 	bl	80009bc <writeReg>
  writeReg(0x47, 0x14);
 8000e82:	2114      	movs	r1, #20
 8000e84:	2047      	movs	r0, #71	@ 0x47
 8000e86:	f7ff fd99 	bl	80009bc <writeReg>
  writeReg(0x49, 0xFF);
 8000e8a:	21ff      	movs	r1, #255	@ 0xff
 8000e8c:	2049      	movs	r0, #73	@ 0x49
 8000e8e:	f7ff fd95 	bl	80009bc <writeReg>
  writeReg(0x4A, 0x00);
 8000e92:	2100      	movs	r1, #0
 8000e94:	204a      	movs	r0, #74	@ 0x4a
 8000e96:	f7ff fd91 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x00);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	20ff      	movs	r0, #255	@ 0xff
 8000e9e:	f7ff fd8d 	bl	80009bc <writeReg>
  writeReg(0x7A, 0x0A);
 8000ea2:	210a      	movs	r1, #10
 8000ea4:	207a      	movs	r0, #122	@ 0x7a
 8000ea6:	f7ff fd89 	bl	80009bc <writeReg>
  writeReg(0x7B, 0x00);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	207b      	movs	r0, #123	@ 0x7b
 8000eae:	f7ff fd85 	bl	80009bc <writeReg>
  writeReg(0x78, 0x21);
 8000eb2:	2121      	movs	r1, #33	@ 0x21
 8000eb4:	2078      	movs	r0, #120	@ 0x78
 8000eb6:	f7ff fd81 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x01);
 8000eba:	2101      	movs	r1, #1
 8000ebc:	20ff      	movs	r0, #255	@ 0xff
 8000ebe:	f7ff fd7d 	bl	80009bc <writeReg>
  writeReg(0x23, 0x34);
 8000ec2:	2134      	movs	r1, #52	@ 0x34
 8000ec4:	2023      	movs	r0, #35	@ 0x23
 8000ec6:	f7ff fd79 	bl	80009bc <writeReg>
  writeReg(0x42, 0x00);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2042      	movs	r0, #66	@ 0x42
 8000ece:	f7ff fd75 	bl	80009bc <writeReg>
  writeReg(0x44, 0xFF);
 8000ed2:	21ff      	movs	r1, #255	@ 0xff
 8000ed4:	2044      	movs	r0, #68	@ 0x44
 8000ed6:	f7ff fd71 	bl	80009bc <writeReg>
  writeReg(0x45, 0x26);
 8000eda:	2126      	movs	r1, #38	@ 0x26
 8000edc:	2045      	movs	r0, #69	@ 0x45
 8000ede:	f7ff fd6d 	bl	80009bc <writeReg>
  writeReg(0x46, 0x05);
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	2046      	movs	r0, #70	@ 0x46
 8000ee6:	f7ff fd69 	bl	80009bc <writeReg>
  writeReg(0x40, 0x40);
 8000eea:	2140      	movs	r1, #64	@ 0x40
 8000eec:	2040      	movs	r0, #64	@ 0x40
 8000eee:	f7ff fd65 	bl	80009bc <writeReg>
  writeReg(0x0E, 0x06);
 8000ef2:	2106      	movs	r1, #6
 8000ef4:	200e      	movs	r0, #14
 8000ef6:	f7ff fd61 	bl	80009bc <writeReg>
  writeReg(0x20, 0x1A);
 8000efa:	211a      	movs	r1, #26
 8000efc:	2020      	movs	r0, #32
 8000efe:	f7ff fd5d 	bl	80009bc <writeReg>
  writeReg(0x43, 0x40);
 8000f02:	2140      	movs	r1, #64	@ 0x40
 8000f04:	2043      	movs	r0, #67	@ 0x43
 8000f06:	f7ff fd59 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x00);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	20ff      	movs	r0, #255	@ 0xff
 8000f0e:	f7ff fd55 	bl	80009bc <writeReg>
  writeReg(0x34, 0x03);
 8000f12:	2103      	movs	r1, #3
 8000f14:	2034      	movs	r0, #52	@ 0x34
 8000f16:	f7ff fd51 	bl	80009bc <writeReg>
  writeReg(0x35, 0x44);
 8000f1a:	2144      	movs	r1, #68	@ 0x44
 8000f1c:	2035      	movs	r0, #53	@ 0x35
 8000f1e:	f7ff fd4d 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x01);
 8000f22:	2101      	movs	r1, #1
 8000f24:	20ff      	movs	r0, #255	@ 0xff
 8000f26:	f7ff fd49 	bl	80009bc <writeReg>
  writeReg(0x31, 0x04);
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	2031      	movs	r0, #49	@ 0x31
 8000f2e:	f7ff fd45 	bl	80009bc <writeReg>
  writeReg(0x4B, 0x09);
 8000f32:	2109      	movs	r1, #9
 8000f34:	204b      	movs	r0, #75	@ 0x4b
 8000f36:	f7ff fd41 	bl	80009bc <writeReg>
  writeReg(0x4C, 0x05);
 8000f3a:	2105      	movs	r1, #5
 8000f3c:	204c      	movs	r0, #76	@ 0x4c
 8000f3e:	f7ff fd3d 	bl	80009bc <writeReg>
  writeReg(0x4D, 0x04);
 8000f42:	2104      	movs	r1, #4
 8000f44:	204d      	movs	r0, #77	@ 0x4d
 8000f46:	f7ff fd39 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x00);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	20ff      	movs	r0, #255	@ 0xff
 8000f4e:	f7ff fd35 	bl	80009bc <writeReg>
  writeReg(0x44, 0x00);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2044      	movs	r0, #68	@ 0x44
 8000f56:	f7ff fd31 	bl	80009bc <writeReg>
  writeReg(0x45, 0x20);
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	2045      	movs	r0, #69	@ 0x45
 8000f5e:	f7ff fd2d 	bl	80009bc <writeReg>
  writeReg(0x47, 0x08);
 8000f62:	2108      	movs	r1, #8
 8000f64:	2047      	movs	r0, #71	@ 0x47
 8000f66:	f7ff fd29 	bl	80009bc <writeReg>
  writeReg(0x48, 0x28);
 8000f6a:	2128      	movs	r1, #40	@ 0x28
 8000f6c:	2048      	movs	r0, #72	@ 0x48
 8000f6e:	f7ff fd25 	bl	80009bc <writeReg>
  writeReg(0x67, 0x00);
 8000f72:	2100      	movs	r1, #0
 8000f74:	2067      	movs	r0, #103	@ 0x67
 8000f76:	f7ff fd21 	bl	80009bc <writeReg>
  writeReg(0x70, 0x04);
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	2070      	movs	r0, #112	@ 0x70
 8000f7e:	f7ff fd1d 	bl	80009bc <writeReg>
  writeReg(0x71, 0x01);
 8000f82:	2101      	movs	r1, #1
 8000f84:	2071      	movs	r0, #113	@ 0x71
 8000f86:	f7ff fd19 	bl	80009bc <writeReg>
  writeReg(0x72, 0xFE);
 8000f8a:	21fe      	movs	r1, #254	@ 0xfe
 8000f8c:	2072      	movs	r0, #114	@ 0x72
 8000f8e:	f7ff fd15 	bl	80009bc <writeReg>
  writeReg(0x76, 0x00);
 8000f92:	2100      	movs	r1, #0
 8000f94:	2076      	movs	r0, #118	@ 0x76
 8000f96:	f7ff fd11 	bl	80009bc <writeReg>
  writeReg(0x77, 0x00);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2077      	movs	r0, #119	@ 0x77
 8000f9e:	f7ff fd0d 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x01);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	20ff      	movs	r0, #255	@ 0xff
 8000fa6:	f7ff fd09 	bl	80009bc <writeReg>
  writeReg(0x0D, 0x01);
 8000faa:	2101      	movs	r1, #1
 8000fac:	200d      	movs	r0, #13
 8000fae:	f7ff fd05 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x00);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	20ff      	movs	r0, #255	@ 0xff
 8000fb6:	f7ff fd01 	bl	80009bc <writeReg>
  writeReg(0x80, 0x01);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2080      	movs	r0, #128	@ 0x80
 8000fbe:	f7ff fcfd 	bl	80009bc <writeReg>
  writeReg(0x01, 0xF8);
 8000fc2:	21f8      	movs	r1, #248	@ 0xf8
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f7ff fcf9 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x01);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	20ff      	movs	r0, #255	@ 0xff
 8000fce:	f7ff fcf5 	bl	80009bc <writeReg>
  writeReg(0x8E, 0x01);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	208e      	movs	r0, #142	@ 0x8e
 8000fd6:	f7ff fcf1 	bl	80009bc <writeReg>
  writeReg(0x00, 0x01);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff fced 	bl	80009bc <writeReg>
  writeReg(0xFF, 0x00);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	20ff      	movs	r0, #255	@ 0xff
 8000fe6:	f7ff fce9 	bl	80009bc <writeReg>
  writeReg(0x80, 0x00);
 8000fea:	2100      	movs	r1, #0
 8000fec:	2080      	movs	r0, #128	@ 0x80
 8000fee:	f7ff fce5 	bl	80009bc <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f7ff fce1 	bl	80009bc <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8000ffa:	2084      	movs	r0, #132	@ 0x84
 8000ffc:	f7ff fd1c 	bl	8000a38 <readReg>
 8001000:	4603      	mov	r3, r0
 8001002:	f023 0310 	bic.w	r3, r3, #16
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	2084      	movs	r0, #132	@ 0x84
 800100c:	f7ff fcd6 	bl	80009bc <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001010:	2101      	movs	r1, #1
 8001012:	200b      	movs	r0, #11
 8001014:	f7ff fcd2 	bl	80009bc <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 8001018:	f000 f8fe 	bl	8001218 <getMeasurementTimingBudget>
 800101c:	4603      	mov	r3, r0
 800101e:	4a16      	ldr	r2, [pc, #88]	@ (8001078 <init+0x48c>)
 8001020:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001022:	21e8      	movs	r1, #232	@ 0xe8
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fcc9 	bl	80009bc <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <init+0x48c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f85a 	bl	80010e8 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001034:	2101      	movs	r1, #1
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff fcc0 	bl	80009bc <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 800103c:	2040      	movs	r0, #64	@ 0x40
 800103e:	f000 fb09 	bl	8001654 <performSingleRefCalibration>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <init+0x460>
 8001048:	2300      	movs	r3, #0
 800104a:	e010      	b.n	800106e <init+0x482>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800104c:	2102      	movs	r1, #2
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff fcb4 	bl	80009bc <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 8001054:	2000      	movs	r0, #0
 8001056:	f000 fafd 	bl	8001654 <performSingleRefCalibration>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <init+0x478>
 8001060:	2300      	movs	r3, #0
 8001062:	e004      	b.n	800106e <init+0x482>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001064:	21e8      	movs	r1, #232	@ 0xe8
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff fca8 	bl	80009bc <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000088 	.word	0x20000088
 800107c:	00000000 	.word	0x00000000

08001080 <setSignalRateLimit>:

bool setSignalRateLimit(float limit_Mcps)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001088:	f04f 0100 	mov.w	r1, #0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fc41 	bl	8000914 <__aeabi_fcmplt>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10a      	bne.n	80010ae <setSignalRateLimit+0x2e>
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff f9bd 	bl	8000418 <__aeabi_f2d>
 800109e:	a310      	add	r3, pc, #64	@ (adr r3, 80010e0 <setSignalRateLimit+0x60>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fa8e 	bl	80005c4 <__aeabi_dcmpgt>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <setSignalRateLimit+0x32>
 80010ae:	2300      	movs	r3, #0
 80010b0:	e00f      	b.n	80010d2 <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80010b2:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fa8e 	bl	80005d8 <__aeabi_fmul>
 80010bc:	4603      	mov	r3, r0
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fc50 	bl	8000964 <__aeabi_f2uiz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	2044      	movs	r0, #68	@ 0x44
 80010cc:	f7ff fc92 	bl	80009f4 <writeReg16Bit>
  return true;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	f3af 8000 	nop.w
 80010e0:	0a3d70a4 	.word	0x0a3d70a4
 80010e4:	407fffd7 	.word	0x407fffd7

080010e8 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b092      	sub	sp, #72	@ 0x48
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	struct SequenceStepEnables enables;
	struct SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 80010f0:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 80010f4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 80010f8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80010fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 80010fe:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001102:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 8001104:	f240 234e 	movw	r3, #590	@ 0x24e
 8001108:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 800110a:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800110e:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 8001110:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001114:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 8001116:	f240 2326 	movw	r3, #550	@ 0x226
 800111a:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 800111c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001120:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001126:	429a      	cmp	r2, r3
 8001128:	d201      	bcs.n	800112e <setMeasurementTimingBudget+0x46>
 800112a:	2300      	movs	r3, #0
 800112c:	e06e      	b.n	800120c <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 800112e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001132:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001134:	4413      	add	r3, r2
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 8001138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f967 	bl	8001410 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8001142:	f107 020c 	add.w	r2, r7, #12
 8001146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f991 	bl	8001474 <getSequenceStepTimeouts>

  if (enables.tcc)
 8001152:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800115e:	4413      	add	r3, r2
 8001160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001162:	4413      	add	r3, r2
 8001164:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 8001166:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001178:	4413      	add	r3, r2
 800117a:	647b      	str	r3, [r7, #68]	@ 0x44
 800117c:	e009      	b.n	8001192 <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 800117e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800118a:	4413      	add	r3, r2
 800118c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800118e:	4413      	add	r3, r2
 8001190:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 8001192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800119e:	4413      	add	r3, r2
 80011a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011a2:	4413      	add	r3, r2
 80011a4:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 80011a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d02d      	beq.n	800120a <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 80011ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80011b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011b2:	4413      	add	r3, r2
 80011b4:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80011b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d901      	bls.n	80011c2 <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 80011be:	2300      	movs	r3, #0
 80011c0:	e024      	b.n	800120c <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80011ca:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80011d2:	f000 fa19 	bl	8001608 <timeoutMicrosecondsToMclks>
 80011d6:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 80011d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80011e4:	8a7a      	ldrh	r2, [r7, #18]
 80011e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80011ea:	4413      	add	r3, r2
 80011ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80011f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f9b5 	bl	8001564 <encodeTimeout>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	2071      	movs	r0, #113	@ 0x71
 8001200:	f7ff fbf8 	bl	80009f4 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8001204:	4a03      	ldr	r2, [pc, #12]	@ (8001214 <setMeasurementTimingBudget+0x12c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  }
  return true;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3748      	adds	r7, #72	@ 0x48
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000088 	.word	0x20000088

08001218 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	@ 0x30
 800121c:	af00      	add	r7, sp, #0
	struct SequenceStepEnables enables;
	struct SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800121e:	f240 7376 	movw	r3, #1910	@ 0x776
 8001222:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t const EndOverhead        = 960;
 8001224:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001228:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t const MsrcOverhead       = 660;
 800122a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800122e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const TccOverhead        = 590;
 8001230:	f240 234e 	movw	r3, #590	@ 0x24e
 8001234:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t const DssOverhead        = 690;
 8001236:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800123a:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t const PreRangeOverhead   = 660;
 800123c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001240:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8001242:	f240 2326 	movw	r3, #550	@ 0x226
 8001246:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8001248:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800124a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800124c:	4413      	add	r3, r2
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f8db 	bl	8001410 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800125a:	463a      	mov	r2, r7
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f906 	bl	8001474 <getSequenceStepTimeouts>

  if (enables.tcc)
 8001268:	7e3b      	ldrb	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001272:	4413      	add	r3, r2
 8001274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001276:	4413      	add	r3, r2
 8001278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 800127a:	7ebb      	ldrb	r3, [r7, #26]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800128a:	4413      	add	r3, r2
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800128e:	e008      	b.n	80012a2 <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 8001290:	7e7b      	ldrb	r3, [r7, #25]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800129a:	4413      	add	r3, r2
 800129c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800129e:	4413      	add	r3, r2
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 80012a2:	7efb      	ldrb	r3, [r7, #27]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	8c3b      	ldrh	r3, [r7, #32]
 80012ac:	4413      	add	r3, r2
 80012ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012b0:	4413      	add	r3, r2
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 80012b4:	7f3b      	ldrb	r3, [r7, #28]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	8bfb      	ldrh	r3, [r7, #30]
 80012be:	4413      	add	r3, r2
 80012c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c2:	4413      	add	r3, r2
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80012c6:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <getMeasurementTimingBudget+0xc0>)
 80012c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ca:	6013      	str	r3, [r2, #0]
  return budget_us;
 80012cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000088 	.word	0x20000088

080012dc <getVcselPulsePeriod>:


// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d108      	bne.n	80012fe <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80012ec:	2050      	movs	r0, #80	@ 0x50
 80012ee:	f7ff fba3 	bl	8000a38 <readReg>
 80012f2:	4603      	mov	r3, r0
 80012f4:	3301      	adds	r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	e00c      	b.n	8001318 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d108      	bne.n	8001316 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8001304:	2070      	movs	r0, #112	@ 0x70
 8001306:	f7ff fb97 	bl	8000a38 <readReg>
 800130a:	4603      	mov	r3, r0
 800130c:	3301      	adds	r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	e000      	b.n	8001318 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 8001316:	23ff      	movs	r3, #255	@ 0xff
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 800132a:	2101      	movs	r1, #1
 800132c:	2080      	movs	r0, #128	@ 0x80
 800132e:	f7ff fb45 	bl	80009bc <writeReg>
  writeReg(0xFF, 0x01);
 8001332:	2101      	movs	r1, #1
 8001334:	20ff      	movs	r0, #255	@ 0xff
 8001336:	f7ff fb41 	bl	80009bc <writeReg>
  writeReg(0x00, 0x00);
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fb3d 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x06);
 8001342:	2106      	movs	r1, #6
 8001344:	20ff      	movs	r0, #255	@ 0xff
 8001346:	f7ff fb39 	bl	80009bc <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 800134a:	2083      	movs	r0, #131	@ 0x83
 800134c:	f7ff fb74 	bl	8000a38 <readReg>
 8001350:	4603      	mov	r3, r0
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	2083      	movs	r0, #131	@ 0x83
 800135c:	f7ff fb2e 	bl	80009bc <writeReg>
  writeReg(0xFF, 0x07);
 8001360:	2107      	movs	r1, #7
 8001362:	20ff      	movs	r0, #255	@ 0xff
 8001364:	f7ff fb2a 	bl	80009bc <writeReg>
  writeReg(0x81, 0x01);
 8001368:	2101      	movs	r1, #1
 800136a:	2081      	movs	r0, #129	@ 0x81
 800136c:	f7ff fb26 	bl	80009bc <writeReg>

  writeReg(0x80, 0x01);
 8001370:	2101      	movs	r1, #1
 8001372:	2080      	movs	r0, #128	@ 0x80
 8001374:	f7ff fb22 	bl	80009bc <writeReg>

  writeReg(0x94, 0x6b);
 8001378:	216b      	movs	r1, #107	@ 0x6b
 800137a:	2094      	movs	r0, #148	@ 0x94
 800137c:	f7ff fb1e 	bl	80009bc <writeReg>
  writeReg(0x83, 0x00);
 8001380:	2100      	movs	r1, #0
 8001382:	2083      	movs	r0, #131	@ 0x83
 8001384:	f7ff fb1a 	bl	80009bc <writeReg>
  startTimeout();
 8001388:	f7ff fb0c 	bl	80009a4 <millis>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <getSpadInfo+0xec>)
 8001392:	801a      	strh	r2, [r3, #0]
//  while (readReg(0x83) == 0x00)
//  {
//    if (checkTimeoutExpired()) { return false; }
//  }
  writeReg(0x83, 0x01);
 8001394:	2101      	movs	r1, #1
 8001396:	2083      	movs	r0, #131	@ 0x83
 8001398:	f7ff fb10 	bl	80009bc <writeReg>
  tmp = readReg(0x92);
 800139c:	2092      	movs	r0, #146	@ 0x92
 800139e:	f7ff fb4b 	bl	8000a38 <readReg>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	09db      	lsrs	r3, r3, #7
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 80013bc:	2100      	movs	r1, #0
 80013be:	2081      	movs	r0, #129	@ 0x81
 80013c0:	f7ff fafc 	bl	80009bc <writeReg>
  writeReg(0xFF, 0x06);
 80013c4:	2106      	movs	r1, #6
 80013c6:	20ff      	movs	r0, #255	@ 0xff
 80013c8:	f7ff faf8 	bl	80009bc <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 80013cc:	2083      	movs	r0, #131	@ 0x83
 80013ce:	f7ff fb33 	bl	8000a38 <readReg>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f023 0304 	bic.w	r3, r3, #4
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	2083      	movs	r0, #131	@ 0x83
 80013de:	f7ff faed 	bl	80009bc <writeReg>
  writeReg(0xFF, 0x01);
 80013e2:	2101      	movs	r1, #1
 80013e4:	20ff      	movs	r0, #255	@ 0xff
 80013e6:	f7ff fae9 	bl	80009bc <writeReg>
  writeReg(0x00, 0x01);
 80013ea:	2101      	movs	r1, #1
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fae5 	bl	80009bc <writeReg>

  writeReg(0xFF, 0x00);
 80013f2:	2100      	movs	r1, #0
 80013f4:	20ff      	movs	r0, #255	@ 0xff
 80013f6:	f7ff fae1 	bl	80009bc <writeReg>
  writeReg(0x80, 0x00);
 80013fa:	2100      	movs	r1, #0
 80013fc:	2080      	movs	r0, #128	@ 0x80
 80013fe:	f7ff fadd 	bl	80009bc <writeReg>

  return true;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000000a 	.word	0x2000000a

08001410 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(struct SequenceStepEnables * enables)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff fb0d 	bl	8000a38 <readReg>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	099b      	lsrs	r3, r3, #6
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	09db      	lsrs	r3, r3, #7
 8001466:	b2da      	uxtb	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	711a      	strb	r2, [r3, #4]
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(struct SequenceStepEnables const * enables, struct SequenceStepTimeouts * timeouts)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff ff2c 	bl	80012dc <getVcselPulsePeriod>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 800148c:	2046      	movs	r0, #70	@ 0x46
 800148e:	f7ff fad3 	bl	8000a38 <readReg>
 8001492:	4603      	mov	r3, r0
 8001494:	3301      	adds	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	4610      	mov	r0, r2
 80014aa:	f000 f885 	bl	80015b8 <timeoutMclksToMicroseconds>
 80014ae:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80014b4:	2051      	movs	r0, #81	@ 0x51
 80014b6:	f7ff fae3 	bl	8000a80 <readReg16Bit>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f83e 	bl	800153e <decodeTimeout>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f000 f86e 	bl	80015b8 <timeoutMclksToMicroseconds>
 80014dc:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fefa 	bl	80012dc <getVcselPulsePeriod>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80014f0:	2071      	movs	r0, #113	@ 0x71
 80014f2:	f7ff fac5 	bl	8000a80 <readReg16Bit>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f820 	bl	800153e <decodeTimeout>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	78db      	ldrb	r3, [r3, #3]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	891a      	ldrh	r2, [r3, #8]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	88db      	ldrh	r3, [r3, #6]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b29a      	uxth	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f000 f844 	bl	80015b8 <timeoutMclksToMicroseconds>
 8001530:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	615a      	str	r2, [r3, #20]
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800154c:	88fa      	ldrh	r2, [r7, #6]
 800154e:	0a12      	lsrs	r2, r2, #8
 8001550:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001552:	4093      	lsls	r3, r2
 8001554:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001556:	3301      	adds	r3, #1
 8001558:	b29b      	uxth	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d016      	beq.n	80015aa <encodeTimeout+0x46>
  {
    ls_byte = timeout_mclks - 1;
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	3b01      	subs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001582:	e005      	b.n	8001590 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 800158a:	897b      	ldrh	r3, [r7, #10]
 800158c:	3301      	adds	r3, #1
 800158e:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2bff      	cmp	r3, #255	@ 0xff
 8001594:	d8f6      	bhi.n	8001584 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	e000      	b.n	80015ac <encodeTimeout+0x48>
  }
  else { return 0; }
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
	...

080015b8 <timeoutMclksToMicroseconds>:


// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	80fb      	strh	r3, [r7, #6]
 80015c4:	4613      	mov	r3, r2
 80015c6:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80015c8:	797b      	ldrb	r3, [r7, #5]
 80015ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <timeoutMclksToMicroseconds+0x48>)
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80015d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <timeoutMclksToMicroseconds+0x4c>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	099b      	lsrs	r3, r3, #6
 80015dc:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	fb03 f202 	mul.w	r2, r3, r2
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <timeoutMclksToMicroseconds+0x4c>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	099b      	lsrs	r3, r3, #6
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	003a2f00 	.word	0x003a2f00
 8001604:	10624dd3 	.word	0x10624dd3

08001608 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <timeoutMicrosecondsToMclks+0x44>)
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <timeoutMicrosecondsToMclks+0x48>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	099b      	lsrs	r3, r3, #6
 8001628:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001630:	fb03 f202 	mul.w	r2, r3, r2
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	441a      	add	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	003a2f00 	.word	0x003a2f00
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4619      	mov	r1, r3
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff f9a7 	bl	80009bc <writeReg>

  startTimeout();
 800166e:	f7ff f999 	bl	80009a4 <millis>
 8001672:	4603      	mov	r3, r0
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <performSingleRefCalibration+0x78>)
 8001678:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 800167a:	e011      	b.n	80016a0 <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <performSingleRefCalibration+0x7c>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00d      	beq.n	80016a0 <performSingleRefCalibration+0x4c>
 8001684:	f7ff f98e 	bl	80009a4 <millis>
 8001688:	4603      	mov	r3, r0
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <performSingleRefCalibration+0x78>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <performSingleRefCalibration+0x7c>)
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	4293      	cmp	r3, r2
 800169a:	dd01      	ble.n	80016a0 <performSingleRefCalibration+0x4c>
 800169c:	2300      	movs	r3, #0
 800169e:	e010      	b.n	80016c2 <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80016a0:	2013      	movs	r0, #19
 80016a2:	f7ff f9c9 	bl	8000a38 <readReg>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0e5      	beq.n	800167c <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80016b0:	2101      	movs	r1, #1
 80016b2:	200b      	movs	r0, #11
 80016b4:	f7ff f982 	bl	80009bc <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 80016b8:	2100      	movs	r1, #0
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff f97e 	bl	80009bc <writeReg>

  return true;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000000a 	.word	0x2000000a
 80016d0:	2000000c 	.word	0x2000000c

080016d4 <writeRegnew>:
uint16_t timeout_start_ms = 50;
uint16_t io_timeout = 50;
uint8_t did_timeout = 50;

void writeRegnew(uint8_t deviceAddress, uint8_t reg, uint8_t value)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	460b      	mov	r3, r1
 80016e0:	71bb      	strb	r3, [r7, #6]
 80016e2:	4613      	mov	r3, r2
 80016e4:	717b      	strb	r3, [r7, #5]
    uint8_t array[2];
    array[0] = reg;    // Register address
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	733b      	strb	r3, [r7, #12]
    array[1] = value;  // Value to write
 80016ea:	797b      	ldrb	r3, [r7, #5]
 80016ec:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, (deviceAddress << 1), array, 2, HAL_MAX_DELAY);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	b299      	uxth	r1, r3
 80016f6:	f107 020c 	add.w	r2, r7, #12
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2302      	movs	r3, #2
 8001702:	4803      	ldr	r0, [pc, #12]	@ (8001710 <writeRegnew+0x3c>)
 8001704:	f001 f964 	bl	80029d0 <HAL_I2C_Master_Transmit>
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000008c 	.word	0x2000008c

08001714 <scanI2CBus>:


void scanI2CBus(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
    char buffer[16];
    SSD1306_Clear();
 800171a:	f000 fb88 	bl	8001e2e <SSD1306_Clear>
    SSD1306_GotoXY(0, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	2000      	movs	r0, #0
 8001722:	f000 facb 	bl	8001cbc <SSD1306_GotoXY>
    SSD1306_Puts("I2C Scan:", &Font_11x18, 1);
 8001726:	2201      	movs	r2, #1
 8001728:	491b      	ldr	r1, [pc, #108]	@ (8001798 <scanI2CBus+0x84>)
 800172a:	481c      	ldr	r0, [pc, #112]	@ (800179c <scanI2CBus+0x88>)
 800172c:	f000 fb5a 	bl	8001de4 <SSD1306_Puts>

    for (uint8_t address = 1; address < 128; address++) {
 8001730:	2301      	movs	r3, #1
 8001732:	75fb      	strb	r3, [r7, #23]
 8001734:	e024      	b.n	8001780 <scanI2CBus+0x6c>
        // Perform an I2C write operation to check if the device responds
        if (HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 1, 10) == HAL_OK) {
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	b29b      	uxth	r3, r3
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	b299      	uxth	r1, r3
 800173e:	230a      	movs	r3, #10
 8001740:	2201      	movs	r2, #1
 8001742:	4817      	ldr	r0, [pc, #92]	@ (80017a0 <scanI2CBus+0x8c>)
 8001744:	f001 fcae 	bl	80030a4 <HAL_I2C_IsDeviceReady>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d115      	bne.n	800177a <scanI2CBus+0x66>
            snprintf(buffer, sizeof(buffer), "Found: 0x%02X", address);
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	1d38      	adds	r0, r7, #4
 8001752:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <scanI2CBus+0x90>)
 8001754:	2110      	movs	r1, #16
 8001756:	f002 fd55 	bl	8004204 <sniprintf>
            SSD1306_GotoXY(0, 30);
 800175a:	211e      	movs	r1, #30
 800175c:	2000      	movs	r0, #0
 800175e:	f000 faad 	bl	8001cbc <SSD1306_GotoXY>
            SSD1306_Puts(buffer, &Font_11x18, 1);
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2201      	movs	r2, #1
 8001766:	490c      	ldr	r1, [pc, #48]	@ (8001798 <scanI2CBus+0x84>)
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fb3b 	bl	8001de4 <SSD1306_Puts>
            SSD1306_UpdateScreen();
 800176e:	f000 fa01 	bl	8001b74 <SSD1306_UpdateScreen>
            HAL_Delay(1000);
 8001772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001776:	f000 fd5b 	bl	8002230 <HAL_Delay>
    for (uint8_t address = 1; address < 128; address++) {
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	3301      	adds	r3, #1
 800177e:	75fb      	strb	r3, [r7, #23]
 8001780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001784:	2b00      	cmp	r3, #0
 8001786:	dad6      	bge.n	8001736 <scanI2CBus+0x22>
            //SD1306_Clear();// Delay to display each address found
        }
    }
    HAL_Delay(2000);  // Delay at the end of the scan
 8001788:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800178c:	f000 fd50 	bl	8002230 <HAL_Delay>
}
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000000 	.word	0x20000000
 800179c:	08004ba4 	.word	0x08004ba4
 80017a0:	2000008c 	.word	0x2000008c
 80017a4:	08004bb0 	.word	0x08004bb0

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ae:	f000 fcdd 	bl	800216c <HAL_Init>

  /* USER CODE BEGIN Init */
  SSD1306_Init();
 80017b2:	f000 f91b 	bl	80019ec <SSD1306_Init>
  SSD1306_GotoXY(0, 30);
 80017b6:	211e      	movs	r1, #30
 80017b8:	2000      	movs	r0, #0
 80017ba:	f000 fa7f 	bl	8001cbc <SSD1306_GotoXY>
  SSD1306_Puts("Initializing", &Font_11x18, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	493a      	ldr	r1, [pc, #232]	@ (80018ac <main+0x104>)
 80017c2:	483b      	ldr	r0, [pc, #236]	@ (80018b0 <main+0x108>)
 80017c4:	f000 fb0e 	bl	8001de4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80017c8:	f000 f9d4 	bl	8001b74 <SSD1306_UpdateScreen>
  HAL_Delay(500);
 80017cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017d0:	f000 fd2e 	bl	8002230 <HAL_Delay>

  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80017d4:	4837      	ldr	r0, [pc, #220]	@ (80018b4 <main+0x10c>)
 80017d6:	f000 ffb7 	bl	8002748 <HAL_I2C_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d011      	beq.n	8001804 <main+0x5c>
      SSD1306_GotoXY(0, 30);
 80017e0:	211e      	movs	r1, #30
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 fa6a 	bl	8001cbc <SSD1306_GotoXY>
      SSD1306_Puts("Failed", &Font_11x18, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	4930      	ldr	r1, [pc, #192]	@ (80018ac <main+0x104>)
 80017ec:	4832      	ldr	r0, [pc, #200]	@ (80018b8 <main+0x110>)
 80017ee:	f000 faf9 	bl	8001de4 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 80017f2:	f000 f9bf 	bl	8001b74 <SSD1306_UpdateScreen>
      HAL_Delay(2000);
 80017f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017fa:	f000 fd19 	bl	8002230 <HAL_Delay>
      Error_Handler();
 80017fe:	f000 f8ef 	bl	80019e0 <Error_Handler>
 8001802:	e00e      	b.n	8001822 <main+0x7a>
  } else {
      SSD1306_GotoXY(0, 30);
 8001804:	211e      	movs	r1, #30
 8001806:	2000      	movs	r0, #0
 8001808:	f000 fa58 	bl	8001cbc <SSD1306_GotoXY>
      SSD1306_Puts("Success", &Font_11x18, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	4927      	ldr	r1, [pc, #156]	@ (80018ac <main+0x104>)
 8001810:	482a      	ldr	r0, [pc, #168]	@ (80018bc <main+0x114>)
 8001812:	f000 fae7 	bl	8001de4 <SSD1306_Puts>
      HAL_Delay(2000);
 8001816:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800181a:	f000 fd09 	bl	8002230 <HAL_Delay>
      SSD1306_UpdateScreen();
 800181e:	f000 f9a9 	bl	8001b74 <SSD1306_UpdateScreen>
  }


  if (!init(true)) {
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff f9e2 	bl	8000bec <init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d110      	bne.n	8001850 <main+0xa8>
      SSD1306_GotoXY(0, 30);
 800182e:	211e      	movs	r1, #30
 8001830:	2000      	movs	r0, #0
 8001832:	f000 fa43 	bl	8001cbc <SSD1306_GotoXY>
      SSD1306_Puts("Failed2", &Font_11x18, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	491c      	ldr	r1, [pc, #112]	@ (80018ac <main+0x104>)
 800183a:	4821      	ldr	r0, [pc, #132]	@ (80018c0 <main+0x118>)
 800183c:	f000 fad2 	bl	8001de4 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8001840:	f000 f998 	bl	8001b74 <SSD1306_UpdateScreen>
      HAL_Delay(2000);
 8001844:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001848:	f000 fcf2 	bl	8002230 <HAL_Delay>
      Error_Handler();  // Will halt the program here
 800184c:	f000 f8c8 	bl	80019e0 <Error_Handler>
  }
  //setAddress(0x31);
  uint8_t currentAddress = 0x29;  // Default address
 8001850:	2329      	movs	r3, #41	@ 0x29
 8001852:	75fb      	strb	r3, [r7, #23]
  uint8_t newAddress = 0x31;      // New desired address
 8001854:	2331      	movs	r3, #49	@ 0x31
 8001856:	75bb      	strb	r3, [r7, #22]
  writeRegnew(currentAddress, 0x8A, newAddress & 0x7F);  // Change address
 8001858:	7dbb      	ldrb	r3, [r7, #22]
 800185a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800185e:	b2da      	uxtb	r2, r3
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	218a      	movs	r1, #138	@ 0x8a
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff35 	bl	80016d4 <writeRegnew>
  //I2C_SLAVE_DEVICE_ADDRESS = newAddress;


  HAL_Delay(10);
 800186a:	200a      	movs	r0, #10
 800186c:	f000 fce0 	bl	8002230 <HAL_Delay>

  SSD1306_GotoXY(0, 30);
 8001870:	211e      	movs	r1, #30
 8001872:	2000      	movs	r0, #0
 8001874:	f000 fa22 	bl	8001cbc <SSD1306_GotoXY>
  SSD1306_Puts("Initialized", &Font_11x18, 1);
 8001878:	2201      	movs	r2, #1
 800187a:	490c      	ldr	r1, [pc, #48]	@ (80018ac <main+0x104>)
 800187c:	4811      	ldr	r0, [pc, #68]	@ (80018c4 <main+0x11c>)
 800187e:	f000 fab1 	bl	8001de4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001882:	f000 f977 	bl	8001b74 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8001886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800188a:	f000 fcd1 	bl	8002230 <HAL_Delay>
  SSD1306_Clear();
 800188e:	f000 face 	bl	8001e2e <SSD1306_Clear>

  scanI2CBus();
 8001892:	f7ff ff3f 	bl	8001714 <scanI2CBus>
  SSD1306_Clear();
 8001896:	f000 faca 	bl	8001e2e <SSD1306_Clear>
  uint16_t distance;
  char buffer[16];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189a:	f000 f815 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189e:	f000 f87d 	bl	800199c <MX_GPIO_Init>
  MX_I2C1_Init();
 80018a2:	f000 f84d 	bl	8001940 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018a6:	bf00      	nop
 80018a8:	e7fd      	b.n	80018a6 <main+0xfe>
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000
 80018b0:	08004bc0 	.word	0x08004bc0
 80018b4:	2000008c 	.word	0x2000008c
 80018b8:	08004bd0 	.word	0x08004bd0
 80018bc:	08004bd8 	.word	0x08004bd8
 80018c0:	08004be0 	.word	0x08004be0
 80018c4:	08004be8 	.word	0x08004be8

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b090      	sub	sp, #64	@ 0x40
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	2228      	movs	r2, #40	@ 0x28
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fcc8 	bl	800426c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ee:	2301      	movs	r3, #1
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f2:	2310      	movs	r3, #16
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 f884 	bl	8003a0c <HAL_RCC_OscConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800190a:	f000 f869 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190e:	230f      	movs	r3, #15
 8001910:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f002 faf2 	bl	8003f10 <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001932:	f000 f855 	bl	80019e0 <Error_Handler>
  }
}
 8001936:	bf00      	nop
 8001938:	3740      	adds	r7, #64	@ 0x40
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <MX_I2C1_Init+0x50>)
 8001946:	4a13      	ldr	r2, [pc, #76]	@ (8001994 <MX_I2C1_Init+0x54>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_I2C1_Init+0x50>)
 800194c:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <MX_I2C1_Init+0x58>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <MX_I2C1_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_I2C1_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <MX_I2C1_Init+0x50>)
 800195e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	@ (8001990 <MX_I2C1_Init+0x50>)
 800197e:	f000 fee3 	bl	8002748 <HAL_I2C_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001988:	f000 f82a 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000008c 	.word	0x2000008c
 8001994:	40005400 	.word	0x40005400
 8001998:	00061a80 	.word	0x00061a80

0800199c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6193      	str	r3, [r2, #24]
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <MX_GPIO_Init+0x40>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <Error_Handler+0x8>

080019ec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80019f2:	f000 fa25 	bl	8001e40 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80019f6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80019fa:	2201      	movs	r2, #1
 80019fc:	2178      	movs	r1, #120	@ 0x78
 80019fe:	485b      	ldr	r0, [pc, #364]	@ (8001b6c <SSD1306_Init+0x180>)
 8001a00:	f001 fb50 	bl	80030a4 <HAL_I2C_IsDeviceReady>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e0a9      	b.n	8001b62 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001a0e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001a12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a14:	e002      	b.n	8001a1c <SSD1306_Init+0x30>
		p--;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a22:	22ae      	movs	r2, #174	@ 0xae
 8001a24:	2100      	movs	r1, #0
 8001a26:	2078      	movs	r0, #120	@ 0x78
 8001a28:	f000 fa84 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2078      	movs	r0, #120	@ 0x78
 8001a32:	f000 fa7f 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a36:	2210      	movs	r2, #16
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2078      	movs	r0, #120	@ 0x78
 8001a3c:	f000 fa7a 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a40:	22b0      	movs	r2, #176	@ 0xb0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2078      	movs	r0, #120	@ 0x78
 8001a46:	f000 fa75 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a4a:	22c8      	movs	r2, #200	@ 0xc8
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2078      	movs	r0, #120	@ 0x78
 8001a50:	f000 fa70 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2078      	movs	r0, #120	@ 0x78
 8001a5a:	f000 fa6b 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a5e:	2210      	movs	r2, #16
 8001a60:	2100      	movs	r1, #0
 8001a62:	2078      	movs	r0, #120	@ 0x78
 8001a64:	f000 fa66 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001a68:	2240      	movs	r2, #64	@ 0x40
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2078      	movs	r0, #120	@ 0x78
 8001a6e:	f000 fa61 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001a72:	2281      	movs	r2, #129	@ 0x81
 8001a74:	2100      	movs	r1, #0
 8001a76:	2078      	movs	r0, #120	@ 0x78
 8001a78:	f000 fa5c 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001a7c:	22ff      	movs	r2, #255	@ 0xff
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2078      	movs	r0, #120	@ 0x78
 8001a82:	f000 fa57 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001a86:	22a1      	movs	r2, #161	@ 0xa1
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2078      	movs	r0, #120	@ 0x78
 8001a8c:	f000 fa52 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001a90:	22a6      	movs	r2, #166	@ 0xa6
 8001a92:	2100      	movs	r1, #0
 8001a94:	2078      	movs	r0, #120	@ 0x78
 8001a96:	f000 fa4d 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001a9a:	22a8      	movs	r2, #168	@ 0xa8
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2078      	movs	r0, #120	@ 0x78
 8001aa0:	f000 fa48 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001aa4:	223f      	movs	r2, #63	@ 0x3f
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2078      	movs	r0, #120	@ 0x78
 8001aaa:	f000 fa43 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aae:	22a4      	movs	r2, #164	@ 0xa4
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2078      	movs	r0, #120	@ 0x78
 8001ab4:	f000 fa3e 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001ab8:	22d3      	movs	r2, #211	@ 0xd3
 8001aba:	2100      	movs	r1, #0
 8001abc:	2078      	movs	r0, #120	@ 0x78
 8001abe:	f000 fa39 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2078      	movs	r0, #120	@ 0x78
 8001ac8:	f000 fa34 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001acc:	22d5      	movs	r2, #213	@ 0xd5
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2078      	movs	r0, #120	@ 0x78
 8001ad2:	f000 fa2f 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ad6:	22f0      	movs	r2, #240	@ 0xf0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2078      	movs	r0, #120	@ 0x78
 8001adc:	f000 fa2a 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001ae0:	22d9      	movs	r2, #217	@ 0xd9
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2078      	movs	r0, #120	@ 0x78
 8001ae6:	f000 fa25 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001aea:	2222      	movs	r2, #34	@ 0x22
 8001aec:	2100      	movs	r1, #0
 8001aee:	2078      	movs	r0, #120	@ 0x78
 8001af0:	f000 fa20 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001af4:	22da      	movs	r2, #218	@ 0xda
 8001af6:	2100      	movs	r1, #0
 8001af8:	2078      	movs	r0, #120	@ 0x78
 8001afa:	f000 fa1b 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001afe:	2212      	movs	r2, #18
 8001b00:	2100      	movs	r1, #0
 8001b02:	2078      	movs	r0, #120	@ 0x78
 8001b04:	f000 fa16 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b08:	22db      	movs	r2, #219	@ 0xdb
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2078      	movs	r0, #120	@ 0x78
 8001b0e:	f000 fa11 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b12:	2220      	movs	r2, #32
 8001b14:	2100      	movs	r1, #0
 8001b16:	2078      	movs	r0, #120	@ 0x78
 8001b18:	f000 fa0c 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b1c:	228d      	movs	r2, #141	@ 0x8d
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2078      	movs	r0, #120	@ 0x78
 8001b22:	f000 fa07 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b26:	2214      	movs	r2, #20
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2078      	movs	r0, #120	@ 0x78
 8001b2c:	f000 fa02 	bl	8001f34 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b30:	22af      	movs	r2, #175	@ 0xaf
 8001b32:	2100      	movs	r1, #0
 8001b34:	2078      	movs	r0, #120	@ 0x78
 8001b36:	f000 f9fd 	bl	8001f34 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b3a:	222e      	movs	r2, #46	@ 0x2e
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2078      	movs	r0, #120	@ 0x78
 8001b40:	f000 f9f8 	bl	8001f34 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f000 f843 	bl	8001bd0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001b4a:	f000 f813 	bl	8001b74 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <SSD1306_Init+0x184>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <SSD1306_Init+0x184>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <SSD1306_Init+0x184>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000008c 	.word	0x2000008c
 8001b70:	200004e0 	.word	0x200004e0

08001b74 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	e01d      	b.n	8001bbc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	3b50      	subs	r3, #80	@ 0x50
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2078      	movs	r0, #120	@ 0x78
 8001b8c:	f000 f9d2 	bl	8001f34 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2078      	movs	r0, #120	@ 0x78
 8001b96:	f000 f9cd 	bl	8001f34 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2078      	movs	r0, #120	@ 0x78
 8001ba0:	f000 f9c8 	bl	8001f34 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	01db      	lsls	r3, r3, #7
 8001ba8:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <SSD1306_UpdateScreen+0x58>)
 8001baa:	441a      	add	r2, r3
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	2140      	movs	r1, #64	@ 0x40
 8001bb0:	2078      	movs	r0, #120	@ 0x78
 8001bb2:	f000 f959 	bl	8001e68 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d9de      	bls.n	8001b80 <SSD1306_UpdateScreen+0xc>
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200000e0 	.word	0x200000e0

08001bd0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <SSD1306_Fill+0x14>
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <SSD1306_Fill+0x16>
 8001be4:	23ff      	movs	r3, #255	@ 0xff
 8001be6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bea:	4619      	mov	r1, r3
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <SSD1306_Fill+0x2c>)
 8001bee:	f002 fb3d 	bl	800426c <memset>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200000e0 	.word	0x200000e0

08001c00 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	80bb      	strh	r3, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	70fb      	strb	r3, [r7, #3]
	if (
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c16:	d848      	bhi.n	8001caa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001c18:	88bb      	ldrh	r3, [r7, #4]
 8001c1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c1c:	d845      	bhi.n	8001caa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <SSD1306_DrawPixel+0xb4>)
 8001c20:	791b      	ldrb	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2301      	moveq	r3, #1
 8001c2e:	2300      	movne	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d11a      	bne.n	8001c70 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c3a:	88fa      	ldrh	r2, [r7, #6]
 8001c3c:	88bb      	ldrh	r3, [r7, #4]
 8001c3e:	08db      	lsrs	r3, r3, #3
 8001c40:	b298      	uxth	r0, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	01db      	lsls	r3, r3, #7
 8001c46:	4413      	add	r3, r2
 8001c48:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb8 <SSD1306_DrawPixel+0xb8>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	b25a      	sxtb	r2, r3
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b259      	sxtb	r1, r3
 8001c60:	88fa      	ldrh	r2, [r7, #6]
 8001c62:	4603      	mov	r3, r0
 8001c64:	01db      	lsls	r3, r3, #7
 8001c66:	4413      	add	r3, r2
 8001c68:	b2c9      	uxtb	r1, r1
 8001c6a:	4a13      	ldr	r2, [pc, #76]	@ (8001cb8 <SSD1306_DrawPixel+0xb8>)
 8001c6c:	54d1      	strb	r1, [r2, r3]
 8001c6e:	e01d      	b.n	8001cac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	08db      	lsrs	r3, r3, #3
 8001c76:	b298      	uxth	r0, r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	01db      	lsls	r3, r3, #7
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb8 <SSD1306_DrawPixel+0xb8>)
 8001c80:	5cd3      	ldrb	r3, [r2, r3]
 8001c82:	b25a      	sxtb	r2, r3
 8001c84:	88bb      	ldrh	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	4013      	ands	r3, r2
 8001c98:	b259      	sxtb	r1, r3
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	01db      	lsls	r3, r3, #7
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b2c9      	uxtb	r1, r1
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <SSD1306_DrawPixel+0xb8>)
 8001ca6:	54d1      	strb	r1, [r2, r3]
 8001ca8:	e000      	b.n	8001cac <SSD1306_DrawPixel+0xac>
		return;
 8001caa:	bf00      	nop
	}
}
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	200004e0 	.word	0x200004e0
 8001cb8:	200000e0 	.word	0x200000e0

08001cbc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	80fb      	strh	r3, [r7, #6]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001ccc:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <SSD1306_GotoXY+0x28>)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <SSD1306_GotoXY+0x28>)
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	8053      	strh	r3, [r2, #2]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	200004e0 	.word	0x200004e0

08001ce8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cf8:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <SSD1306_Putc+0xf8>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
	if (
 8001d04:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d06:	dc07      	bgt.n	8001d18 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d08:	4b35      	ldr	r3, [pc, #212]	@ (8001de0 <SSD1306_Putc+0xf8>)
 8001d0a:	885b      	ldrh	r3, [r3, #2]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	785b      	ldrb	r3, [r3, #1]
 8001d12:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d14:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d16:	dd01      	ble.n	8001d1c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e05d      	b.n	8001dd8 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e04b      	b.n	8001dba <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	3b20      	subs	r3, #32
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	7849      	ldrb	r1, [r1, #1]
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	440b      	add	r3, r1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	e030      	b.n	8001da8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d010      	beq.n	8001d78 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d56:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <SSD1306_Putc+0xf8>)
 8001d58:	881a      	ldrh	r2, [r3, #0]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	b298      	uxth	r0, r3
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <SSD1306_Putc+0xf8>)
 8001d64:	885a      	ldrh	r2, [r3, #2]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	79ba      	ldrb	r2, [r7, #6]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7ff ff45 	bl	8001c00 <SSD1306_DrawPixel>
 8001d76:	e014      	b.n	8001da2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001d78:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <SSD1306_Putc+0xf8>)
 8001d7a:	881a      	ldrh	r2, [r3, #0]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b298      	uxth	r0, r3
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <SSD1306_Putc+0xf8>)
 8001d86:	885a      	ldrh	r2, [r3, #2]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b299      	uxth	r1, r3
 8001d90:	79bb      	ldrb	r3, [r7, #6]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf0c      	ite	eq
 8001d96:	2301      	moveq	r3, #1
 8001d98:	2300      	movne	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff ff2f 	bl	8001c00 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	3301      	adds	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d3c8      	bcc.n	8001d46 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d3ad      	bcc.n	8001d22 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <SSD1306_Putc+0xf8>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <SSD1306_Putc+0xf8>)
 8001dd4:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200004e0 	.word	0x200004e0

08001de4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001df2:	e012      	b.n	8001e1a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	79fa      	ldrb	r2, [r7, #7]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff73 	bl	8001ce8 <SSD1306_Putc>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d002      	beq.n	8001e14 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	e008      	b.n	8001e26 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1e8      	bne.n	8001df4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	781b      	ldrb	r3, [r3, #0]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fecc 	bl	8001bd0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001e38:	f7ff fe9c 	bl	8001b74 <SSD1306_UpdateScreen>
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <ssd1306_I2C_Init+0x24>)
 8001e48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e4a:	e002      	b.n	8001e52 <ssd1306_I2C_Init+0x12>
		p--;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f9      	bne.n	8001e4c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	0003d090 	.word	0x0003d090

08001e68 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b0c7      	sub	sp, #284	@ 0x11c
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4608      	mov	r0, r1
 8001e72:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001e76:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001e7a:	600a      	str	r2, [r1, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e82:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001e86:	4622      	mov	r2, r4
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e8e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001e92:	4602      	mov	r2, r0
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e9e:	460a      	mov	r2, r1
 8001ea0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001ea2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eaa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001eae:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001ebc:	e015      	b.n	8001eea <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001ebe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ec2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ec6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	441a      	add	r2, r3
 8001ece:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	7811      	ldrb	r1, [r2, #0]
 8001ed6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001eda:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001ede:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ee0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001eea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ef4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001ef8:	8812      	ldrh	r2, [r2, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d8df      	bhi.n	8001ebe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001efe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f02:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b299      	uxth	r1, r3
 8001f0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f107 020c 	add.w	r2, r7, #12
 8001f1c:	200a      	movs	r0, #10
 8001f1e:	9000      	str	r0, [sp, #0]
 8001f20:	4803      	ldr	r0, [pc, #12]	@ (8001f30 <ssd1306_I2C_WriteMulti+0xc8>)
 8001f22:	f000 fd55 	bl	80029d0 <HAL_I2C_Master_Transmit>
}
 8001f26:	bf00      	nop
 8001f28:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd90      	pop	{r4, r7, pc}
 8001f30:	2000008c 	.word	0x2000008c

08001f34 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	71bb      	strb	r3, [r7, #6]
 8001f42:	4613      	mov	r3, r2
 8001f44:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f4a:	797b      	ldrb	r3, [r7, #5]
 8001f4c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	b299      	uxth	r1, r3
 8001f52:	f107 020c 	add.w	r2, r7, #12
 8001f56:	230a      	movs	r3, #10
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	4803      	ldr	r0, [pc, #12]	@ (8001f6c <ssd1306_I2C_Write+0x38>)
 8001f5e:	f000 fd37 	bl	80029d0 <HAL_I2C_Master_Transmit>
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000008c 	.word	0x2000008c

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_MspInit+0x5c>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <HAL_MspInit+0x5c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6193      	str	r3, [r2, #24]
 8001f82:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_MspInit+0x5c>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <HAL_MspInit+0x5c>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a0e      	ldr	r2, [pc, #56]	@ (8001fcc <HAL_MspInit+0x5c>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <HAL_MspInit+0x5c>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_MspInit+0x60>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <HAL_MspInit+0x60>)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000

08001fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a15      	ldr	r2, [pc, #84]	@ (8002044 <HAL_I2C_MspInit+0x70>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d123      	bne.n	800203c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_I2C_MspInit+0x74>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_I2C_MspInit+0x74>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_I2C_MspInit+0x74>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800200c:	23c0      	movs	r3, #192	@ 0xc0
 800200e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002010:	2312      	movs	r3, #18
 8002012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4619      	mov	r1, r3
 800201e:	480b      	ldr	r0, [pc, #44]	@ (800204c <HAL_I2C_MspInit+0x78>)
 8002020:	f000 fa0e 	bl	8002440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_I2C_MspInit+0x74>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <HAL_I2C_MspInit+0x74>)
 800202a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800202e:	61d3      	str	r3, [r2, #28]
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_I2C_MspInit+0x74>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800203c:	bf00      	nop
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40005400 	.word	0x40005400
 8002048:	40021000 	.word	0x40021000
 800204c:	40010c00 	.word	0x40010c00

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <NMI_Handler+0x4>

08002058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <MemManage_Handler+0x4>

08002068 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <UsageFault_Handler+0x4>

08002078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a0:	f000 f8aa 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b0:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <_sbrk+0x5c>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <_sbrk+0x60>)
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <_sbrk+0x64>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <_sbrk+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d207      	bcs.n	80020e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d8:	f002 f8d0 	bl	800427c <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	220c      	movs	r2, #12
 80020e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	e009      	b.n	80020fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	@ (800210c <_sbrk+0x64>)
 80020f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20005000 	.word	0x20005000
 8002108:	00000400 	.word	0x00000400
 800210c:	200004e8 	.word	0x200004e8
 8002110:	20000638 	.word	0x20000638

08002114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002120:	f7ff fff8 	bl	8002114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002124:	480b      	ldr	r0, [pc, #44]	@ (8002154 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002126:	490c      	ldr	r1, [pc, #48]	@ (8002158 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002128:	4a0c      	ldr	r2, [pc, #48]	@ (800215c <LoopFillZerobss+0x16>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800213c:	4c09      	ldr	r4, [pc, #36]	@ (8002164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214a:	f002 f89d 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800214e:	f7ff fb2b 	bl	80017a8 <main>
  bx lr
 8002152:	4770      	bx	lr
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800215c:	080059b8 	.word	0x080059b8
  ldr r2, =_sbss
 8002160:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002164:	20000638 	.word	0x20000638

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_Init+0x28>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <HAL_Init+0x28>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f92b 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	200f      	movs	r0, #15
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fef2 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f935 	bl	8002426 <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f000 f90b 	bl	80023ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	@ (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000010 	.word	0x20000010
 80021f0:	20000018 	.word	0x20000018
 80021f4:	20000014 	.word	0x20000014

080021f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_IncTick+0x1c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <HAL_IncTick+0x20>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a03      	ldr	r2, [pc, #12]	@ (8002218 <HAL_IncTick+0x20>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000018 	.word	0x20000018
 8002218:	200004ec 	.word	0x200004ec

0800221c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b02      	ldr	r3, [pc, #8]	@ (800222c <HAL_GetTick+0x10>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	200004ec 	.word	0x200004ec

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff fff0 	bl	800221c <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffe0 	bl	800221c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000018 	.word	0x20000018

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	@ (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	@ (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	@ 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff90 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff49 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff5e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff90 	bl	8002330 <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5f 	bl	80022dc <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffb0 	bl	8002394 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b08b      	sub	sp, #44	@ 0x2c
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002452:	e169      	b.n	8002728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002454:	2201      	movs	r2, #1
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 8158 	bne.w	8002722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a9a      	ldr	r2, [pc, #616]	@ (80026e0 <HAL_GPIO_Init+0x2a0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d05e      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 800247c:	4a98      	ldr	r2, [pc, #608]	@ (80026e0 <HAL_GPIO_Init+0x2a0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d875      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 8002482:	4a98      	ldr	r2, [pc, #608]	@ (80026e4 <HAL_GPIO_Init+0x2a4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d058      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 8002488:	4a96      	ldr	r2, [pc, #600]	@ (80026e4 <HAL_GPIO_Init+0x2a4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d86f      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 800248e:	4a96      	ldr	r2, [pc, #600]	@ (80026e8 <HAL_GPIO_Init+0x2a8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d052      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 8002494:	4a94      	ldr	r2, [pc, #592]	@ (80026e8 <HAL_GPIO_Init+0x2a8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d869      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 800249a:	4a94      	ldr	r2, [pc, #592]	@ (80026ec <HAL_GPIO_Init+0x2ac>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d04c      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 80024a0:	4a92      	ldr	r2, [pc, #584]	@ (80026ec <HAL_GPIO_Init+0x2ac>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d863      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 80024a6:	4a92      	ldr	r2, [pc, #584]	@ (80026f0 <HAL_GPIO_Init+0x2b0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d046      	beq.n	800253a <HAL_GPIO_Init+0xfa>
 80024ac:	4a90      	ldr	r2, [pc, #576]	@ (80026f0 <HAL_GPIO_Init+0x2b0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d85d      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 80024b2:	2b12      	cmp	r3, #18
 80024b4:	d82a      	bhi.n	800250c <HAL_GPIO_Init+0xcc>
 80024b6:	2b12      	cmp	r3, #18
 80024b8:	d859      	bhi.n	800256e <HAL_GPIO_Init+0x12e>
 80024ba:	a201      	add	r2, pc, #4	@ (adr r2, 80024c0 <HAL_GPIO_Init+0x80>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	0800253b 	.word	0x0800253b
 80024c4:	08002515 	.word	0x08002515
 80024c8:	08002527 	.word	0x08002527
 80024cc:	08002569 	.word	0x08002569
 80024d0:	0800256f 	.word	0x0800256f
 80024d4:	0800256f 	.word	0x0800256f
 80024d8:	0800256f 	.word	0x0800256f
 80024dc:	0800256f 	.word	0x0800256f
 80024e0:	0800256f 	.word	0x0800256f
 80024e4:	0800256f 	.word	0x0800256f
 80024e8:	0800256f 	.word	0x0800256f
 80024ec:	0800256f 	.word	0x0800256f
 80024f0:	0800256f 	.word	0x0800256f
 80024f4:	0800256f 	.word	0x0800256f
 80024f8:	0800256f 	.word	0x0800256f
 80024fc:	0800256f 	.word	0x0800256f
 8002500:	0800256f 	.word	0x0800256f
 8002504:	0800251d 	.word	0x0800251d
 8002508:	08002531 	.word	0x08002531
 800250c:	4a79      	ldr	r2, [pc, #484]	@ (80026f4 <HAL_GPIO_Init+0x2b4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002512:	e02c      	b.n	800256e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	623b      	str	r3, [r7, #32]
          break;
 800251a:	e029      	b.n	8002570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	3304      	adds	r3, #4
 8002522:	623b      	str	r3, [r7, #32]
          break;
 8002524:	e024      	b.n	8002570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	3308      	adds	r3, #8
 800252c:	623b      	str	r3, [r7, #32]
          break;
 800252e:	e01f      	b.n	8002570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	330c      	adds	r3, #12
 8002536:	623b      	str	r3, [r7, #32]
          break;
 8002538:	e01a      	b.n	8002570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002542:	2304      	movs	r3, #4
 8002544:	623b      	str	r3, [r7, #32]
          break;
 8002546:	e013      	b.n	8002570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002550:	2308      	movs	r3, #8
 8002552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	611a      	str	r2, [r3, #16]
          break;
 800255a:	e009      	b.n	8002570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800255c:	2308      	movs	r3, #8
 800255e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	615a      	str	r2, [r3, #20]
          break;
 8002566:	e003      	b.n	8002570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
          break;
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x130>
          break;
 800256e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2bff      	cmp	r3, #255	@ 0xff
 8002574:	d801      	bhi.n	800257a <HAL_GPIO_Init+0x13a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	e001      	b.n	800257e <HAL_GPIO_Init+0x13e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2bff      	cmp	r3, #255	@ 0xff
 8002584:	d802      	bhi.n	800258c <HAL_GPIO_Init+0x14c>
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	e002      	b.n	8002592 <HAL_GPIO_Init+0x152>
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	3b08      	subs	r3, #8
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	210f      	movs	r1, #15
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	401a      	ands	r2, r3
 80025a4:	6a39      	ldr	r1, [r7, #32]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80b1 	beq.w	8002722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025c0:	4b4d      	ldr	r3, [pc, #308]	@ (80026f8 <HAL_GPIO_Init+0x2b8>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a4c      	ldr	r2, [pc, #304]	@ (80026f8 <HAL_GPIO_Init+0x2b8>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <HAL_GPIO_Init+0x2b8>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025d8:	4a48      	ldr	r2, [pc, #288]	@ (80026fc <HAL_GPIO_Init+0x2bc>)
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a40      	ldr	r2, [pc, #256]	@ (8002700 <HAL_GPIO_Init+0x2c0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d013      	beq.n	800262c <HAL_GPIO_Init+0x1ec>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3f      	ldr	r2, [pc, #252]	@ (8002704 <HAL_GPIO_Init+0x2c4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00d      	beq.n	8002628 <HAL_GPIO_Init+0x1e8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3e      	ldr	r2, [pc, #248]	@ (8002708 <HAL_GPIO_Init+0x2c8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d007      	beq.n	8002624 <HAL_GPIO_Init+0x1e4>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3d      	ldr	r2, [pc, #244]	@ (800270c <HAL_GPIO_Init+0x2cc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_GPIO_Init+0x1e0>
 800261c:	2303      	movs	r3, #3
 800261e:	e006      	b.n	800262e <HAL_GPIO_Init+0x1ee>
 8002620:	2304      	movs	r3, #4
 8002622:	e004      	b.n	800262e <HAL_GPIO_Init+0x1ee>
 8002624:	2302      	movs	r3, #2
 8002626:	e002      	b.n	800262e <HAL_GPIO_Init+0x1ee>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_GPIO_Init+0x1ee>
 800262c:	2300      	movs	r3, #0
 800262e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002630:	f002 0203 	and.w	r2, r2, #3
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	4093      	lsls	r3, r2
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800263e:	492f      	ldr	r1, [pc, #188]	@ (80026fc <HAL_GPIO_Init+0x2bc>)
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002658:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	492c      	ldr	r1, [pc, #176]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002666:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	43db      	mvns	r3, r3
 800266e:	4928      	ldr	r1, [pc, #160]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002670:	4013      	ands	r3, r2
 8002672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d006      	beq.n	800268e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002680:	4b23      	ldr	r3, [pc, #140]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	4922      	ldr	r1, [pc, #136]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
 800268c:	e006      	b.n	800269c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	43db      	mvns	r3, r3
 8002696:	491e      	ldr	r1, [pc, #120]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002698:	4013      	ands	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026a8:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4918      	ldr	r1, [pc, #96]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	43db      	mvns	r3, r3
 80026be:	4914      	ldr	r1, [pc, #80]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d021      	beq.n	8002714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	490e      	ldr	r1, [pc, #56]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e021      	b.n	8002722 <HAL_GPIO_Init+0x2e2>
 80026de:	bf00      	nop
 80026e0:	10320000 	.word	0x10320000
 80026e4:	10310000 	.word	0x10310000
 80026e8:	10220000 	.word	0x10220000
 80026ec:	10210000 	.word	0x10210000
 80026f0:	10120000 	.word	0x10120000
 80026f4:	10110000 	.word	0x10110000
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010000 	.word	0x40010000
 8002700:	40010800 	.word	0x40010800
 8002704:	40010c00 	.word	0x40010c00
 8002708:	40011000 	.word	0x40011000
 800270c:	40011400 	.word	0x40011400
 8002710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_GPIO_Init+0x304>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	43db      	mvns	r3, r3
 800271c:	4909      	ldr	r1, [pc, #36]	@ (8002744 <HAL_GPIO_Init+0x304>)
 800271e:	4013      	ands	r3, r2
 8002720:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	3301      	adds	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	fa22 f303 	lsr.w	r3, r2, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	f47f ae8e 	bne.w	8002454 <HAL_GPIO_Init+0x14>
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	372c      	adds	r7, #44	@ 0x2c
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e12b      	b.n	80029b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff fc30 	bl	8001fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	@ 0x24
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800279a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027ac:	f001 fcf8 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 80027b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a81      	ldr	r2, [pc, #516]	@ (80029bc <HAL_I2C_Init+0x274>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d807      	bhi.n	80027cc <HAL_I2C_Init+0x84>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a80      	ldr	r2, [pc, #512]	@ (80029c0 <HAL_I2C_Init+0x278>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e006      	b.n	80027da <HAL_I2C_Init+0x92>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a7d      	ldr	r2, [pc, #500]	@ (80029c4 <HAL_I2C_Init+0x27c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0e7      	b.n	80029b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a78      	ldr	r2, [pc, #480]	@ (80029c8 <HAL_I2C_Init+0x280>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0c9b      	lsrs	r3, r3, #18
 80027ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a6a      	ldr	r2, [pc, #424]	@ (80029bc <HAL_I2C_Init+0x274>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d802      	bhi.n	800281c <HAL_I2C_Init+0xd4>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3301      	adds	r3, #1
 800281a:	e009      	b.n	8002830 <HAL_I2C_Init+0xe8>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4a69      	ldr	r2, [pc, #420]	@ (80029cc <HAL_I2C_Init+0x284>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	3301      	adds	r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	430b      	orrs	r3, r1
 8002836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002842:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	495c      	ldr	r1, [pc, #368]	@ (80029bc <HAL_I2C_Init+0x274>)
 800284c:	428b      	cmp	r3, r1
 800284e:	d819      	bhi.n	8002884 <HAL_I2C_Init+0x13c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e59      	subs	r1, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fbb1 f3f3 	udiv	r3, r1, r3
 800285e:	1c59      	adds	r1, r3, #1
 8002860:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002864:	400b      	ands	r3, r1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_I2C_Init+0x138>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e59      	subs	r1, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fbb1 f3f3 	udiv	r3, r1, r3
 8002878:	3301      	adds	r3, #1
 800287a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287e:	e051      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002880:	2304      	movs	r3, #4
 8002882:	e04f      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <HAL_I2C_Init+0x168>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e012      	b.n	80028d6 <HAL_I2C_Init+0x18e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e58      	subs	r0, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x196>
 80028da:	2301      	movs	r3, #1
 80028dc:	e022      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10e      	bne.n	8002904 <HAL_I2C_Init+0x1bc>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e58      	subs	r0, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	440b      	add	r3, r1
 80028f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002902:	e00f      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	6809      	ldr	r1, [r1, #0]
 8002928:	4313      	orrs	r3, r2
 800292a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6911      	ldr	r1, [r2, #16]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68d2      	ldr	r2, [r2, #12]
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	430b      	orrs	r3, r1
 8002966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	000186a0 	.word	0x000186a0
 80029c0:	001e847f 	.word	0x001e847f
 80029c4:	003d08ff 	.word	0x003d08ff
 80029c8:	431bde83 	.word	0x431bde83
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	461a      	mov	r2, r3
 80029dc:	460b      	mov	r3, r1
 80029de:	817b      	strh	r3, [r7, #10]
 80029e0:	4613      	mov	r3, r2
 80029e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff fc1a 	bl	800221c <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	f040 80e0 	bne.w	8002bb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2319      	movs	r3, #25
 80029fe:	2201      	movs	r2, #1
 8002a00:	4970      	ldr	r1, [pc, #448]	@ (8002bc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fdcc 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0d3      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2C_Master_Transmit+0x50>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0cc      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1ea>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d007      	beq.n	8002a46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2221      	movs	r2, #33	@ 0x21
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2210      	movs	r2, #16
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	893a      	ldrh	r2, [r7, #8]
 8002a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a50      	ldr	r2, [pc, #320]	@ (8002bc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a88:	8979      	ldrh	r1, [r7, #10]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	6a3a      	ldr	r2, [r7, #32]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fc36 	bl	8003300 <I2C_MasterRequestWrite>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e08d      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ab4:	e066      	b.n	8002b84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	6a39      	ldr	r1, [r7, #32]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fe8a 	bl	80037d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d107      	bne.n	8002ade <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002adc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e06b      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d11b      	bne.n	8002b58 <HAL_I2C_Master_Transmit+0x188>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d017      	beq.n	8002b58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	6a39      	ldr	r1, [r7, #32]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fe81 	bl	8003864 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00d      	beq.n	8002b84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d107      	bne.n	8002b80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e01a      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d194      	bne.n	8002ab6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	00100002 	.word	0x00100002
 8002bc8:	ffff0000 	.word	0xffff0000

08002bcc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08c      	sub	sp, #48	@ 0x30
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	817b      	strh	r3, [r7, #10]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff fb1a 	bl	800221c <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	f040 824b 	bne.w	800308e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2319      	movs	r3, #25
 8002bfe:	2201      	movs	r2, #1
 8002c00:	497f      	ldr	r1, [pc, #508]	@ (8002e00 <HAL_I2C_Master_Receive+0x234>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fccc 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e23e      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_I2C_Master_Receive+0x54>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e237      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d007      	beq.n	8002c46 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2222      	movs	r2, #34	@ 0x22
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2210      	movs	r2, #16
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a5f      	ldr	r2, [pc, #380]	@ (8002e04 <HAL_I2C_Master_Receive+0x238>)
 8002c86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c88:	8979      	ldrh	r1, [r7, #10]
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fbb8 	bl	8003404 <I2C_MasterRequestRead>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1f8      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d113      	bne.n	8002cce <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e1cc      	b.n	8003068 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d11e      	bne.n	8002d14 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce6:	b672      	cpsid	i
}
 8002ce8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d10:	b662      	cpsie	i
}
 8002d12:	e035      	b.n	8002d80 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d11e      	bne.n	8002d5a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2c:	b672      	cpsid	i
}
 8002d2e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d56:	b662      	cpsie	i
}
 8002d58:	e012      	b.n	8002d80 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d80:	e172      	b.n	8003068 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	f200 811f 	bhi.w	8002fca <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d123      	bne.n	8002ddc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fdab 	bl	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e173      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dda:	e145      	b.n	8003068 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d152      	bne.n	8002e8a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dea:	2200      	movs	r2, #0
 8002dec:	4906      	ldr	r1, [pc, #24]	@ (8002e08 <HAL_I2C_Master_Receive+0x23c>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fbd6 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e148      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
 8002dfe:	bf00      	nop
 8002e00:	00100002 	.word	0x00100002
 8002e04:	ffff0000 	.word	0xffff0000
 8002e08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0c:	b672      	cpsid	i
}
 8002e0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e52:	b662      	cpsie	i
}
 8002e54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e88:	e0ee      	b.n	8003068 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	2200      	movs	r2, #0
 8002e92:	4981      	ldr	r1, [pc, #516]	@ (8003098 <HAL_I2C_Master_Receive+0x4cc>)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fb83 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0f5      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb4:	b672      	cpsid	i
}
 8002eb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002eea:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_I2C_Master_Receive+0x4d0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	08db      	lsrs	r3, r3, #3
 8002ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80030a0 <HAL_I2C_Master_Receive+0x4d4>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0a1a      	lsrs	r2, r3, #8
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00da      	lsls	r2, r3, #3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d118      	bne.n	8002f42 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f32:	b662      	cpsie	i
}
 8002f34:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0a6      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d1d9      	bne.n	8002f04 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f92:	b662      	cpsie	i
}
 8002f94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fc8:	e04e      	b.n	8003068 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fc90 	bl	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e058      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d124      	bne.n	8003068 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003022:	2b03      	cmp	r3, #3
 8003024:	d107      	bne.n	8003036 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003034:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	2b00      	cmp	r3, #0
 800306e:	f47f ae88 	bne.w	8002d82 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e000      	b.n	8003090 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800308e:	2302      	movs	r3, #2
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	3728      	adds	r7, #40	@ 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	00010004 	.word	0x00010004
 800309c:	20000010 	.word	0x20000010
 80030a0:	14f8b589 	.word	0x14f8b589

080030a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	@ 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	460b      	mov	r3, r1
 80030b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff f8b2 	bl	800221c <HAL_GetTick>
 80030b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f040 8111 	bne.w	80032ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2319      	movs	r3, #25
 80030d2:	2201      	movs	r2, #1
 80030d4:	4988      	ldr	r1, [pc, #544]	@ (80032f8 <HAL_I2C_IsDeviceReady+0x254>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fa62 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
 80030e4:	e104      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2C_IsDeviceReady+0x50>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0fd      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d007      	beq.n	800311a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003128:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2224      	movs	r2, #36	@ 0x24
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a70      	ldr	r2, [pc, #448]	@ (80032fc <HAL_I2C_IsDeviceReady+0x258>)
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800314c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2200      	movs	r2, #0
 8003156:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fa20 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003174:	d103      	bne.n	800317e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0b6      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003190:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003192:	f7ff f843 	bl	800221c <HAL_GetTick>
 8003196:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031c6:	e025      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031c8:	f7ff f828 	bl	800221c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d302      	bcc.n	80031de <HAL_I2C_IsDeviceReady+0x13a>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	22a0      	movs	r2, #160	@ 0xa0
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2ba0      	cmp	r3, #160	@ 0xa0
 800321e:	d005      	beq.n	800322c <HAL_I2C_IsDeviceReady+0x188>
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <HAL_I2C_IsDeviceReady+0x188>
 8003226:	7dbb      	ldrb	r3, [r7, #22]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0cd      	beq.n	80031c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d129      	bne.n	8003296 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003250:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2319      	movs	r3, #25
 800326e:	2201      	movs	r2, #1
 8003270:	4921      	ldr	r1, [pc, #132]	@ (80032f8 <HAL_I2C_IsDeviceReady+0x254>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f994 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e036      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e02c      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2319      	movs	r3, #25
 80032b6:	2201      	movs	r2, #1
 80032b8:	490f      	ldr	r1, [pc, #60]	@ (80032f8 <HAL_I2C_IsDeviceReady+0x254>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f970 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e012      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f4ff af32 	bcc.w	800313e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
  }
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00100002 	.word	0x00100002
 80032fc:	ffff0000 	.word	0xffff0000

08003300 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	460b      	mov	r3, r1
 800330e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d006      	beq.n	800332a <I2C_MasterRequestWrite+0x2a>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d003      	beq.n	800332a <I2C_MasterRequestWrite+0x2a>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003328:	d108      	bne.n	800333c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e00b      	b.n	8003354 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	2b12      	cmp	r3, #18
 8003342:	d107      	bne.n	8003354 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f91d 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800337a:	d103      	bne.n	8003384 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e035      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003390:	d108      	bne.n	80033a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	e01b      	b.n	80033dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033a4:	897b      	ldrh	r3, [r7, #10]
 80033a6:	11db      	asrs	r3, r3, #7
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0306 	and.w	r3, r3, #6
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f063 030f 	orn	r3, r3, #15
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	490e      	ldr	r1, [pc, #56]	@ (80033fc <I2C_MasterRequestWrite+0xfc>)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f966 	bl	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e010      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4907      	ldr	r1, [pc, #28]	@ (8003400 <I2C_MasterRequestWrite+0x100>)
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f956 	bl	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	00010008 	.word	0x00010008
 8003400:	00010002 	.word	0x00010002

08003404 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	460b      	mov	r3, r1
 8003412:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003428:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d006      	beq.n	800343e <I2C_MasterRequestRead+0x3a>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d003      	beq.n	800343e <I2C_MasterRequestRead+0x3a>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800343c:	d108      	bne.n	8003450 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e00b      	b.n	8003468 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	2b11      	cmp	r3, #17
 8003456:	d107      	bne.n	8003468 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f893 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800348e:	d103      	bne.n	8003498 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e079      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034a4:	d108      	bne.n	80034b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e05f      	b.n	8003578 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	11db      	asrs	r3, r3, #7
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 0306 	and.w	r3, r3, #6
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f063 030f 	orn	r3, r3, #15
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4930      	ldr	r1, [pc, #192]	@ (8003598 <I2C_MasterRequestRead+0x194>)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f8dc 	bl	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e054      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4929      	ldr	r1, [pc, #164]	@ (800359c <I2C_MasterRequestRead+0x198>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8cc 	bl	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e044      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800352a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f831 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003552:	d103      	bne.n	800355c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800355a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e017      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003560:	897b      	ldrh	r3, [r7, #10]
 8003562:	11db      	asrs	r3, r3, #7
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0306 	and.w	r3, r3, #6
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f063 030e 	orn	r3, r3, #14
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4907      	ldr	r1, [pc, #28]	@ (800359c <I2C_MasterRequestRead+0x198>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f888 	bl	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	00010008 	.word	0x00010008
 800359c:	00010002 	.word	0x00010002

080035a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b0:	e048      	b.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d044      	beq.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7fe fe2f 	bl	800221c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d139      	bne.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10d      	bne.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	43da      	mvns	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4013      	ands	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	e00c      	b.n	8003610 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	429a      	cmp	r2, r3
 8003614:	d116      	bne.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e023      	b.n	800368c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10d      	bne.n	800366a <I2C_WaitOnFlagUntilTimeout+0xca>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	43da      	mvns	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	e00c      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	43da      	mvns	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4013      	ands	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	429a      	cmp	r2, r3
 8003688:	d093      	beq.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a2:	e071      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d123      	bne.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e067      	b.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003702:	d041      	beq.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003704:	f7fe fd8a 	bl	800221c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d136      	bne.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10c      	bne.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e00b      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e021      	b.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10c      	bne.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	43da      	mvns	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e00b      	b.n	80037c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	43da      	mvns	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4013      	ands	r3, r2
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f47f af6d 	bne.w	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e0:	e034      	b.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f8e3 	bl	80039ae <I2C_IsAcknowledgeFailed>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e034      	b.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d028      	beq.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7fe fd0f 	bl	800221c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d11d      	bne.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381a:	2b80      	cmp	r3, #128	@ 0x80
 800381c:	d016      	beq.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e007      	b.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003856:	2b80      	cmp	r3, #128	@ 0x80
 8003858:	d1c3      	bne.n	80037e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003870:	e034      	b.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f89b 	bl	80039ae <I2C_IsAcknowledgeFailed>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e034      	b.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d028      	beq.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fe fcc7 	bl	800221c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11d      	bne.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d016      	beq.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e007      	b.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d1c3      	bne.n	8003872 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003900:	e049      	b.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d119      	bne.n	8003944 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0210 	mvn.w	r2, #16
 8003918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e030      	b.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fe fc6a 	bl	800221c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11d      	bne.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003964:	2b40      	cmp	r3, #64	@ 0x40
 8003966:	d016      	beq.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	f043 0220 	orr.w	r2, r3, #32
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e007      	b.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d1ae      	bne.n	8003902 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c4:	d11b      	bne.n	80039fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e272      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8087 	beq.w	8003b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a2c:	4b92      	ldr	r3, [pc, #584]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d00c      	beq.n	8003a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a38:	4b8f      	ldr	r3, [pc, #572]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d112      	bne.n	8003a6a <HAL_RCC_OscConfig+0x5e>
 8003a44:	4b8c      	ldr	r3, [pc, #560]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a50:	d10b      	bne.n	8003a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a52:	4b89      	ldr	r3, [pc, #548]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d06c      	beq.n	8003b38 <HAL_RCC_OscConfig+0x12c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d168      	bne.n	8003b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e24c      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a72:	d106      	bne.n	8003a82 <HAL_RCC_OscConfig+0x76>
 8003a74:	4b80      	ldr	r3, [pc, #512]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a7f      	ldr	r2, [pc, #508]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e02e      	b.n	8003ae0 <HAL_RCC_OscConfig+0xd4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x98>
 8003a8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7a      	ldr	r2, [pc, #488]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b78      	ldr	r3, [pc, #480]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a77      	ldr	r2, [pc, #476]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e01d      	b.n	8003ae0 <HAL_RCC_OscConfig+0xd4>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0xbc>
 8003aae:	4b72      	ldr	r3, [pc, #456]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a71      	ldr	r2, [pc, #452]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b6f      	ldr	r3, [pc, #444]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6e      	ldr	r2, [pc, #440]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCC_OscConfig+0xd4>
 8003ac8:	4b6b      	ldr	r3, [pc, #428]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6a      	ldr	r2, [pc, #424]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b68      	ldr	r3, [pc, #416]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a67      	ldr	r2, [pc, #412]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d013      	beq.n	8003b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fe fb98 	bl	800221c <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fe fb94 	bl	800221c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	@ 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e200      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	4b5d      	ldr	r3, [pc, #372]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe4>
 8003b0e:	e014      	b.n	8003b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fe fb84 	bl	800221c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b18:	f7fe fb80 	bl	800221c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b64      	cmp	r3, #100	@ 0x64
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e1ec      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	4b53      	ldr	r3, [pc, #332]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x10c>
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d063      	beq.n	8003c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b46:	4b4c      	ldr	r3, [pc, #304]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b52:	4b49      	ldr	r3, [pc, #292]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d11c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x18c>
 8003b5e:	4b46      	ldr	r3, [pc, #280]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d116      	bne.n	8003b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6a:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_RCC_OscConfig+0x176>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e1c0      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b82:	4b3d      	ldr	r3, [pc, #244]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4939      	ldr	r1, [pc, #228]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b96:	e03a      	b.n	8003c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d020      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba0:	4b36      	ldr	r3, [pc, #216]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fe fb39 	bl	800221c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bae:	f7fe fb35 	bl	800221c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e1a1      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4927      	ldr	r1, [pc, #156]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]
 8003be0:	e015      	b.n	8003c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be2:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <HAL_RCC_OscConfig+0x270>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe fb18 	bl	800221c <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf0:	f7fe fb14 	bl	800221c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e180      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d03a      	beq.n	8003c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d019      	beq.n	8003c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c22:	4b17      	ldr	r3, [pc, #92]	@ (8003c80 <HAL_RCC_OscConfig+0x274>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c28:	f7fe faf8 	bl	800221c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c30:	f7fe faf4 	bl	800221c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e160      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f000 faba 	bl	80041c8 <RCC_Delay>
 8003c54:	e01c      	b.n	8003c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c56:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <HAL_RCC_OscConfig+0x274>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fade 	bl	800221c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c62:	e00f      	b.n	8003c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fe fada 	bl	800221c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d908      	bls.n	8003c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e146      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	42420000 	.word	0x42420000
 8003c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c84:	4b92      	ldr	r3, [pc, #584]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e9      	bne.n	8003c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a6 	beq.w	8003dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10d      	bne.n	8003cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	4b88      	ldr	r3, [pc, #544]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4a87      	ldr	r2, [pc, #540]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb8:	61d3      	str	r3, [r2, #28]
 8003cba:	4b85      	ldr	r3, [pc, #532]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cca:	4b82      	ldr	r3, [pc, #520]	@ (8003ed4 <HAL_RCC_OscConfig+0x4c8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d118      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ed4 <HAL_RCC_OscConfig+0x4c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7e      	ldr	r2, [pc, #504]	@ (8003ed4 <HAL_RCC_OscConfig+0x4c8>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce2:	f7fe fa9b 	bl	800221c <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cea:	f7fe fa97 	bl	800221c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b64      	cmp	r3, #100	@ 0x64
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e103      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	4b75      	ldr	r3, [pc, #468]	@ (8003ed4 <HAL_RCC_OscConfig+0x4c8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x312>
 8003d10:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6213      	str	r3, [r2, #32]
 8003d1c:	e02d      	b.n	8003d7a <HAL_RCC_OscConfig+0x36e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x334>
 8003d26:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	4a69      	ldr	r2, [pc, #420]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6213      	str	r3, [r2, #32]
 8003d32:	4b67      	ldr	r3, [pc, #412]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4a66      	ldr	r2, [pc, #408]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	f023 0304 	bic.w	r3, r3, #4
 8003d3c:	6213      	str	r3, [r2, #32]
 8003d3e:	e01c      	b.n	8003d7a <HAL_RCC_OscConfig+0x36e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b05      	cmp	r3, #5
 8003d46:	d10c      	bne.n	8003d62 <HAL_RCC_OscConfig+0x356>
 8003d48:	4b61      	ldr	r3, [pc, #388]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4a60      	ldr	r2, [pc, #384]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	f043 0304 	orr.w	r3, r3, #4
 8003d52:	6213      	str	r3, [r2, #32]
 8003d54:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a5d      	ldr	r2, [pc, #372]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	e00b      	b.n	8003d7a <HAL_RCC_OscConfig+0x36e>
 8003d62:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	4a5a      	ldr	r2, [pc, #360]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	6213      	str	r3, [r2, #32]
 8003d6e:	4b58      	ldr	r3, [pc, #352]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4a57      	ldr	r2, [pc, #348]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	f023 0304 	bic.w	r3, r3, #4
 8003d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d015      	beq.n	8003dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d82:	f7fe fa4b 	bl	800221c <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8a:	f7fe fa47 	bl	800221c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e0b1      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ee      	beq.n	8003d8a <HAL_RCC_OscConfig+0x37e>
 8003dac:	e014      	b.n	8003dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fe fa35 	bl	800221c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fe fa31 	bl	800221c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e09b      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dcc:	4b40      	ldr	r3, [pc, #256]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1ee      	bne.n	8003db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d105      	bne.n	8003dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dde:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8087 	beq.w	8003f02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df4:	4b36      	ldr	r3, [pc, #216]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d061      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d146      	bne.n	8003e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e08:	4b33      	ldr	r3, [pc, #204]	@ (8003ed8 <HAL_RCC_OscConfig+0x4cc>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fa05 	bl	800221c <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e16:	f7fe fa01 	bl	800221c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e06d      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e28:	4b29      	ldr	r3, [pc, #164]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3c:	d108      	bne.n	8003e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e3e:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4921      	ldr	r1, [pc, #132]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a19      	ldr	r1, [r3, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	430b      	orrs	r3, r1
 8003e62:	491b      	ldr	r1, [pc, #108]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <HAL_RCC_OscConfig+0x4cc>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fe f9d5 	bl	800221c <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e76:	f7fe f9d1 	bl	800221c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e03d      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e88:	4b11      	ldr	r3, [pc, #68]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x46a>
 8003e94:	e035      	b.n	8003f02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b10      	ldr	r3, [pc, #64]	@ (8003ed8 <HAL_RCC_OscConfig+0x4cc>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fe f9be 	bl	800221c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fe f9ba 	bl	800221c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e026      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x498>
 8003ec2:	e01e      	b.n	8003f02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e019      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40007000 	.word	0x40007000
 8003ed8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003edc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <HAL_RCC_OscConfig+0x500>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d106      	bne.n	8003efe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000

08003f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0d0      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f24:	4b6a      	ldr	r3, [pc, #424]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d910      	bls.n	8003f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b67      	ldr	r3, [pc, #412]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 0207 	bic.w	r2, r3, #7
 8003f3a:	4965      	ldr	r1, [pc, #404]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f42:	4b63      	ldr	r3, [pc, #396]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0b8      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f6c:	4b59      	ldr	r3, [pc, #356]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4a58      	ldr	r2, [pc, #352]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f84:	4b53      	ldr	r3, [pc, #332]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a52      	ldr	r2, [pc, #328]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f90:	4b50      	ldr	r3, [pc, #320]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	494d      	ldr	r1, [pc, #308]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d040      	beq.n	8004030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb6:	4b47      	ldr	r3, [pc, #284]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d115      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e07f      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fce:	4b41      	ldr	r3, [pc, #260]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e073      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fde:	4b3d      	ldr	r3, [pc, #244]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e06b      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fee:	4b39      	ldr	r3, [pc, #228]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4936      	ldr	r1, [pc, #216]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004000:	f7fe f90c 	bl	800221c <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	e00a      	b.n	800401e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004008:	f7fe f908 	bl	800221c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e053      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	4b2d      	ldr	r3, [pc, #180]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 020c 	and.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d1eb      	bne.n	8004008 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004030:	4b27      	ldr	r3, [pc, #156]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d210      	bcs.n	8004060 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 0207 	bic.w	r2, r3, #7
 8004046:	4922      	ldr	r1, [pc, #136]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404e:	4b20      	ldr	r3, [pc, #128]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e032      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800406c:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4916      	ldr	r1, [pc, #88]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800408a:	4b12      	ldr	r3, [pc, #72]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	490e      	ldr	r1, [pc, #56]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800409e:	f000 f821 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 80040a2:	4602      	mov	r2, r0
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	490a      	ldr	r1, [pc, #40]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	5ccb      	ldrb	r3, [r1, r3]
 80040b2:	fa22 f303 	lsr.w	r3, r2, r3
 80040b6:	4a09      	ldr	r2, [pc, #36]	@ (80040dc <HAL_RCC_ClockConfig+0x1cc>)
 80040b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ba:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_ClockConfig+0x1d0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe f86a 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40022000 	.word	0x40022000
 80040d4:	40021000 	.word	0x40021000
 80040d8:	08005950 	.word	0x08005950
 80040dc:	20000010 	.word	0x20000010
 80040e0:	20000014 	.word	0x20000014

080040e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x94>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b04      	cmp	r3, #4
 800410c:	d002      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x30>
 800410e:	2b08      	cmp	r3, #8
 8004110:	d003      	beq.n	800411a <HAL_RCC_GetSysClockFreq+0x36>
 8004112:	e027      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004114:	4b19      	ldr	r3, [pc, #100]	@ (800417c <HAL_RCC_GetSysClockFreq+0x98>)
 8004116:	613b      	str	r3, [r7, #16]
      break;
 8004118:	e027      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	0c9b      	lsrs	r3, r3, #18
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004124:	5cd3      	ldrb	r3, [r2, r3]
 8004126:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d010      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004132:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x94>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	0c5b      	lsrs	r3, r3, #17
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	4a11      	ldr	r2, [pc, #68]	@ (8004184 <HAL_RCC_GetSysClockFreq+0xa0>)
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a0d      	ldr	r2, [pc, #52]	@ (800417c <HAL_RCC_GetSysClockFreq+0x98>)
 8004146:	fb03 f202 	mul.w	r2, r3, r2
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e004      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0c      	ldr	r2, [pc, #48]	@ (8004188 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	613b      	str	r3, [r7, #16]
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b05      	ldr	r3, [pc, #20]	@ (800417c <HAL_RCC_GetSysClockFreq+0x98>)
 8004166:	613b      	str	r3, [r7, #16]
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	693b      	ldr	r3, [r7, #16]
}
 800416c:	4618      	mov	r0, r3
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
 800417c:	007a1200 	.word	0x007a1200
 8004180:	08005968 	.word	0x08005968
 8004184:	08005978 	.word	0x08005978
 8004188:	003d0900 	.word	0x003d0900

0800418c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004190:	4b02      	ldr	r3, [pc, #8]	@ (800419c <HAL_RCC_GetHCLKFreq+0x10>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	20000010 	.word	0x20000010

080041a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a4:	f7ff fff2 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4903      	ldr	r1, [pc, #12]	@ (80041c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b6:	5ccb      	ldrb	r3, [r1, r3]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	08005960 	.word	0x08005960

080041c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <RCC_Delay+0x34>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <RCC_Delay+0x38>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0a5b      	lsrs	r3, r3, #9
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041e4:	bf00      	nop
  }
  while (Delay --);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	60fa      	str	r2, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f9      	bne.n	80041e4 <RCC_Delay+0x1c>
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	20000010 	.word	0x20000010
 8004200:	10624dd3 	.word	0x10624dd3

08004204 <sniprintf>:
 8004204:	b40c      	push	{r2, r3}
 8004206:	b530      	push	{r4, r5, lr}
 8004208:	4b17      	ldr	r3, [pc, #92]	@ (8004268 <sniprintf+0x64>)
 800420a:	1e0c      	subs	r4, r1, #0
 800420c:	681d      	ldr	r5, [r3, #0]
 800420e:	b09d      	sub	sp, #116	@ 0x74
 8004210:	da08      	bge.n	8004224 <sniprintf+0x20>
 8004212:	238b      	movs	r3, #139	@ 0x8b
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	b01d      	add	sp, #116	@ 0x74
 800421c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004220:	b002      	add	sp, #8
 8004222:	4770      	bx	lr
 8004224:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004228:	f8ad 3014 	strh.w	r3, [sp, #20]
 800422c:	bf0c      	ite	eq
 800422e:	4623      	moveq	r3, r4
 8004230:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004234:	9304      	str	r3, [sp, #16]
 8004236:	9307      	str	r3, [sp, #28]
 8004238:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800423c:	9002      	str	r0, [sp, #8]
 800423e:	9006      	str	r0, [sp, #24]
 8004240:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004244:	4628      	mov	r0, r5
 8004246:	ab21      	add	r3, sp, #132	@ 0x84
 8004248:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800424a:	a902      	add	r1, sp, #8
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	f000 f993 	bl	8004578 <_svfiprintf_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	bfbc      	itt	lt
 8004256:	238b      	movlt	r3, #139	@ 0x8b
 8004258:	602b      	strlt	r3, [r5, #0]
 800425a:	2c00      	cmp	r4, #0
 800425c:	d0dd      	beq.n	800421a <sniprintf+0x16>
 800425e:	2200      	movs	r2, #0
 8004260:	9b02      	ldr	r3, [sp, #8]
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	e7d9      	b.n	800421a <sniprintf+0x16>
 8004266:	bf00      	nop
 8004268:	2000001c 	.word	0x2000001c

0800426c <memset>:
 800426c:	4603      	mov	r3, r0
 800426e:	4402      	add	r2, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <__errno>:
 800427c:	4b01      	ldr	r3, [pc, #4]	@ (8004284 <__errno+0x8>)
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	2000001c 	.word	0x2000001c

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	2600      	movs	r6, #0
 800428c:	4d0c      	ldr	r5, [pc, #48]	@ (80042c0 <__libc_init_array+0x38>)
 800428e:	4c0d      	ldr	r4, [pc, #52]	@ (80042c4 <__libc_init_array+0x3c>)
 8004290:	1b64      	subs	r4, r4, r5
 8004292:	10a4      	asrs	r4, r4, #2
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	f000 fc78 	bl	8004b8c <_init>
 800429c:	2600      	movs	r6, #0
 800429e:	4d0a      	ldr	r5, [pc, #40]	@ (80042c8 <__libc_init_array+0x40>)
 80042a0:	4c0a      	ldr	r4, [pc, #40]	@ (80042cc <__libc_init_array+0x44>)
 80042a2:	1b64      	subs	r4, r4, r5
 80042a4:	10a4      	asrs	r4, r4, #2
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	080059b0 	.word	0x080059b0
 80042c4:	080059b0 	.word	0x080059b0
 80042c8:	080059b0 	.word	0x080059b0
 80042cc:	080059b4 	.word	0x080059b4

080042d0 <__retarget_lock_acquire_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <__retarget_lock_release_recursive>:
 80042d2:	4770      	bx	lr

080042d4 <_free_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4605      	mov	r5, r0
 80042d8:	2900      	cmp	r1, #0
 80042da:	d040      	beq.n	800435e <_free_r+0x8a>
 80042dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e0:	1f0c      	subs	r4, r1, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bfb8      	it	lt
 80042e6:	18e4      	addlt	r4, r4, r3
 80042e8:	f000 f8de 	bl	80044a8 <__malloc_lock>
 80042ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004360 <_free_r+0x8c>)
 80042ee:	6813      	ldr	r3, [r2, #0]
 80042f0:	b933      	cbnz	r3, 8004300 <_free_r+0x2c>
 80042f2:	6063      	str	r3, [r4, #4]
 80042f4:	6014      	str	r4, [r2, #0]
 80042f6:	4628      	mov	r0, r5
 80042f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042fc:	f000 b8da 	b.w	80044b4 <__malloc_unlock>
 8004300:	42a3      	cmp	r3, r4
 8004302:	d908      	bls.n	8004316 <_free_r+0x42>
 8004304:	6820      	ldr	r0, [r4, #0]
 8004306:	1821      	adds	r1, r4, r0
 8004308:	428b      	cmp	r3, r1
 800430a:	bf01      	itttt	eq
 800430c:	6819      	ldreq	r1, [r3, #0]
 800430e:	685b      	ldreq	r3, [r3, #4]
 8004310:	1809      	addeq	r1, r1, r0
 8004312:	6021      	streq	r1, [r4, #0]
 8004314:	e7ed      	b.n	80042f2 <_free_r+0x1e>
 8004316:	461a      	mov	r2, r3
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b10b      	cbz	r3, 8004320 <_free_r+0x4c>
 800431c:	42a3      	cmp	r3, r4
 800431e:	d9fa      	bls.n	8004316 <_free_r+0x42>
 8004320:	6811      	ldr	r1, [r2, #0]
 8004322:	1850      	adds	r0, r2, r1
 8004324:	42a0      	cmp	r0, r4
 8004326:	d10b      	bne.n	8004340 <_free_r+0x6c>
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	4401      	add	r1, r0
 800432c:	1850      	adds	r0, r2, r1
 800432e:	4283      	cmp	r3, r0
 8004330:	6011      	str	r1, [r2, #0]
 8004332:	d1e0      	bne.n	80042f6 <_free_r+0x22>
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4408      	add	r0, r1
 800433a:	6010      	str	r0, [r2, #0]
 800433c:	6053      	str	r3, [r2, #4]
 800433e:	e7da      	b.n	80042f6 <_free_r+0x22>
 8004340:	d902      	bls.n	8004348 <_free_r+0x74>
 8004342:	230c      	movs	r3, #12
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	e7d6      	b.n	80042f6 <_free_r+0x22>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	1821      	adds	r1, r4, r0
 800434c:	428b      	cmp	r3, r1
 800434e:	bf01      	itttt	eq
 8004350:	6819      	ldreq	r1, [r3, #0]
 8004352:	685b      	ldreq	r3, [r3, #4]
 8004354:	1809      	addeq	r1, r1, r0
 8004356:	6021      	streq	r1, [r4, #0]
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	6054      	str	r4, [r2, #4]
 800435c:	e7cb      	b.n	80042f6 <_free_r+0x22>
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000634 	.word	0x20000634

08004364 <sbrk_aligned>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4e0f      	ldr	r6, [pc, #60]	@ (80043a4 <sbrk_aligned+0x40>)
 8004368:	460c      	mov	r4, r1
 800436a:	6831      	ldr	r1, [r6, #0]
 800436c:	4605      	mov	r5, r0
 800436e:	b911      	cbnz	r1, 8004376 <sbrk_aligned+0x12>
 8004370:	f000 fbaa 	bl	8004ac8 <_sbrk_r>
 8004374:	6030      	str	r0, [r6, #0]
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 fba5 	bl	8004ac8 <_sbrk_r>
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	d103      	bne.n	800438a <sbrk_aligned+0x26>
 8004382:	f04f 34ff 	mov.w	r4, #4294967295
 8004386:	4620      	mov	r0, r4
 8004388:	bd70      	pop	{r4, r5, r6, pc}
 800438a:	1cc4      	adds	r4, r0, #3
 800438c:	f024 0403 	bic.w	r4, r4, #3
 8004390:	42a0      	cmp	r0, r4
 8004392:	d0f8      	beq.n	8004386 <sbrk_aligned+0x22>
 8004394:	1a21      	subs	r1, r4, r0
 8004396:	4628      	mov	r0, r5
 8004398:	f000 fb96 	bl	8004ac8 <_sbrk_r>
 800439c:	3001      	adds	r0, #1
 800439e:	d1f2      	bne.n	8004386 <sbrk_aligned+0x22>
 80043a0:	e7ef      	b.n	8004382 <sbrk_aligned+0x1e>
 80043a2:	bf00      	nop
 80043a4:	20000630 	.word	0x20000630

080043a8 <_malloc_r>:
 80043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ac:	1ccd      	adds	r5, r1, #3
 80043ae:	f025 0503 	bic.w	r5, r5, #3
 80043b2:	3508      	adds	r5, #8
 80043b4:	2d0c      	cmp	r5, #12
 80043b6:	bf38      	it	cc
 80043b8:	250c      	movcc	r5, #12
 80043ba:	2d00      	cmp	r5, #0
 80043bc:	4606      	mov	r6, r0
 80043be:	db01      	blt.n	80043c4 <_malloc_r+0x1c>
 80043c0:	42a9      	cmp	r1, r5
 80043c2:	d904      	bls.n	80043ce <_malloc_r+0x26>
 80043c4:	230c      	movs	r3, #12
 80043c6:	6033      	str	r3, [r6, #0]
 80043c8:	2000      	movs	r0, #0
 80043ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044a4 <_malloc_r+0xfc>
 80043d2:	f000 f869 	bl	80044a8 <__malloc_lock>
 80043d6:	f8d8 3000 	ldr.w	r3, [r8]
 80043da:	461c      	mov	r4, r3
 80043dc:	bb44      	cbnz	r4, 8004430 <_malloc_r+0x88>
 80043de:	4629      	mov	r1, r5
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff ffbf 	bl	8004364 <sbrk_aligned>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	4604      	mov	r4, r0
 80043ea:	d158      	bne.n	800449e <_malloc_r+0xf6>
 80043ec:	f8d8 4000 	ldr.w	r4, [r8]
 80043f0:	4627      	mov	r7, r4
 80043f2:	2f00      	cmp	r7, #0
 80043f4:	d143      	bne.n	800447e <_malloc_r+0xd6>
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	d04b      	beq.n	8004492 <_malloc_r+0xea>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	4639      	mov	r1, r7
 80043fe:	4630      	mov	r0, r6
 8004400:	eb04 0903 	add.w	r9, r4, r3
 8004404:	f000 fb60 	bl	8004ac8 <_sbrk_r>
 8004408:	4581      	cmp	r9, r0
 800440a:	d142      	bne.n	8004492 <_malloc_r+0xea>
 800440c:	6821      	ldr	r1, [r4, #0]
 800440e:	4630      	mov	r0, r6
 8004410:	1a6d      	subs	r5, r5, r1
 8004412:	4629      	mov	r1, r5
 8004414:	f7ff ffa6 	bl	8004364 <sbrk_aligned>
 8004418:	3001      	adds	r0, #1
 800441a:	d03a      	beq.n	8004492 <_malloc_r+0xea>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	442b      	add	r3, r5
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	f8d8 3000 	ldr.w	r3, [r8]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	bb62      	cbnz	r2, 8004484 <_malloc_r+0xdc>
 800442a:	f8c8 7000 	str.w	r7, [r8]
 800442e:	e00f      	b.n	8004450 <_malloc_r+0xa8>
 8004430:	6822      	ldr	r2, [r4, #0]
 8004432:	1b52      	subs	r2, r2, r5
 8004434:	d420      	bmi.n	8004478 <_malloc_r+0xd0>
 8004436:	2a0b      	cmp	r2, #11
 8004438:	d917      	bls.n	800446a <_malloc_r+0xc2>
 800443a:	1961      	adds	r1, r4, r5
 800443c:	42a3      	cmp	r3, r4
 800443e:	6025      	str	r5, [r4, #0]
 8004440:	bf18      	it	ne
 8004442:	6059      	strne	r1, [r3, #4]
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	bf08      	it	eq
 8004448:	f8c8 1000 	streq.w	r1, [r8]
 800444c:	5162      	str	r2, [r4, r5]
 800444e:	604b      	str	r3, [r1, #4]
 8004450:	4630      	mov	r0, r6
 8004452:	f000 f82f 	bl	80044b4 <__malloc_unlock>
 8004456:	f104 000b 	add.w	r0, r4, #11
 800445a:	1d23      	adds	r3, r4, #4
 800445c:	f020 0007 	bic.w	r0, r0, #7
 8004460:	1ac2      	subs	r2, r0, r3
 8004462:	bf1c      	itt	ne
 8004464:	1a1b      	subne	r3, r3, r0
 8004466:	50a3      	strne	r3, [r4, r2]
 8004468:	e7af      	b.n	80043ca <_malloc_r+0x22>
 800446a:	6862      	ldr	r2, [r4, #4]
 800446c:	42a3      	cmp	r3, r4
 800446e:	bf0c      	ite	eq
 8004470:	f8c8 2000 	streq.w	r2, [r8]
 8004474:	605a      	strne	r2, [r3, #4]
 8004476:	e7eb      	b.n	8004450 <_malloc_r+0xa8>
 8004478:	4623      	mov	r3, r4
 800447a:	6864      	ldr	r4, [r4, #4]
 800447c:	e7ae      	b.n	80043dc <_malloc_r+0x34>
 800447e:	463c      	mov	r4, r7
 8004480:	687f      	ldr	r7, [r7, #4]
 8004482:	e7b6      	b.n	80043f2 <_malloc_r+0x4a>
 8004484:	461a      	mov	r2, r3
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	42a3      	cmp	r3, r4
 800448a:	d1fb      	bne.n	8004484 <_malloc_r+0xdc>
 800448c:	2300      	movs	r3, #0
 800448e:	6053      	str	r3, [r2, #4]
 8004490:	e7de      	b.n	8004450 <_malloc_r+0xa8>
 8004492:	230c      	movs	r3, #12
 8004494:	4630      	mov	r0, r6
 8004496:	6033      	str	r3, [r6, #0]
 8004498:	f000 f80c 	bl	80044b4 <__malloc_unlock>
 800449c:	e794      	b.n	80043c8 <_malloc_r+0x20>
 800449e:	6005      	str	r5, [r0, #0]
 80044a0:	e7d6      	b.n	8004450 <_malloc_r+0xa8>
 80044a2:	bf00      	nop
 80044a4:	20000634 	.word	0x20000634

080044a8 <__malloc_lock>:
 80044a8:	4801      	ldr	r0, [pc, #4]	@ (80044b0 <__malloc_lock+0x8>)
 80044aa:	f7ff bf11 	b.w	80042d0 <__retarget_lock_acquire_recursive>
 80044ae:	bf00      	nop
 80044b0:	2000062c 	.word	0x2000062c

080044b4 <__malloc_unlock>:
 80044b4:	4801      	ldr	r0, [pc, #4]	@ (80044bc <__malloc_unlock+0x8>)
 80044b6:	f7ff bf0c 	b.w	80042d2 <__retarget_lock_release_recursive>
 80044ba:	bf00      	nop
 80044bc:	2000062c 	.word	0x2000062c

080044c0 <__ssputs_r>:
 80044c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c4:	461f      	mov	r7, r3
 80044c6:	688e      	ldr	r6, [r1, #8]
 80044c8:	4682      	mov	sl, r0
 80044ca:	42be      	cmp	r6, r7
 80044cc:	460c      	mov	r4, r1
 80044ce:	4690      	mov	r8, r2
 80044d0:	680b      	ldr	r3, [r1, #0]
 80044d2:	d82d      	bhi.n	8004530 <__ssputs_r+0x70>
 80044d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044dc:	d026      	beq.n	800452c <__ssputs_r+0x6c>
 80044de:	6965      	ldr	r5, [r4, #20]
 80044e0:	6909      	ldr	r1, [r1, #16]
 80044e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044e6:	eba3 0901 	sub.w	r9, r3, r1
 80044ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ee:	1c7b      	adds	r3, r7, #1
 80044f0:	444b      	add	r3, r9
 80044f2:	106d      	asrs	r5, r5, #1
 80044f4:	429d      	cmp	r5, r3
 80044f6:	bf38      	it	cc
 80044f8:	461d      	movcc	r5, r3
 80044fa:	0553      	lsls	r3, r2, #21
 80044fc:	d527      	bpl.n	800454e <__ssputs_r+0x8e>
 80044fe:	4629      	mov	r1, r5
 8004500:	f7ff ff52 	bl	80043a8 <_malloc_r>
 8004504:	4606      	mov	r6, r0
 8004506:	b360      	cbz	r0, 8004562 <__ssputs_r+0xa2>
 8004508:	464a      	mov	r2, r9
 800450a:	6921      	ldr	r1, [r4, #16]
 800450c:	f000 fafa 	bl	8004b04 <memcpy>
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	6126      	str	r6, [r4, #16]
 800451e:	444e      	add	r6, r9
 8004520:	6026      	str	r6, [r4, #0]
 8004522:	463e      	mov	r6, r7
 8004524:	6165      	str	r5, [r4, #20]
 8004526:	eba5 0509 	sub.w	r5, r5, r9
 800452a:	60a5      	str	r5, [r4, #8]
 800452c:	42be      	cmp	r6, r7
 800452e:	d900      	bls.n	8004532 <__ssputs_r+0x72>
 8004530:	463e      	mov	r6, r7
 8004532:	4632      	mov	r2, r6
 8004534:	4641      	mov	r1, r8
 8004536:	6820      	ldr	r0, [r4, #0]
 8004538:	f000 faac 	bl	8004a94 <memmove>
 800453c:	2000      	movs	r0, #0
 800453e:	68a3      	ldr	r3, [r4, #8]
 8004540:	1b9b      	subs	r3, r3, r6
 8004542:	60a3      	str	r3, [r4, #8]
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	4433      	add	r3, r6
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454e:	462a      	mov	r2, r5
 8004550:	f000 fae6 	bl	8004b20 <_realloc_r>
 8004554:	4606      	mov	r6, r0
 8004556:	2800      	cmp	r0, #0
 8004558:	d1e0      	bne.n	800451c <__ssputs_r+0x5c>
 800455a:	4650      	mov	r0, sl
 800455c:	6921      	ldr	r1, [r4, #16]
 800455e:	f7ff feb9 	bl	80042d4 <_free_r>
 8004562:	230c      	movs	r3, #12
 8004564:	f8ca 3000 	str.w	r3, [sl]
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f04f 30ff 	mov.w	r0, #4294967295
 800456e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	e7e9      	b.n	800454a <__ssputs_r+0x8a>
	...

08004578 <_svfiprintf_r>:
 8004578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457c:	4698      	mov	r8, r3
 800457e:	898b      	ldrh	r3, [r1, #12]
 8004580:	4607      	mov	r7, r0
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	460d      	mov	r5, r1
 8004586:	4614      	mov	r4, r2
 8004588:	b09d      	sub	sp, #116	@ 0x74
 800458a:	d510      	bpl.n	80045ae <_svfiprintf_r+0x36>
 800458c:	690b      	ldr	r3, [r1, #16]
 800458e:	b973      	cbnz	r3, 80045ae <_svfiprintf_r+0x36>
 8004590:	2140      	movs	r1, #64	@ 0x40
 8004592:	f7ff ff09 	bl	80043a8 <_malloc_r>
 8004596:	6028      	str	r0, [r5, #0]
 8004598:	6128      	str	r0, [r5, #16]
 800459a:	b930      	cbnz	r0, 80045aa <_svfiprintf_r+0x32>
 800459c:	230c      	movs	r3, #12
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	b01d      	add	sp, #116	@ 0x74
 80045a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045aa:	2340      	movs	r3, #64	@ 0x40
 80045ac:	616b      	str	r3, [r5, #20]
 80045ae:	2300      	movs	r3, #0
 80045b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80045b2:	2320      	movs	r3, #32
 80045b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045b8:	2330      	movs	r3, #48	@ 0x30
 80045ba:	f04f 0901 	mov.w	r9, #1
 80045be:	f8cd 800c 	str.w	r8, [sp, #12]
 80045c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800475c <_svfiprintf_r+0x1e4>
 80045c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045ca:	4623      	mov	r3, r4
 80045cc:	469a      	mov	sl, r3
 80045ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045d2:	b10a      	cbz	r2, 80045d8 <_svfiprintf_r+0x60>
 80045d4:	2a25      	cmp	r2, #37	@ 0x25
 80045d6:	d1f9      	bne.n	80045cc <_svfiprintf_r+0x54>
 80045d8:	ebba 0b04 	subs.w	fp, sl, r4
 80045dc:	d00b      	beq.n	80045f6 <_svfiprintf_r+0x7e>
 80045de:	465b      	mov	r3, fp
 80045e0:	4622      	mov	r2, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	4638      	mov	r0, r7
 80045e6:	f7ff ff6b 	bl	80044c0 <__ssputs_r>
 80045ea:	3001      	adds	r0, #1
 80045ec:	f000 80a7 	beq.w	800473e <_svfiprintf_r+0x1c6>
 80045f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045f2:	445a      	add	r2, fp
 80045f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80045f6:	f89a 3000 	ldrb.w	r3, [sl]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 809f 	beq.w	800473e <_svfiprintf_r+0x1c6>
 8004600:	2300      	movs	r3, #0
 8004602:	f04f 32ff 	mov.w	r2, #4294967295
 8004606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800460a:	f10a 0a01 	add.w	sl, sl, #1
 800460e:	9304      	str	r3, [sp, #16]
 8004610:	9307      	str	r3, [sp, #28]
 8004612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004616:	931a      	str	r3, [sp, #104]	@ 0x68
 8004618:	4654      	mov	r4, sl
 800461a:	2205      	movs	r2, #5
 800461c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004620:	484e      	ldr	r0, [pc, #312]	@ (800475c <_svfiprintf_r+0x1e4>)
 8004622:	f000 fa61 	bl	8004ae8 <memchr>
 8004626:	9a04      	ldr	r2, [sp, #16]
 8004628:	b9d8      	cbnz	r0, 8004662 <_svfiprintf_r+0xea>
 800462a:	06d0      	lsls	r0, r2, #27
 800462c:	bf44      	itt	mi
 800462e:	2320      	movmi	r3, #32
 8004630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004634:	0711      	lsls	r1, r2, #28
 8004636:	bf44      	itt	mi
 8004638:	232b      	movmi	r3, #43	@ 0x2b
 800463a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800463e:	f89a 3000 	ldrb.w	r3, [sl]
 8004642:	2b2a      	cmp	r3, #42	@ 0x2a
 8004644:	d015      	beq.n	8004672 <_svfiprintf_r+0xfa>
 8004646:	4654      	mov	r4, sl
 8004648:	2000      	movs	r0, #0
 800464a:	f04f 0c0a 	mov.w	ip, #10
 800464e:	9a07      	ldr	r2, [sp, #28]
 8004650:	4621      	mov	r1, r4
 8004652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004656:	3b30      	subs	r3, #48	@ 0x30
 8004658:	2b09      	cmp	r3, #9
 800465a:	d94b      	bls.n	80046f4 <_svfiprintf_r+0x17c>
 800465c:	b1b0      	cbz	r0, 800468c <_svfiprintf_r+0x114>
 800465e:	9207      	str	r2, [sp, #28]
 8004660:	e014      	b.n	800468c <_svfiprintf_r+0x114>
 8004662:	eba0 0308 	sub.w	r3, r0, r8
 8004666:	fa09 f303 	lsl.w	r3, r9, r3
 800466a:	4313      	orrs	r3, r2
 800466c:	46a2      	mov	sl, r4
 800466e:	9304      	str	r3, [sp, #16]
 8004670:	e7d2      	b.n	8004618 <_svfiprintf_r+0xa0>
 8004672:	9b03      	ldr	r3, [sp, #12]
 8004674:	1d19      	adds	r1, r3, #4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	9103      	str	r1, [sp, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	bfbb      	ittet	lt
 800467e:	425b      	neglt	r3, r3
 8004680:	f042 0202 	orrlt.w	r2, r2, #2
 8004684:	9307      	strge	r3, [sp, #28]
 8004686:	9307      	strlt	r3, [sp, #28]
 8004688:	bfb8      	it	lt
 800468a:	9204      	strlt	r2, [sp, #16]
 800468c:	7823      	ldrb	r3, [r4, #0]
 800468e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004690:	d10a      	bne.n	80046a8 <_svfiprintf_r+0x130>
 8004692:	7863      	ldrb	r3, [r4, #1]
 8004694:	2b2a      	cmp	r3, #42	@ 0x2a
 8004696:	d132      	bne.n	80046fe <_svfiprintf_r+0x186>
 8004698:	9b03      	ldr	r3, [sp, #12]
 800469a:	3402      	adds	r4, #2
 800469c:	1d1a      	adds	r2, r3, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	9203      	str	r2, [sp, #12]
 80046a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046a6:	9305      	str	r3, [sp, #20]
 80046a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004760 <_svfiprintf_r+0x1e8>
 80046ac:	2203      	movs	r2, #3
 80046ae:	4650      	mov	r0, sl
 80046b0:	7821      	ldrb	r1, [r4, #0]
 80046b2:	f000 fa19 	bl	8004ae8 <memchr>
 80046b6:	b138      	cbz	r0, 80046c8 <_svfiprintf_r+0x150>
 80046b8:	2240      	movs	r2, #64	@ 0x40
 80046ba:	9b04      	ldr	r3, [sp, #16]
 80046bc:	eba0 000a 	sub.w	r0, r0, sl
 80046c0:	4082      	lsls	r2, r0
 80046c2:	4313      	orrs	r3, r2
 80046c4:	3401      	adds	r4, #1
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046cc:	2206      	movs	r2, #6
 80046ce:	4825      	ldr	r0, [pc, #148]	@ (8004764 <_svfiprintf_r+0x1ec>)
 80046d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046d4:	f000 fa08 	bl	8004ae8 <memchr>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d036      	beq.n	800474a <_svfiprintf_r+0x1d2>
 80046dc:	4b22      	ldr	r3, [pc, #136]	@ (8004768 <_svfiprintf_r+0x1f0>)
 80046de:	bb1b      	cbnz	r3, 8004728 <_svfiprintf_r+0x1b0>
 80046e0:	9b03      	ldr	r3, [sp, #12]
 80046e2:	3307      	adds	r3, #7
 80046e4:	f023 0307 	bic.w	r3, r3, #7
 80046e8:	3308      	adds	r3, #8
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ee:	4433      	add	r3, r6
 80046f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f2:	e76a      	b.n	80045ca <_svfiprintf_r+0x52>
 80046f4:	460c      	mov	r4, r1
 80046f6:	2001      	movs	r0, #1
 80046f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80046fc:	e7a8      	b.n	8004650 <_svfiprintf_r+0xd8>
 80046fe:	2300      	movs	r3, #0
 8004700:	f04f 0c0a 	mov.w	ip, #10
 8004704:	4619      	mov	r1, r3
 8004706:	3401      	adds	r4, #1
 8004708:	9305      	str	r3, [sp, #20]
 800470a:	4620      	mov	r0, r4
 800470c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004710:	3a30      	subs	r2, #48	@ 0x30
 8004712:	2a09      	cmp	r2, #9
 8004714:	d903      	bls.n	800471e <_svfiprintf_r+0x1a6>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0c6      	beq.n	80046a8 <_svfiprintf_r+0x130>
 800471a:	9105      	str	r1, [sp, #20]
 800471c:	e7c4      	b.n	80046a8 <_svfiprintf_r+0x130>
 800471e:	4604      	mov	r4, r0
 8004720:	2301      	movs	r3, #1
 8004722:	fb0c 2101 	mla	r1, ip, r1, r2
 8004726:	e7f0      	b.n	800470a <_svfiprintf_r+0x192>
 8004728:	ab03      	add	r3, sp, #12
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	462a      	mov	r2, r5
 800472e:	4638      	mov	r0, r7
 8004730:	4b0e      	ldr	r3, [pc, #56]	@ (800476c <_svfiprintf_r+0x1f4>)
 8004732:	a904      	add	r1, sp, #16
 8004734:	f3af 8000 	nop.w
 8004738:	1c42      	adds	r2, r0, #1
 800473a:	4606      	mov	r6, r0
 800473c:	d1d6      	bne.n	80046ec <_svfiprintf_r+0x174>
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	065b      	lsls	r3, r3, #25
 8004742:	f53f af2d 	bmi.w	80045a0 <_svfiprintf_r+0x28>
 8004746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004748:	e72c      	b.n	80045a4 <_svfiprintf_r+0x2c>
 800474a:	ab03      	add	r3, sp, #12
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	462a      	mov	r2, r5
 8004750:	4638      	mov	r0, r7
 8004752:	4b06      	ldr	r3, [pc, #24]	@ (800476c <_svfiprintf_r+0x1f4>)
 8004754:	a904      	add	r1, sp, #16
 8004756:	f000 f87d 	bl	8004854 <_printf_i>
 800475a:	e7ed      	b.n	8004738 <_svfiprintf_r+0x1c0>
 800475c:	0800597a 	.word	0x0800597a
 8004760:	08005980 	.word	0x08005980
 8004764:	08005984 	.word	0x08005984
 8004768:	00000000 	.word	0x00000000
 800476c:	080044c1 	.word	0x080044c1

08004770 <_printf_common>:
 8004770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	4616      	mov	r6, r2
 8004776:	4698      	mov	r8, r3
 8004778:	688a      	ldr	r2, [r1, #8]
 800477a:	690b      	ldr	r3, [r1, #16]
 800477c:	4607      	mov	r7, r0
 800477e:	4293      	cmp	r3, r2
 8004780:	bfb8      	it	lt
 8004782:	4613      	movlt	r3, r2
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800478a:	460c      	mov	r4, r1
 800478c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004790:	b10a      	cbz	r2, 8004796 <_printf_common+0x26>
 8004792:	3301      	adds	r3, #1
 8004794:	6033      	str	r3, [r6, #0]
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	0699      	lsls	r1, r3, #26
 800479a:	bf42      	ittt	mi
 800479c:	6833      	ldrmi	r3, [r6, #0]
 800479e:	3302      	addmi	r3, #2
 80047a0:	6033      	strmi	r3, [r6, #0]
 80047a2:	6825      	ldr	r5, [r4, #0]
 80047a4:	f015 0506 	ands.w	r5, r5, #6
 80047a8:	d106      	bne.n	80047b8 <_printf_common+0x48>
 80047aa:	f104 0a19 	add.w	sl, r4, #25
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	6832      	ldr	r2, [r6, #0]
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dc2b      	bgt.n	8004810 <_printf_common+0xa0>
 80047b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047bc:	6822      	ldr	r2, [r4, #0]
 80047be:	3b00      	subs	r3, #0
 80047c0:	bf18      	it	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	0692      	lsls	r2, r2, #26
 80047c6:	d430      	bmi.n	800482a <_printf_common+0xba>
 80047c8:	4641      	mov	r1, r8
 80047ca:	4638      	mov	r0, r7
 80047cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047d0:	47c8      	blx	r9
 80047d2:	3001      	adds	r0, #1
 80047d4:	d023      	beq.n	800481e <_printf_common+0xae>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	f003 0306 	and.w	r3, r3, #6
 80047de:	2b04      	cmp	r3, #4
 80047e0:	bf14      	ite	ne
 80047e2:	2500      	movne	r5, #0
 80047e4:	6833      	ldreq	r3, [r6, #0]
 80047e6:	f04f 0600 	mov.w	r6, #0
 80047ea:	bf08      	it	eq
 80047ec:	68e5      	ldreq	r5, [r4, #12]
 80047ee:	f104 041a 	add.w	r4, r4, #26
 80047f2:	bf08      	it	eq
 80047f4:	1aed      	subeq	r5, r5, r3
 80047f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80047fa:	bf08      	it	eq
 80047fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004800:	4293      	cmp	r3, r2
 8004802:	bfc4      	itt	gt
 8004804:	1a9b      	subgt	r3, r3, r2
 8004806:	18ed      	addgt	r5, r5, r3
 8004808:	42b5      	cmp	r5, r6
 800480a:	d11a      	bne.n	8004842 <_printf_common+0xd2>
 800480c:	2000      	movs	r0, #0
 800480e:	e008      	b.n	8004822 <_printf_common+0xb2>
 8004810:	2301      	movs	r3, #1
 8004812:	4652      	mov	r2, sl
 8004814:	4641      	mov	r1, r8
 8004816:	4638      	mov	r0, r7
 8004818:	47c8      	blx	r9
 800481a:	3001      	adds	r0, #1
 800481c:	d103      	bne.n	8004826 <_printf_common+0xb6>
 800481e:	f04f 30ff 	mov.w	r0, #4294967295
 8004822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004826:	3501      	adds	r5, #1
 8004828:	e7c1      	b.n	80047ae <_printf_common+0x3e>
 800482a:	2030      	movs	r0, #48	@ 0x30
 800482c:	18e1      	adds	r1, r4, r3
 800482e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004838:	4422      	add	r2, r4
 800483a:	3302      	adds	r3, #2
 800483c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004840:	e7c2      	b.n	80047c8 <_printf_common+0x58>
 8004842:	2301      	movs	r3, #1
 8004844:	4622      	mov	r2, r4
 8004846:	4641      	mov	r1, r8
 8004848:	4638      	mov	r0, r7
 800484a:	47c8      	blx	r9
 800484c:	3001      	adds	r0, #1
 800484e:	d0e6      	beq.n	800481e <_printf_common+0xae>
 8004850:	3601      	adds	r6, #1
 8004852:	e7d9      	b.n	8004808 <_printf_common+0x98>

08004854 <_printf_i>:
 8004854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	7e0f      	ldrb	r7, [r1, #24]
 800485a:	4691      	mov	r9, r2
 800485c:	2f78      	cmp	r7, #120	@ 0x78
 800485e:	4680      	mov	r8, r0
 8004860:	460c      	mov	r4, r1
 8004862:	469a      	mov	sl, r3
 8004864:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800486a:	d807      	bhi.n	800487c <_printf_i+0x28>
 800486c:	2f62      	cmp	r7, #98	@ 0x62
 800486e:	d80a      	bhi.n	8004886 <_printf_i+0x32>
 8004870:	2f00      	cmp	r7, #0
 8004872:	f000 80d3 	beq.w	8004a1c <_printf_i+0x1c8>
 8004876:	2f58      	cmp	r7, #88	@ 0x58
 8004878:	f000 80ba 	beq.w	80049f0 <_printf_i+0x19c>
 800487c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004884:	e03a      	b.n	80048fc <_printf_i+0xa8>
 8004886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800488a:	2b15      	cmp	r3, #21
 800488c:	d8f6      	bhi.n	800487c <_printf_i+0x28>
 800488e:	a101      	add	r1, pc, #4	@ (adr r1, 8004894 <_printf_i+0x40>)
 8004890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004894:	080048ed 	.word	0x080048ed
 8004898:	08004901 	.word	0x08004901
 800489c:	0800487d 	.word	0x0800487d
 80048a0:	0800487d 	.word	0x0800487d
 80048a4:	0800487d 	.word	0x0800487d
 80048a8:	0800487d 	.word	0x0800487d
 80048ac:	08004901 	.word	0x08004901
 80048b0:	0800487d 	.word	0x0800487d
 80048b4:	0800487d 	.word	0x0800487d
 80048b8:	0800487d 	.word	0x0800487d
 80048bc:	0800487d 	.word	0x0800487d
 80048c0:	08004a03 	.word	0x08004a03
 80048c4:	0800492b 	.word	0x0800492b
 80048c8:	080049bd 	.word	0x080049bd
 80048cc:	0800487d 	.word	0x0800487d
 80048d0:	0800487d 	.word	0x0800487d
 80048d4:	08004a25 	.word	0x08004a25
 80048d8:	0800487d 	.word	0x0800487d
 80048dc:	0800492b 	.word	0x0800492b
 80048e0:	0800487d 	.word	0x0800487d
 80048e4:	0800487d 	.word	0x0800487d
 80048e8:	080049c5 	.word	0x080049c5
 80048ec:	6833      	ldr	r3, [r6, #0]
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6032      	str	r2, [r6, #0]
 80048f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048fc:	2301      	movs	r3, #1
 80048fe:	e09e      	b.n	8004a3e <_printf_i+0x1ea>
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	6820      	ldr	r0, [r4, #0]
 8004904:	1d19      	adds	r1, r3, #4
 8004906:	6031      	str	r1, [r6, #0]
 8004908:	0606      	lsls	r6, r0, #24
 800490a:	d501      	bpl.n	8004910 <_printf_i+0xbc>
 800490c:	681d      	ldr	r5, [r3, #0]
 800490e:	e003      	b.n	8004918 <_printf_i+0xc4>
 8004910:	0645      	lsls	r5, r0, #25
 8004912:	d5fb      	bpl.n	800490c <_printf_i+0xb8>
 8004914:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004918:	2d00      	cmp	r5, #0
 800491a:	da03      	bge.n	8004924 <_printf_i+0xd0>
 800491c:	232d      	movs	r3, #45	@ 0x2d
 800491e:	426d      	negs	r5, r5
 8004920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004924:	230a      	movs	r3, #10
 8004926:	4859      	ldr	r0, [pc, #356]	@ (8004a8c <_printf_i+0x238>)
 8004928:	e011      	b.n	800494e <_printf_i+0xfa>
 800492a:	6821      	ldr	r1, [r4, #0]
 800492c:	6833      	ldr	r3, [r6, #0]
 800492e:	0608      	lsls	r0, r1, #24
 8004930:	f853 5b04 	ldr.w	r5, [r3], #4
 8004934:	d402      	bmi.n	800493c <_printf_i+0xe8>
 8004936:	0649      	lsls	r1, r1, #25
 8004938:	bf48      	it	mi
 800493a:	b2ad      	uxthmi	r5, r5
 800493c:	2f6f      	cmp	r7, #111	@ 0x6f
 800493e:	6033      	str	r3, [r6, #0]
 8004940:	bf14      	ite	ne
 8004942:	230a      	movne	r3, #10
 8004944:	2308      	moveq	r3, #8
 8004946:	4851      	ldr	r0, [pc, #324]	@ (8004a8c <_printf_i+0x238>)
 8004948:	2100      	movs	r1, #0
 800494a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800494e:	6866      	ldr	r6, [r4, #4]
 8004950:	2e00      	cmp	r6, #0
 8004952:	bfa8      	it	ge
 8004954:	6821      	ldrge	r1, [r4, #0]
 8004956:	60a6      	str	r6, [r4, #8]
 8004958:	bfa4      	itt	ge
 800495a:	f021 0104 	bicge.w	r1, r1, #4
 800495e:	6021      	strge	r1, [r4, #0]
 8004960:	b90d      	cbnz	r5, 8004966 <_printf_i+0x112>
 8004962:	2e00      	cmp	r6, #0
 8004964:	d04b      	beq.n	80049fe <_printf_i+0x1aa>
 8004966:	4616      	mov	r6, r2
 8004968:	fbb5 f1f3 	udiv	r1, r5, r3
 800496c:	fb03 5711 	mls	r7, r3, r1, r5
 8004970:	5dc7      	ldrb	r7, [r0, r7]
 8004972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004976:	462f      	mov	r7, r5
 8004978:	42bb      	cmp	r3, r7
 800497a:	460d      	mov	r5, r1
 800497c:	d9f4      	bls.n	8004968 <_printf_i+0x114>
 800497e:	2b08      	cmp	r3, #8
 8004980:	d10b      	bne.n	800499a <_printf_i+0x146>
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	07df      	lsls	r7, r3, #31
 8004986:	d508      	bpl.n	800499a <_printf_i+0x146>
 8004988:	6923      	ldr	r3, [r4, #16]
 800498a:	6861      	ldr	r1, [r4, #4]
 800498c:	4299      	cmp	r1, r3
 800498e:	bfde      	ittt	le
 8004990:	2330      	movle	r3, #48	@ 0x30
 8004992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800499a:	1b92      	subs	r2, r2, r6
 800499c:	6122      	str	r2, [r4, #16]
 800499e:	464b      	mov	r3, r9
 80049a0:	4621      	mov	r1, r4
 80049a2:	4640      	mov	r0, r8
 80049a4:	f8cd a000 	str.w	sl, [sp]
 80049a8:	aa03      	add	r2, sp, #12
 80049aa:	f7ff fee1 	bl	8004770 <_printf_common>
 80049ae:	3001      	adds	r0, #1
 80049b0:	d14a      	bne.n	8004a48 <_printf_i+0x1f4>
 80049b2:	f04f 30ff 	mov.w	r0, #4294967295
 80049b6:	b004      	add	sp, #16
 80049b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	f043 0320 	orr.w	r3, r3, #32
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	2778      	movs	r7, #120	@ 0x78
 80049c6:	4832      	ldr	r0, [pc, #200]	@ (8004a90 <_printf_i+0x23c>)
 80049c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	6831      	ldr	r1, [r6, #0]
 80049d0:	061f      	lsls	r7, r3, #24
 80049d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80049d6:	d402      	bmi.n	80049de <_printf_i+0x18a>
 80049d8:	065f      	lsls	r7, r3, #25
 80049da:	bf48      	it	mi
 80049dc:	b2ad      	uxthmi	r5, r5
 80049de:	6031      	str	r1, [r6, #0]
 80049e0:	07d9      	lsls	r1, r3, #31
 80049e2:	bf44      	itt	mi
 80049e4:	f043 0320 	orrmi.w	r3, r3, #32
 80049e8:	6023      	strmi	r3, [r4, #0]
 80049ea:	b11d      	cbz	r5, 80049f4 <_printf_i+0x1a0>
 80049ec:	2310      	movs	r3, #16
 80049ee:	e7ab      	b.n	8004948 <_printf_i+0xf4>
 80049f0:	4826      	ldr	r0, [pc, #152]	@ (8004a8c <_printf_i+0x238>)
 80049f2:	e7e9      	b.n	80049c8 <_printf_i+0x174>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	f023 0320 	bic.w	r3, r3, #32
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	e7f6      	b.n	80049ec <_printf_i+0x198>
 80049fe:	4616      	mov	r6, r2
 8004a00:	e7bd      	b.n	800497e <_printf_i+0x12a>
 8004a02:	6833      	ldr	r3, [r6, #0]
 8004a04:	6825      	ldr	r5, [r4, #0]
 8004a06:	1d18      	adds	r0, r3, #4
 8004a08:	6961      	ldr	r1, [r4, #20]
 8004a0a:	6030      	str	r0, [r6, #0]
 8004a0c:	062e      	lsls	r6, r5, #24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	d501      	bpl.n	8004a16 <_printf_i+0x1c2>
 8004a12:	6019      	str	r1, [r3, #0]
 8004a14:	e002      	b.n	8004a1c <_printf_i+0x1c8>
 8004a16:	0668      	lsls	r0, r5, #25
 8004a18:	d5fb      	bpl.n	8004a12 <_printf_i+0x1be>
 8004a1a:	8019      	strh	r1, [r3, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4616      	mov	r6, r2
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	e7bc      	b.n	800499e <_printf_i+0x14a>
 8004a24:	6833      	ldr	r3, [r6, #0]
 8004a26:	2100      	movs	r1, #0
 8004a28:	1d1a      	adds	r2, r3, #4
 8004a2a:	6032      	str	r2, [r6, #0]
 8004a2c:	681e      	ldr	r6, [r3, #0]
 8004a2e:	6862      	ldr	r2, [r4, #4]
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f859 	bl	8004ae8 <memchr>
 8004a36:	b108      	cbz	r0, 8004a3c <_printf_i+0x1e8>
 8004a38:	1b80      	subs	r0, r0, r6
 8004a3a:	6060      	str	r0, [r4, #4]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	2300      	movs	r3, #0
 8004a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a46:	e7aa      	b.n	800499e <_printf_i+0x14a>
 8004a48:	4632      	mov	r2, r6
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	47d0      	blx	sl
 8004a52:	3001      	adds	r0, #1
 8004a54:	d0ad      	beq.n	80049b2 <_printf_i+0x15e>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	079b      	lsls	r3, r3, #30
 8004a5a:	d413      	bmi.n	8004a84 <_printf_i+0x230>
 8004a5c:	68e0      	ldr	r0, [r4, #12]
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	4298      	cmp	r0, r3
 8004a62:	bfb8      	it	lt
 8004a64:	4618      	movlt	r0, r3
 8004a66:	e7a6      	b.n	80049b6 <_printf_i+0x162>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4632      	mov	r2, r6
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	4640      	mov	r0, r8
 8004a70:	47d0      	blx	sl
 8004a72:	3001      	adds	r0, #1
 8004a74:	d09d      	beq.n	80049b2 <_printf_i+0x15e>
 8004a76:	3501      	adds	r5, #1
 8004a78:	68e3      	ldr	r3, [r4, #12]
 8004a7a:	9903      	ldr	r1, [sp, #12]
 8004a7c:	1a5b      	subs	r3, r3, r1
 8004a7e:	42ab      	cmp	r3, r5
 8004a80:	dcf2      	bgt.n	8004a68 <_printf_i+0x214>
 8004a82:	e7eb      	b.n	8004a5c <_printf_i+0x208>
 8004a84:	2500      	movs	r5, #0
 8004a86:	f104 0619 	add.w	r6, r4, #25
 8004a8a:	e7f5      	b.n	8004a78 <_printf_i+0x224>
 8004a8c:	0800598b 	.word	0x0800598b
 8004a90:	0800599c 	.word	0x0800599c

08004a94 <memmove>:
 8004a94:	4288      	cmp	r0, r1
 8004a96:	b510      	push	{r4, lr}
 8004a98:	eb01 0402 	add.w	r4, r1, r2
 8004a9c:	d902      	bls.n	8004aa4 <memmove+0x10>
 8004a9e:	4284      	cmp	r4, r0
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	d807      	bhi.n	8004ab4 <memmove+0x20>
 8004aa4:	1e43      	subs	r3, r0, #1
 8004aa6:	42a1      	cmp	r1, r4
 8004aa8:	d008      	beq.n	8004abc <memmove+0x28>
 8004aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ab2:	e7f8      	b.n	8004aa6 <memmove+0x12>
 8004ab4:	4601      	mov	r1, r0
 8004ab6:	4402      	add	r2, r0
 8004ab8:	428a      	cmp	r2, r1
 8004aba:	d100      	bne.n	8004abe <memmove+0x2a>
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ac6:	e7f7      	b.n	8004ab8 <memmove+0x24>

08004ac8 <_sbrk_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	2300      	movs	r3, #0
 8004acc:	4d05      	ldr	r5, [pc, #20]	@ (8004ae4 <_sbrk_r+0x1c>)
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	f7fd fae8 	bl	80020a8 <_sbrk>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_sbrk_r+0x1a>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_sbrk_r+0x1a>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	20000628 	.word	0x20000628

08004ae8 <memchr>:
 8004ae8:	4603      	mov	r3, r0
 8004aea:	b510      	push	{r4, lr}
 8004aec:	b2c9      	uxtb	r1, r1
 8004aee:	4402      	add	r2, r0
 8004af0:	4293      	cmp	r3, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	d101      	bne.n	8004afa <memchr+0x12>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e003      	b.n	8004b02 <memchr+0x1a>
 8004afa:	7804      	ldrb	r4, [r0, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	428c      	cmp	r4, r1
 8004b00:	d1f6      	bne.n	8004af0 <memchr+0x8>
 8004b02:	bd10      	pop	{r4, pc}

08004b04 <memcpy>:
 8004b04:	440a      	add	r2, r1
 8004b06:	4291      	cmp	r1, r2
 8004b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b0c:	d100      	bne.n	8004b10 <memcpy+0xc>
 8004b0e:	4770      	bx	lr
 8004b10:	b510      	push	{r4, lr}
 8004b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b16:	4291      	cmp	r1, r2
 8004b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b1c:	d1f9      	bne.n	8004b12 <memcpy+0xe>
 8004b1e:	bd10      	pop	{r4, pc}

08004b20 <_realloc_r>:
 8004b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b24:	4680      	mov	r8, r0
 8004b26:	4615      	mov	r5, r2
 8004b28:	460c      	mov	r4, r1
 8004b2a:	b921      	cbnz	r1, 8004b36 <_realloc_r+0x16>
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b32:	f7ff bc39 	b.w	80043a8 <_malloc_r>
 8004b36:	b92a      	cbnz	r2, 8004b44 <_realloc_r+0x24>
 8004b38:	f7ff fbcc 	bl	80042d4 <_free_r>
 8004b3c:	2400      	movs	r4, #0
 8004b3e:	4620      	mov	r0, r4
 8004b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b44:	f000 f81a 	bl	8004b7c <_malloc_usable_size_r>
 8004b48:	4285      	cmp	r5, r0
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	d802      	bhi.n	8004b54 <_realloc_r+0x34>
 8004b4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b52:	d8f4      	bhi.n	8004b3e <_realloc_r+0x1e>
 8004b54:	4629      	mov	r1, r5
 8004b56:	4640      	mov	r0, r8
 8004b58:	f7ff fc26 	bl	80043a8 <_malloc_r>
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d0ec      	beq.n	8004b3c <_realloc_r+0x1c>
 8004b62:	42b5      	cmp	r5, r6
 8004b64:	462a      	mov	r2, r5
 8004b66:	4621      	mov	r1, r4
 8004b68:	bf28      	it	cs
 8004b6a:	4632      	movcs	r2, r6
 8004b6c:	f7ff ffca 	bl	8004b04 <memcpy>
 8004b70:	4621      	mov	r1, r4
 8004b72:	4640      	mov	r0, r8
 8004b74:	f7ff fbae 	bl	80042d4 <_free_r>
 8004b78:	463c      	mov	r4, r7
 8004b7a:	e7e0      	b.n	8004b3e <_realloc_r+0x1e>

08004b7c <_malloc_usable_size_r>:
 8004b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b80:	1f18      	subs	r0, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bfbc      	itt	lt
 8004b86:	580b      	ldrlt	r3, [r1, r0]
 8004b88:	18c0      	addlt	r0, r0, r3
 8004b8a:	4770      	bx	lr

08004b8c <_init>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr

08004b98 <_fini>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr
