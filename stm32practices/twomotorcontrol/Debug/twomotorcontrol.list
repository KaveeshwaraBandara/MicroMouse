
twomotorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d14  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08003e20  08003e20  00004e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004be8  08004be8  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004be8  08004be8  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be8  08004be8  00005be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bec  08004bec  00005bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004bf0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000014  08004c04  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08004c04  00006568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf12  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d53  00000000  00000000  00011f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00013ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5b  00000000  00000000  000149d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bb7  00000000  00000000  00015433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3c2  00000000  00000000  0002cfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a777  00000000  00000000  0003c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6b23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  000c6b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ca39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e08 	.word	0x08003e08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003e08 	.word	0x08003e08

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fcaf 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8cb 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa87 	bl	800066c <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f931 	bl	80003c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000162:	f000 f9db 	bl	800051c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000166:	f000 fa2d 	bl	80005c4 <MX_TIM3_Init>
  MX_I2C1_Init();
 800016a:	f000 f8fd 	bl	8000368 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800016e:	f003 fb01 	bl	8003774 <SSD1306_Init>
  int counterValueLeft=0;
 8000172:	2300      	movs	r3, #0
 8000174:	617b      	str	r3, [r7, #20]
  int counterValueRight=0;
 8000176:	2300      	movs	r3, #0
 8000178:	613b      	str	r3, [r7, #16]

  char snumLeft[5];
  char snumRight[5];

  SSD1306_GotoXY (0,0);
 800017a:	2100      	movs	r1, #0
 800017c:	2000      	movs	r0, #0
 800017e:	f003 fc61 	bl	8003a44 <SSD1306_GotoXY>
  SSD1306_Puts ("Imanchana", &Font_11x18, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	4950      	ldr	r1, [pc, #320]	@ (80002c8 <main+0x17c>)
 8000186:	4851      	ldr	r0, [pc, #324]	@ (80002cc <main+0x180>)
 8000188:	f003 fcf0 	bl	8003b6c <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 800018c:	211e      	movs	r1, #30
 800018e:	2000      	movs	r0, #0
 8000190:	f003 fc58 	bl	8003a44 <SSD1306_GotoXY>
  SSD1306_Puts ("Kaveeshwara", &Font_11x18, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	494c      	ldr	r1, [pc, #304]	@ (80002c8 <main+0x17c>)
 8000198:	484d      	ldr	r0, [pc, #308]	@ (80002d0 <main+0x184>)
 800019a:	f003 fce7 	bl	8003b6c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800019e:	f003 fbad 	bl	80038fc <SSD1306_UpdateScreen>
  HAL_Delay (1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001a6:	f000 fce7 	bl	8000b78 <HAL_Delay>

  SSD1306_ScrollRight(0,7);
 80001aa:	2107      	movs	r1, #7
 80001ac:	2000      	movs	r0, #0
 80001ae:	f003 fa6c 	bl	800368a <SSD1306_ScrollRight>
  HAL_Delay(3000);
 80001b2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001b6:	f000 fcdf 	bl	8000b78 <HAL_Delay>
  SSD1306_ScrollLeft(0,7);
 80001ba:	2107      	movs	r1, #7
 80001bc:	2000      	movs	r0, #0
 80001be:	f003 fa9a 	bl	80036f6 <SSD1306_ScrollLeft>
  HAL_Delay(3000);
 80001c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001c6:	f000 fcd7 	bl	8000b78 <HAL_Delay>
  SSD1306_Stopscroll();
 80001ca:	f003 faca 	bl	8003762 <SSD1306_Stopscroll>
  SSD1306_Clear();
 80001ce:	f003 fcf2 	bl	8003bb6 <SSD1306_Clear>

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80001d2:	213c      	movs	r1, #60	@ 0x3c
 80001d4:	483f      	ldr	r0, [pc, #252]	@ (80002d4 <main+0x188>)
 80001d6:	f002 fbb3 	bl	8002940 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80001da:	213c      	movs	r1, #60	@ 0x3c
 80001dc:	483e      	ldr	r0, [pc, #248]	@ (80002d8 <main+0x18c>)
 80001de:	f002 fbaf 	bl	8002940 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);  // Enable motor LEFT
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001e8:	483c      	ldr	r0, [pc, #240]	@ (80002dc <main+0x190>)
 80001ea:	f000 ff7b 	bl	80010e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001f4:	4839      	ldr	r0, [pc, #228]	@ (80002dc <main+0x190>)
 80001f6:	f000 ff75 	bl	80010e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2108      	movs	r1, #8
 80001fe:	4838      	ldr	r0, [pc, #224]	@ (80002e0 <main+0x194>)
 8000200:	f000 ff70 	bl	80010e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	2110      	movs	r1, #16
 8000208:	4835      	ldr	r0, [pc, #212]	@ (80002e0 <main+0x194>)
 800020a:	f000 ff6b 	bl	80010e4 <HAL_GPIO_WritePin>
	  TIM1->CCR1 = 100;
 800020e:	4b35      	ldr	r3, [pc, #212]	@ (80002e4 <main+0x198>)
 8000210:	2264      	movs	r2, #100	@ 0x64
 8000212:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = 100;// 50% duty cycle for TIM_CHANNEL_1
 8000214:	4b33      	ldr	r3, [pc, #204]	@ (80002e4 <main+0x198>)
 8000216:	2264      	movs	r2, #100	@ 0x64
 8000218:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800021a:	2100      	movs	r1, #0
 800021c:	4832      	ldr	r0, [pc, #200]	@ (80002e8 <main+0x19c>)
 800021e:	f002 f9e7 	bl	80025f0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000222:	2104      	movs	r1, #4
 8000224:	4830      	ldr	r0, [pc, #192]	@ (80002e8 <main+0x19c>)
 8000226:	f002 f9e3 	bl	80025f0 <HAL_TIM_PWM_Start>
	  HAL_Delay(3000);
 800022a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800022e:	f000 fca3 	bl	8000b78 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000238:	4828      	ldr	r0, [pc, #160]	@ (80002dc <main+0x190>)
 800023a:	f000 ff53 	bl	80010e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2110      	movs	r1, #16
 8000242:	4827      	ldr	r0, [pc, #156]	@ (80002e0 <main+0x194>)
 8000244:	f000 ff4e 	bl	80010e4 <HAL_GPIO_WritePin>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000248:	2100      	movs	r1, #0
 800024a:	4827      	ldr	r0, [pc, #156]	@ (80002e8 <main+0x19c>)
 800024c:	f002 fa72 	bl	8002734 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000250:	2104      	movs	r1, #4
 8000252:	4825      	ldr	r0, [pc, #148]	@ (80002e8 <main+0x19c>)
 8000254:	f002 fa6e 	bl	8002734 <HAL_TIM_PWM_Stop>
	  HAL_Delay(1000);
 8000258:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800025c:	f000 fc8c 	bl	8000b78 <HAL_Delay>

	  counterValueRight = TIM2->CNT;
 8000260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000266:	613b      	str	r3, [r7, #16]
	  counterValueLeft = TIM3->CNT;
 8000268:	4b20      	ldr	r3, [pc, #128]	@ (80002ec <main+0x1a0>)
 800026a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800026c:	617b      	str	r3, [r7, #20]

	  itoa(counterValueLeft, snumLeft, 10);
 800026e:	f107 0308 	add.w	r3, r7, #8
 8000272:	220a      	movs	r2, #10
 8000274:	4619      	mov	r1, r3
 8000276:	6978      	ldr	r0, [r7, #20]
 8000278:	f003 fd56 	bl	8003d28 <itoa>
	  itoa(counterValueRight, snumRight, 10);
 800027c:	463b      	mov	r3, r7
 800027e:	220a      	movs	r2, #10
 8000280:	4619      	mov	r1, r3
 8000282:	6938      	ldr	r0, [r7, #16]
 8000284:	f003 fd50 	bl	8003d28 <itoa>
	  SSD1306_GotoXY (37, 10);
 8000288:	210a      	movs	r1, #10
 800028a:	2025      	movs	r0, #37	@ 0x25
 800028c:	f003 fbda 	bl	8003a44 <SSD1306_GotoXY>
	  SSD1306_Puts (snumLeft, &Font_11x18, 1);
 8000290:	f107 0308 	add.w	r3, r7, #8
 8000294:	2201      	movs	r2, #1
 8000296:	490c      	ldr	r1, [pc, #48]	@ (80002c8 <main+0x17c>)
 8000298:	4618      	mov	r0, r3
 800029a:	f003 fc67 	bl	8003b6c <SSD1306_Puts>
	  SSD1306_GotoXY (37, 40);
 800029e:	2128      	movs	r1, #40	@ 0x28
 80002a0:	2025      	movs	r0, #37	@ 0x25
 80002a2:	f003 fbcf 	bl	8003a44 <SSD1306_GotoXY>
	  SSD1306_Puts (snumRight, &Font_11x18, 1);
 80002a6:	463b      	mov	r3, r7
 80002a8:	2201      	movs	r2, #1
 80002aa:	4907      	ldr	r1, [pc, #28]	@ (80002c8 <main+0x17c>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f003 fc5d 	bl	8003b6c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80002b2:	f003 fb23 	bl	80038fc <SSD1306_UpdateScreen>
//	  counterValueRight =0;
//	  counterValueLeft = 0;
	  TIM2->CNT=0;
 80002b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ba:	2200      	movs	r2, #0
 80002bc:	625a      	str	r2, [r3, #36]	@ 0x24
	  TIM3->CNT=0;
 80002be:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <main+0x1a0>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);  // Enable motor LEFT
 80002c4:	bf00      	nop
 80002c6:	e78c      	b.n	80001e2 <main+0x96>
 80002c8:	2000000c 	.word	0x2000000c
 80002cc:	08003e20 	.word	0x08003e20
 80002d0:	08003e2c 	.word	0x08003e2c
 80002d4:	200000cc 	.word	0x200000cc
 80002d8:	20000114 	.word	0x20000114
 80002dc:	40010800 	.word	0x40010800
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	40012c00 	.word	0x40012c00
 80002e8:	20000084 	.word	0x20000084
 80002ec:	40000400 	.word	0x40000400

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b090      	sub	sp, #64	@ 0x40
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	2228      	movs	r2, #40	@ 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fd56 	bl	8003db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000312:	2302      	movs	r3, #2
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000316:	2301      	movs	r3, #1
 8000318:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031a:	2310      	movs	r3, #16
 800031c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031e:	2300      	movs	r3, #0
 8000320:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fcbe 	bl	8001ca8 <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000332:	f000 fa13 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f001 ff2c 	bl	80021ac <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800035a:	f000 f9ff 	bl	800075c <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	@ 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <MX_I2C1_Init+0x50>)
 800036e:	4a13      	ldr	r2, [pc, #76]	@ (80003bc <MX_I2C1_Init+0x54>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000372:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_I2C1_Init+0x50>)
 8000374:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <MX_I2C1_Init+0x58>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_I2C1_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_I2C1_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_I2C1_Init+0x50>)
 8000386:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800038a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800038c:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <MX_I2C1_Init+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_I2C1_Init+0x50>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000398:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <MX_I2C1_Init+0x50>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_I2C1_Init+0x50>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <MX_I2C1_Init+0x50>)
 80003a6:	f000 feb5 	bl	8001114 <HAL_I2C_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003b0:	f000 f9d4 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000030 	.word	0x20000030
 80003bc:	40005400 	.word	0x40005400
 80003c0:	00061a80 	.word	0x00061a80

080003c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b096      	sub	sp, #88	@ 0x58
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2220      	movs	r2, #32
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 fcd7 	bl	8003db0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000402:	4b44      	ldr	r3, [pc, #272]	@ (8000514 <MX_TIM1_Init+0x150>)
 8000404:	4a44      	ldr	r2, [pc, #272]	@ (8000518 <MX_TIM1_Init+0x154>)
 8000406:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000408:	4b42      	ldr	r3, [pc, #264]	@ (8000514 <MX_TIM1_Init+0x150>)
 800040a:	2207      	movs	r2, #7
 800040c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040e:	4b41      	ldr	r3, [pc, #260]	@ (8000514 <MX_TIM1_Init+0x150>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000414:	4b3f      	ldr	r3, [pc, #252]	@ (8000514 <MX_TIM1_Init+0x150>)
 8000416:	22c7      	movs	r2, #199	@ 0xc7
 8000418:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041a:	4b3e      	ldr	r3, [pc, #248]	@ (8000514 <MX_TIM1_Init+0x150>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000420:	4b3c      	ldr	r3, [pc, #240]	@ (8000514 <MX_TIM1_Init+0x150>)
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000426:	4b3b      	ldr	r3, [pc, #236]	@ (8000514 <MX_TIM1_Init+0x150>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800042c:	4839      	ldr	r0, [pc, #228]	@ (8000514 <MX_TIM1_Init+0x150>)
 800042e:	f002 f837 	bl	80024a0 <HAL_TIM_Base_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000438:	f000 f990 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000440:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000442:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000446:	4619      	mov	r1, r3
 8000448:	4832      	ldr	r0, [pc, #200]	@ (8000514 <MX_TIM1_Init+0x150>)
 800044a:	f002 fcb9 	bl	8002dc0 <HAL_TIM_ConfigClockSource>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000454:	f000 f982 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000458:	482e      	ldr	r0, [pc, #184]	@ (8000514 <MX_TIM1_Init+0x150>)
 800045a:	f002 f870 	bl	800253e <HAL_TIM_PWM_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000464:	f000 f97a 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000468:	2300      	movs	r3, #0
 800046a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046c:	2300      	movs	r3, #0
 800046e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000470:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000474:	4619      	mov	r1, r3
 8000476:	4827      	ldr	r0, [pc, #156]	@ (8000514 <MX_TIM1_Init+0x150>)
 8000478:	f003 f846 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000482:	f000 f96b 	bl	800075c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000486:	2360      	movs	r3, #96	@ 0x60
 8000488:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800048e:	2300      	movs	r3, #0
 8000490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000492:	2300      	movs	r3, #0
 8000494:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800049e:	2300      	movs	r3, #0
 80004a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a6:	2200      	movs	r2, #0
 80004a8:	4619      	mov	r1, r3
 80004aa:	481a      	ldr	r0, [pc, #104]	@ (8000514 <MX_TIM1_Init+0x150>)
 80004ac:	f002 fbc6 	bl	8002c3c <HAL_TIM_PWM_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80004b6:	f000 f951 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004be:	2204      	movs	r2, #4
 80004c0:	4619      	mov	r1, r3
 80004c2:	4814      	ldr	r0, [pc, #80]	@ (8000514 <MX_TIM1_Init+0x150>)
 80004c4:	f002 fbba 	bl	8002c3c <HAL_TIM_PWM_ConfigChannel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80004ce:	f000 f945 	bl	800075c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	4807      	ldr	r0, [pc, #28]	@ (8000514 <MX_TIM1_Init+0x150>)
 80004f6:	f003 f865 	bl	80035c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000500:	f000 f92c 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000504:	4803      	ldr	r0, [pc, #12]	@ (8000514 <MX_TIM1_Init+0x150>)
 8000506:	f000 fa35 	bl	8000974 <HAL_TIM_MspPostInit>

}
 800050a:	bf00      	nop
 800050c:	3758      	adds	r7, #88	@ 0x58
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000084 	.word	0x20000084
 8000518:	40012c00 	.word	0x40012c00

0800051c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	@ 0x30
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2224      	movs	r2, #36	@ 0x24
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fc40 	bl	8003db0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <MX_TIM2_Init+0xa4>)
 800053a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800053e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000540:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <MX_TIM2_Init+0xa4>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000546:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_TIM2_Init+0xa4>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800054c:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <MX_TIM2_Init+0xa4>)
 800054e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000554:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_TIM2_Init+0xa4>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055a:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <MX_TIM2_Init+0xa4>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000560:	2303      	movs	r3, #3
 8000562:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000568:	2301      	movs	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000570:	2305      	movs	r3, #5
 8000572:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000578:	2301      	movs	r3, #1
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000580:	2305      	movs	r3, #5
 8000582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <MX_TIM2_Init+0xa4>)
 800058c:	f002 f936 	bl	80027fc <HAL_TIM_Encoder_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000596:	f000 f8e1 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <MX_TIM2_Init+0xa4>)
 80005a8:	f002 ffae 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f8d3 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3730      	adds	r7, #48	@ 0x30
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000cc 	.word	0x200000cc

080005c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2224      	movs	r2, #36	@ 0x24
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fbec 	bl	8003db0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005e0:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <MX_TIM3_Init+0xa0>)
 80005e2:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <MX_TIM3_Init+0xa4>)
 80005e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <MX_TIM3_Init+0xa0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <MX_TIM3_Init+0xa0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_TIM3_Init+0xa0>)
 80005f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_TIM3_Init+0xa0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_TIM3_Init+0xa0>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000606:	2303      	movs	r3, #3
 8000608:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000616:	2305      	movs	r3, #5
 8000618:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800061e:	2301      	movs	r3, #1
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000626:	2305      	movs	r3, #5
 8000628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4619      	mov	r1, r3
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_TIM3_Init+0xa0>)
 8000632:	f002 f8e3 	bl	80027fc <HAL_TIM_Encoder_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800063c:	f000 f88e 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_TIM3_Init+0xa0>)
 800064e:	f002 ff5b 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000658:	f000 f880 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3730      	adds	r7, #48	@ 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000114 	.word	0x20000114
 8000668:	40000400 	.word	0x40000400

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4b32      	ldr	r3, [pc, #200]	@ (800074c <MX_GPIO_Init+0xe0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a31      	ldr	r2, [pc, #196]	@ (800074c <MX_GPIO_Init+0xe0>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <MX_GPIO_Init+0xe0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0310 	and.w	r3, r3, #16
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <MX_GPIO_Init+0xe0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <MX_GPIO_Init+0xe0>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <MX_GPIO_Init+0xe0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <MX_GPIO_Init+0xe0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a25      	ldr	r2, [pc, #148]	@ (800074c <MX_GPIO_Init+0xe0>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b23      	ldr	r3, [pc, #140]	@ (800074c <MX_GPIO_Init+0xe0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ce:	4820      	ldr	r0, [pc, #128]	@ (8000750 <MX_GPIO_Init+0xe4>)
 80006d0:	f000 fd08 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80006da:	481e      	ldr	r0, [pc, #120]	@ (8000754 <MX_GPIO_Init+0xe8>)
 80006dc:	f000 fd02 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2118      	movs	r1, #24
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <MX_GPIO_Init+0xec>)
 80006e6:	f000 fcfd 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4813      	ldr	r0, [pc, #76]	@ (8000750 <MX_GPIO_Init+0xe4>)
 8000704:	f000 fb6a 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000708:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <MX_GPIO_Init+0xe8>)
 8000722:	f000 fb5b 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000726:	2318      	movs	r3, #24
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	4806      	ldr	r0, [pc, #24]	@ (8000758 <MX_GPIO_Init+0xec>)
 800073e:	f000 fb4d 	bl	8000ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000742:	bf00      	nop
 8000744:	3720      	adds	r7, #32
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	40011000 	.word	0x40011000
 8000754:	40010800 	.word	0x40010800
 8000758:	40010c00 	.word	0x40010c00

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <HAL_MspInit+0x60>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <HAL_MspInit+0x60>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a15      	ldr	r2, [pc, #84]	@ (800083c <HAL_I2C_MspInit+0x70>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d123      	bne.n	8000834 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <HAL_I2C_MspInit+0x74>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <HAL_I2C_MspInit+0x74>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <HAL_I2C_MspInit+0x74>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000804:	23c0      	movs	r3, #192	@ 0xc0
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000808:	2312      	movs	r3, #18
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	480b      	ldr	r0, [pc, #44]	@ (8000844 <HAL_I2C_MspInit+0x78>)
 8000818:	f000 fae0 	bl	8000ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <HAL_I2C_MspInit+0x74>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <HAL_I2C_MspInit+0x74>)
 8000822:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000826:	61d3      	str	r3, [r2, #28]
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_I2C_MspInit+0x74>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40005400 	.word	0x40005400
 8000840:	40021000 	.word	0x40021000
 8000844:	40010c00 	.word	0x40010c00

08000848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a09      	ldr	r2, [pc, #36]	@ (800087c <HAL_TIM_Base_MspInit+0x34>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d10b      	bne.n	8000872 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_TIM_Base_MspInit+0x38>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_TIM_Base_MspInit+0x38>)
 8000860:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000864:	6193      	str	r3, [r2, #24]
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_TIM_Base_MspInit+0x38>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	40012c00 	.word	0x40012c00
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008a2:	d12c      	bne.n	80008fe <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008a4:	4b30      	ldr	r3, [pc, #192]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	61d3      	str	r3, [r2, #28]
 80008b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a29      	ldr	r2, [pc, #164]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008d4:	2303      	movs	r3, #3
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4821      	ldr	r0, [pc, #132]	@ (800096c <HAL_TIM_Encoder_MspInit+0xe8>)
 80008e8:	f000 fa78 	bl	8000ddc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	201c      	movs	r0, #28
 80008f2:	f000 fa3c 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f6:	201c      	movs	r0, #28
 80008f8:	f000 fa55 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008fc:	e030      	b.n	8000960 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a1b      	ldr	r2, [pc, #108]	@ (8000970 <HAL_TIM_Encoder_MspInit+0xec>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d12b      	bne.n	8000960 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 800090a:	69db      	ldr	r3, [r3, #28]
 800090c:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 800090e:	f043 0302 	orr.w	r3, r3, #2
 8000912:	61d3      	str	r3, [r2, #28]
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <HAL_TIM_Encoder_MspInit+0xe4>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000938:	23c0      	movs	r3, #192	@ 0xc0
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4619      	mov	r1, r3
 800094a:	4808      	ldr	r0, [pc, #32]	@ (800096c <HAL_TIM_Encoder_MspInit+0xe8>)
 800094c:	f000 fa46 	bl	8000ddc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	201d      	movs	r0, #29
 8000956:	f000 fa0a 	bl	8000d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800095a:	201d      	movs	r0, #29
 800095c:	f000 fa23 	bl	8000da6 <HAL_NVIC_EnableIRQ>
}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	@ 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000
 800096c:	40010800 	.word	0x40010800
 8000970:	40000400 	.word	0x40000400

08000974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_TIM_MspPostInit+0x5c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d118      	bne.n	80009c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_TIM_MspPostInit+0x60>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a0e      	ldr	r2, [pc, #56]	@ (80009d4 <HAL_TIM_MspPostInit+0x60>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <HAL_TIM_MspPostInit+0x60>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <HAL_TIM_MspPostInit+0x64>)
 80009c2:	f000 fa0b 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010800 	.word	0x40010800

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f888 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <TIM2_IRQHandler+0x10>)
 8000a3a:	f002 f80f 	bl	8002a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000cc 	.word	0x200000cc

08000a48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <TIM3_IRQHandler+0x10>)
 8000a4e:	f002 f805 	bl	8002a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000114 	.word	0x20000114

08000a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a68:	f7ff fff8 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a6e:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a84:	4c09      	ldr	r4, [pc, #36]	@ (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f003 f995 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fb59 	bl	800014c <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000aa4:	08004bf0 	.word	0x08004bf0
  ldr r2, =_sbss
 8000aa8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000aac:	20000568 	.word	0x20000568

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f947 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fe4a 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f95f 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f927 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	2000015c 	.word	0x2000015c

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	2000015c 	.word	0x2000015c

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4906      	ldr	r1, [pc, #24]	@ (8000c58 <__NVIC_EnableIRQ+0x34>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	@ (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	@ 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff90 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff2d 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff42 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff90 	bl	8000cb0 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5f 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff35 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b08b      	sub	sp, #44	@ 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e169      	b.n	80010c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000df0:	2201      	movs	r2, #1
 8000df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8158 	bne.w	80010be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	4a9a      	ldr	r2, [pc, #616]	@ (800107c <HAL_GPIO_Init+0x2a0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d05e      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e18:	4a98      	ldr	r2, [pc, #608]	@ (800107c <HAL_GPIO_Init+0x2a0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d875      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e1e:	4a98      	ldr	r2, [pc, #608]	@ (8001080 <HAL_GPIO_Init+0x2a4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d058      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e24:	4a96      	ldr	r2, [pc, #600]	@ (8001080 <HAL_GPIO_Init+0x2a4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d86f      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e2a:	4a96      	ldr	r2, [pc, #600]	@ (8001084 <HAL_GPIO_Init+0x2a8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d052      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e30:	4a94      	ldr	r2, [pc, #592]	@ (8001084 <HAL_GPIO_Init+0x2a8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d869      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e36:	4a94      	ldr	r2, [pc, #592]	@ (8001088 <HAL_GPIO_Init+0x2ac>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d04c      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e3c:	4a92      	ldr	r2, [pc, #584]	@ (8001088 <HAL_GPIO_Init+0x2ac>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d863      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e42:	4a92      	ldr	r2, [pc, #584]	@ (800108c <HAL_GPIO_Init+0x2b0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d046      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
 8000e48:	4a90      	ldr	r2, [pc, #576]	@ (800108c <HAL_GPIO_Init+0x2b0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d85d      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d82a      	bhi.n	8000ea8 <HAL_GPIO_Init+0xcc>
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d859      	bhi.n	8000f0a <HAL_GPIO_Init+0x12e>
 8000e56:	a201      	add	r2, pc, #4	@ (adr r2, 8000e5c <HAL_GPIO_Init+0x80>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000ed7 	.word	0x08000ed7
 8000e60:	08000eb1 	.word	0x08000eb1
 8000e64:	08000ec3 	.word	0x08000ec3
 8000e68:	08000f05 	.word	0x08000f05
 8000e6c:	08000f0b 	.word	0x08000f0b
 8000e70:	08000f0b 	.word	0x08000f0b
 8000e74:	08000f0b 	.word	0x08000f0b
 8000e78:	08000f0b 	.word	0x08000f0b
 8000e7c:	08000f0b 	.word	0x08000f0b
 8000e80:	08000f0b 	.word	0x08000f0b
 8000e84:	08000f0b 	.word	0x08000f0b
 8000e88:	08000f0b 	.word	0x08000f0b
 8000e8c:	08000f0b 	.word	0x08000f0b
 8000e90:	08000f0b 	.word	0x08000f0b
 8000e94:	08000f0b 	.word	0x08000f0b
 8000e98:	08000f0b 	.word	0x08000f0b
 8000e9c:	08000f0b 	.word	0x08000f0b
 8000ea0:	08000eb9 	.word	0x08000eb9
 8000ea4:	08000ecd 	.word	0x08000ecd
 8000ea8:	4a79      	ldr	r2, [pc, #484]	@ (8001090 <HAL_GPIO_Init+0x2b4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eae:	e02c      	b.n	8000f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	623b      	str	r3, [r7, #32]
          break;
 8000eb6:	e029      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	623b      	str	r3, [r7, #32]
          break;
 8000ec0:	e024      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e01f      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	330c      	adds	r3, #12
 8000ed2:	623b      	str	r3, [r7, #32]
          break;
 8000ed4:	e01a      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e013      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d105      	bne.n	8000ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eec:	2308      	movs	r3, #8
 8000eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	611a      	str	r2, [r3, #16]
          break;
 8000ef6:	e009      	b.n	8000f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	615a      	str	r2, [r3, #20]
          break;
 8000f02:	e003      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x130>
          break;
 8000f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2bff      	cmp	r3, #255	@ 0xff
 8000f10:	d801      	bhi.n	8000f16 <HAL_GPIO_Init+0x13a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	e001      	b.n	8000f1a <HAL_GPIO_Init+0x13e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2bff      	cmp	r3, #255	@ 0xff
 8000f20:	d802      	bhi.n	8000f28 <HAL_GPIO_Init+0x14c>
 8000f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x152>
 8000f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2a:	3b08      	subs	r3, #8
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	210f      	movs	r1, #15
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	6a39      	ldr	r1, [r7, #32]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80b1 	beq.w	80010be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a4c      	ldr	r2, [pc, #304]	@ (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b4a      	ldr	r3, [pc, #296]	@ (8001094 <HAL_GPIO_Init+0x2b8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f74:	4a48      	ldr	r2, [pc, #288]	@ (8001098 <HAL_GPIO_Init+0x2bc>)
 8000f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a40      	ldr	r2, [pc, #256]	@ (800109c <HAL_GPIO_Init+0x2c0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d013      	beq.n	8000fc8 <HAL_GPIO_Init+0x1ec>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80010a0 <HAL_GPIO_Init+0x2c4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d00d      	beq.n	8000fc4 <HAL_GPIO_Init+0x1e8>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3e      	ldr	r2, [pc, #248]	@ (80010a4 <HAL_GPIO_Init+0x2c8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d007      	beq.n	8000fc0 <HAL_GPIO_Init+0x1e4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80010a8 <HAL_GPIO_Init+0x2cc>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d101      	bne.n	8000fbc <HAL_GPIO_Init+0x1e0>
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	e004      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e002      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fcc:	f002 0203 	and.w	r2, r2, #3
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	4093      	lsls	r3, r2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fda:	492f      	ldr	r1, [pc, #188]	@ (8001098 <HAL_GPIO_Init+0x2bc>)
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	492c      	ldr	r1, [pc, #176]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	608b      	str	r3, [r1, #8]
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001002:	4b2a      	ldr	r3, [pc, #168]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	43db      	mvns	r3, r3
 800100a:	4928      	ldr	r1, [pc, #160]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 800100c:	4013      	ands	r3, r2
 800100e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800101c:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	4922      	ldr	r1, [pc, #136]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	491e      	ldr	r1, [pc, #120]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 8001034:	4013      	ands	r3, r2
 8001036:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4918      	ldr	r1, [pc, #96]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	4914      	ldr	r1, [pc, #80]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 800105c:	4013      	ands	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d021      	beq.n	80010b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	490e      	ldr	r1, [pc, #56]	@ (80010ac <HAL_GPIO_Init+0x2d0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
 8001078:	e021      	b.n	80010be <HAL_GPIO_Init+0x2e2>
 800107a:	bf00      	nop
 800107c:	10320000 	.word	0x10320000
 8001080:	10310000 	.word	0x10310000
 8001084:	10220000 	.word	0x10220000
 8001088:	10210000 	.word	0x10210000
 800108c:	10120000 	.word	0x10120000
 8001090:	10110000 	.word	0x10110000
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	40010800 	.word	0x40010800
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40011000 	.word	0x40011000
 80010a8:	40011400 	.word	0x40011400
 80010ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	4909      	ldr	r1, [pc, #36]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	fa22 f303 	lsr.w	r3, r2, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f47f ae8e 	bne.w	8000df0 <HAL_GPIO_Init+0x14>
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	372c      	adds	r7, #44	@ 0x2c
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
 80010f0:	4613      	mov	r3, r2
 80010f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f4:	787b      	ldrb	r3, [r7, #1]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001100:	e003      	b.n	800110a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	041a      	lsls	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	611a      	str	r2, [r3, #16]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e12b      	b.n	800137e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d106      	bne.n	8001140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fb46 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2224      	movs	r2, #36	@ 0x24
 8001144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001166:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001176:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001178:	f001 f960 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 800117c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a81      	ldr	r2, [pc, #516]	@ (8001388 <HAL_I2C_Init+0x274>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d807      	bhi.n	8001198 <HAL_I2C_Init+0x84>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4a80      	ldr	r2, [pc, #512]	@ (800138c <HAL_I2C_Init+0x278>)
 800118c:	4293      	cmp	r3, r2
 800118e:	bf94      	ite	ls
 8001190:	2301      	movls	r3, #1
 8001192:	2300      	movhi	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	e006      	b.n	80011a6 <HAL_I2C_Init+0x92>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4a7d      	ldr	r2, [pc, #500]	@ (8001390 <HAL_I2C_Init+0x27c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	bf94      	ite	ls
 80011a0:	2301      	movls	r3, #1
 80011a2:	2300      	movhi	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0e7      	b.n	800137e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4a78      	ldr	r2, [pc, #480]	@ (8001394 <HAL_I2C_Init+0x280>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9b      	lsrs	r3, r3, #18
 80011b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001388 <HAL_I2C_Init+0x274>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d802      	bhi.n	80011e8 <HAL_I2C_Init+0xd4>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3301      	adds	r3, #1
 80011e6:	e009      	b.n	80011fc <HAL_I2C_Init+0xe8>
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	4a69      	ldr	r2, [pc, #420]	@ (8001398 <HAL_I2C_Init+0x284>)
 80011f4:	fba2 2303 	umull	r2, r3, r2, r3
 80011f8:	099b      	lsrs	r3, r3, #6
 80011fa:	3301      	adds	r3, #1
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	430b      	orrs	r3, r1
 8001202:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800120e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	495c      	ldr	r1, [pc, #368]	@ (8001388 <HAL_I2C_Init+0x274>)
 8001218:	428b      	cmp	r3, r1
 800121a:	d819      	bhi.n	8001250 <HAL_I2C_Init+0x13c>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1e59      	subs	r1, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fbb1 f3f3 	udiv	r3, r1, r3
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001230:	400b      	ands	r3, r1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <HAL_I2C_Init+0x138>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1e59      	subs	r1, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fbb1 f3f3 	udiv	r3, r1, r3
 8001244:	3301      	adds	r3, #1
 8001246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124a:	e051      	b.n	80012f0 <HAL_I2C_Init+0x1dc>
 800124c:	2304      	movs	r3, #4
 800124e:	e04f      	b.n	80012f0 <HAL_I2C_Init+0x1dc>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d111      	bne.n	800127c <HAL_I2C_Init+0x168>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1e58      	subs	r0, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	440b      	add	r3, r1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	e012      	b.n	80012a2 <HAL_I2C_Init+0x18e>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1e58      	subs	r0, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	0099      	lsls	r1, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001292:	3301      	adds	r3, #1
 8001294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_Init+0x196>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e022      	b.n	80012f0 <HAL_I2C_Init+0x1dc>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10e      	bne.n	80012d0 <HAL_I2C_Init+0x1bc>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1e58      	subs	r0, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6859      	ldr	r1, [r3, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	440b      	add	r3, r1
 80012c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ce:	e00f      	b.n	80012f0 <HAL_I2C_Init+0x1dc>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1e58      	subs	r0, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	0099      	lsls	r1, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e6:	3301      	adds	r3, #1
 80012e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	6809      	ldr	r1, [r1, #0]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69da      	ldr	r2, [r3, #28]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800131e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6911      	ldr	r1, [r2, #16]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68d2      	ldr	r2, [r2, #12]
 800132a:	4311      	orrs	r1, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	430b      	orrs	r3, r1
 8001332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2220      	movs	r2, #32
 800136a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	000186a0 	.word	0x000186a0
 800138c:	001e847f 	.word	0x001e847f
 8001390:	003d08ff 	.word	0x003d08ff
 8001394:	431bde83 	.word	0x431bde83
 8001398:	10624dd3 	.word	0x10624dd3

0800139c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	461a      	mov	r2, r3
 80013a8:	460b      	mov	r3, r1
 80013aa:	817b      	strh	r3, [r7, #10]
 80013ac:	4613      	mov	r3, r2
 80013ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fbd8 	bl	8000b64 <HAL_GetTick>
 80013b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b20      	cmp	r3, #32
 80013c0:	f040 80e0 	bne.w	8001584 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2319      	movs	r3, #25
 80013ca:	2201      	movs	r2, #1
 80013cc:	4970      	ldr	r1, [pc, #448]	@ (8001590 <HAL_I2C_Master_Transmit+0x1f4>)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fa92 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013da:	2302      	movs	r3, #2
 80013dc:	e0d3      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_I2C_Master_Transmit+0x50>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e0cc      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d007      	beq.n	8001412 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001420:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2221      	movs	r2, #33	@ 0x21
 8001426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2210      	movs	r2, #16
 800142e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	893a      	ldrh	r2, [r7, #8]
 8001442:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a50      	ldr	r2, [pc, #320]	@ (8001594 <HAL_I2C_Master_Transmit+0x1f8>)
 8001452:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001454:	8979      	ldrh	r1, [r7, #10]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 f9ca 	bl	80017f4 <I2C_MasterRequestWrite>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e08d      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001480:	e066      	b.n	8001550 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	6a39      	ldr	r1, [r7, #32]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 fb50 	bl	8001b2c <I2C_WaitOnTXEFlagUntilTimeout>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00d      	beq.n	80014ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	2b04      	cmp	r3, #4
 8001498:	d107      	bne.n	80014aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06b      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d6:	3b01      	subs	r3, #1
 80014d8:	b29a      	uxth	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d11b      	bne.n	8001524 <HAL_I2C_Master_Transmit+0x188>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d017      	beq.n	8001524 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800150e:	b29b      	uxth	r3, r3
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 fb47 	bl	8001bbc <I2C_WaitOnBTFFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00d      	beq.n	8001550 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	2b04      	cmp	r3, #4
 800153a:	d107      	bne.n	800154c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800154a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e01a      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001554:	2b00      	cmp	r3, #0
 8001556:	d194      	bne.n	8001482 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2220      	movs	r2, #32
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	e000      	b.n	8001586 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001584:	2302      	movs	r3, #2
  }
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	00100002 	.word	0x00100002
 8001594:	ffff0000 	.word	0xffff0000

08001598 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	460b      	mov	r3, r1
 80015a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff fadc 	bl	8000b64 <HAL_GetTick>
 80015ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	f040 8111 	bne.w	80017e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2319      	movs	r3, #25
 80015c6:	2201      	movs	r2, #1
 80015c8:	4988      	ldr	r1, [pc, #544]	@ (80017ec <HAL_I2C_IsDeviceReady+0x254>)
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f994 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80015d6:	2302      	movs	r3, #2
 80015d8:	e104      	b.n	80017e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_I2C_IsDeviceReady+0x50>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e0fd      	b.n	80017e4 <HAL_I2C_IsDeviceReady+0x24c>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d007      	beq.n	800160e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800161c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2224      	movs	r2, #36	@ 0x24
 8001622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a70      	ldr	r2, [pc, #448]	@ (80017f0 <HAL_I2C_IsDeviceReady+0x258>)
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001640:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 f952 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00d      	beq.n	8001676 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001668:	d103      	bne.n	8001672 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001670:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0b6      	b.n	80017e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001684:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fa6d 	bl	8000b64 <HAL_GetTick>
 800168a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b02      	cmp	r3, #2
 8001698:	bf0c      	ite	eq
 800169a:	2301      	moveq	r3, #1
 800169c:	2300      	movne	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80016ba:	e025      	b.n	8001708 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016bc:	f7ff fa52 	bl	8000b64 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d302      	bcc.n	80016d2 <HAL_I2C_IsDeviceReady+0x13a>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	22a0      	movs	r2, #160	@ 0xa0
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2ba0      	cmp	r3, #160	@ 0xa0
 8001712:	d005      	beq.n	8001720 <HAL_I2C_IsDeviceReady+0x188>
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <HAL_I2C_IsDeviceReady+0x188>
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0cd      	beq.n	80016bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d129      	bne.n	800178a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001744:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2319      	movs	r3, #25
 8001762:	2201      	movs	r2, #1
 8001764:	4921      	ldr	r1, [pc, #132]	@ (80017ec <HAL_I2C_IsDeviceReady+0x254>)
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f8c6 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e036      	b.n	80017e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e02c      	b.n	80017e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001798:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2319      	movs	r3, #25
 80017aa:	2201      	movs	r2, #1
 80017ac:	490f      	ldr	r1, [pc, #60]	@ (80017ec <HAL_I2C_IsDeviceReady+0x254>)
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f8a2 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e012      	b.n	80017e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	3301      	adds	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f4ff af32 	bcc.w	8001632 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2220      	movs	r2, #32
 80017d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80017e2:	2302      	movs	r3, #2
  }
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	00100002 	.word	0x00100002
 80017f0:	ffff0000 	.word	0xffff0000

080017f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	460b      	mov	r3, r1
 8001802:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d006      	beq.n	800181e <I2C_MasterRequestWrite+0x2a>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d003      	beq.n	800181e <I2C_MasterRequestWrite+0x2a>
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800181c:	d108      	bne.n	8001830 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e00b      	b.n	8001848 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	2b12      	cmp	r3, #18
 8001836:	d107      	bne.n	8001848 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001846:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f84f 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00d      	beq.n	800187c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800186e:	d103      	bne.n	8001878 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e035      	b.n	80018e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001884:	d108      	bne.n	8001898 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001886:	897b      	ldrh	r3, [r7, #10]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	e01b      	b.n	80018d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001898:	897b      	ldrh	r3, [r7, #10]
 800189a:	11db      	asrs	r3, r3, #7
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0306 	and.w	r3, r3, #6
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f063 030f 	orn	r3, r3, #15
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <I2C_MasterRequestWrite+0xfc>)
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f898 	bl	80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e010      	b.n	80018e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4907      	ldr	r1, [pc, #28]	@ (80018f4 <I2C_MasterRequestWrite+0x100>)
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 f888 	bl	80019ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	00010008 	.word	0x00010008
 80018f4:	00010002 	.word	0x00010002

080018f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001908:	e048      	b.n	800199c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d044      	beq.n	800199c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001912:	f7ff f927 	bl	8000b64 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d302      	bcc.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d139      	bne.n	800199c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	0c1b      	lsrs	r3, r3, #16
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10d      	bne.n	800194e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	43da      	mvns	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	4013      	ands	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	e00c      	b.n	8001968 <I2C_WaitOnFlagUntilTimeout+0x70>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	43da      	mvns	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4013      	ands	r3, r2
 800195a:	b29b      	uxth	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	429a      	cmp	r2, r3
 800196c:	d116      	bne.n	800199c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	f043 0220 	orr.w	r2, r3, #32
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e023      	b.n	80019e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10d      	bne.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	43da      	mvns	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4013      	ands	r3, r2
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	e00c      	b.n	80019dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	43da      	mvns	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4013      	ands	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d093      	beq.n	800190a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019fa:	e071      	b.n	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a0a:	d123      	bne.n	8001a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f043 0204 	orr.w	r2, r3, #4
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e067      	b.n	8001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	d041      	beq.n	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5c:	f7ff f882 	bl	8000b64 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d302      	bcc.n	8001a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d136      	bne.n	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d10c      	bne.n	8001a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4013      	ands	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	e00b      	b.n	8001aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d016      	beq.n	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e021      	b.n	8001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10c      	bne.n	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4013      	ands	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e00b      	b.n	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f47f af6d 	bne.w	80019fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b38:	e034      	b.n	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f886 	bl	8001c4c <I2C_IsAcknowledgeFailed>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e034      	b.n	8001bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d028      	beq.n	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b52:	f7ff f807 	bl	8000b64 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d302      	bcc.n	8001b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d11d      	bne.n	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b72:	2b80      	cmp	r3, #128	@ 0x80
 8001b74:	d016      	beq.n	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e007      	b.n	8001bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bae:	2b80      	cmp	r3, #128	@ 0x80
 8001bb0:	d1c3      	bne.n	8001b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bc8:	e034      	b.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f83e 	bl	8001c4c <I2C_IsAcknowledgeFailed>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e034      	b.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d028      	beq.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be2:	f7fe ffbf 	bl	8000b64 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d302      	bcc.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11d      	bne.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d016      	beq.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d1c3      	bne.n	8001bca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c62:	d11b      	bne.n	8001c9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	f043 0204 	orr.w	r2, r3, #4
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e272      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8087 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc8:	4b92      	ldr	r3, [pc, #584]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00c      	beq.n	8001cee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d112      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5e>
 8001ce0:	4b8c      	ldr	r3, [pc, #560]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cec:	d10b      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cee:	4b89      	ldr	r3, [pc, #548]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d06c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x12c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d168      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e24c      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x76>
 8001d10:	4b80      	ldr	r3, [pc, #512]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a7f      	ldr	r2, [pc, #508]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e02e      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x98>
 8001d26:	4b7b      	ldr	r3, [pc, #492]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b78      	ldr	r3, [pc, #480]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a77      	ldr	r2, [pc, #476]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e01d      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0xbc>
 8001d4a:	4b72      	ldr	r3, [pc, #456]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a71      	ldr	r2, [pc, #452]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b6f      	ldr	r3, [pc, #444]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d64:	4b6b      	ldr	r3, [pc, #428]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6a      	ldr	r2, [pc, #424]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b68      	ldr	r3, [pc, #416]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a67      	ldr	r2, [pc, #412]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe feee 	bl	8000b64 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7fe feea 	bl	8000b64 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	@ 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e200      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0xe4>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe feda 	bl	8000b64 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe fed6 	bl	8000b64 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	@ 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1ec      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	4b53      	ldr	r3, [pc, #332]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x10c>
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d063      	beq.n	8001eaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dee:	4b49      	ldr	r3, [pc, #292]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d11c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x18c>
 8001dfa:	4b46      	ldr	r3, [pc, #280]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	4b43      	ldr	r3, [pc, #268]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x176>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e1c0      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4939      	ldr	r1, [pc, #228]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	e03a      	b.n	8001eaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fe8f 	bl	8000b64 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7fe fe8b 	bl	8000b64 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1a1      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4927      	ldr	r1, [pc, #156]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fe6e 	bl	8000b64 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fe6a 	bl	8000b64 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e180      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d03a      	beq.n	8001f2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fe4e 	bl	8000b64 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7fe fe4a 	bl	8000b64 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e160      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eea:	2001      	movs	r0, #1
 8001eec:	f000 faba 	bl	8002464 <RCC_Delay>
 8001ef0:	e01c      	b.n	8001f2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_RCC_OscConfig+0x274>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7fe fe34 	bl	8000b64 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efe:	e00f      	b.n	8001f20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f00:	f7fe fe30 	bl	8000b64 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d908      	bls.n	8001f20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e146      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	42420000 	.word	0x42420000
 8001f1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	4b92      	ldr	r3, [pc, #584]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e9      	bne.n	8001f00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a6 	beq.w	8002086 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10d      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4b88      	ldr	r3, [pc, #544]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a87      	ldr	r2, [pc, #540]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b85      	ldr	r3, [pc, #532]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b82      	ldr	r3, [pc, #520]	@ (8002170 <HAL_RCC_OscConfig+0x4c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b7f      	ldr	r3, [pc, #508]	@ (8002170 <HAL_RCC_OscConfig+0x4c8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7e      	ldr	r2, [pc, #504]	@ (8002170 <HAL_RCC_OscConfig+0x4c8>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fdf1 	bl	8000b64 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7fe fded 	bl	8000b64 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b64      	cmp	r3, #100	@ 0x64
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e103      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b75      	ldr	r3, [pc, #468]	@ (8002170 <HAL_RCC_OscConfig+0x4c8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x312>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a6e      	ldr	r2, [pc, #440]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	e02d      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x334>
 8001fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a69      	ldr	r2, [pc, #420]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b67      	ldr	r3, [pc, #412]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a66      	ldr	r2, [pc, #408]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	e01c      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x356>
 8001fe4:	4b61      	ldr	r3, [pc, #388]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a60      	ldr	r2, [pc, #384]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	4b5e      	ldr	r3, [pc, #376]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a5d      	ldr	r2, [pc, #372]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a5a      	ldr	r2, [pc, #360]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b58      	ldr	r3, [pc, #352]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a57      	ldr	r2, [pc, #348]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe fda1 	bl	8000b64 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fd9d 	bl	8000b64 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0b1      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ee      	beq.n	8002026 <HAL_RCC_OscConfig+0x37e>
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7fe fd8b 	bl	8000b64 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fd87 	bl	8000b64 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e09b      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b40      	ldr	r3, [pc, #256]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b3c      	ldr	r3, [pc, #240]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a3b      	ldr	r2, [pc, #236]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002084:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8087 	beq.w	800219e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d061      	beq.n	8002160 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d146      	bne.n	8002132 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b33      	ldr	r3, [pc, #204]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fd5b 	bl	8000b64 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fd57 	bl	8000b64 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e06d      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c4:	4b29      	ldr	r3, [pc, #164]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d8:	d108      	bne.n	80020ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4921      	ldr	r1, [pc, #132]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ec:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a19      	ldr	r1, [r3, #32]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	430b      	orrs	r3, r1
 80020fe:	491b      	ldr	r1, [pc, #108]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fd2b 	bl	8000b64 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002112:	f7fe fd27 	bl	8000b64 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e03d      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x46a>
 8002130:	e035      	b.n	800219e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fd14 	bl	8000b64 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fd10 	bl	8000b64 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e026      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x498>
 800215e:	e01e      	b.n	800219e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e019      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
 8002174:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002178:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <HAL_RCC_OscConfig+0x500>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	429a      	cmp	r2, r3
 800218a:	d106      	bne.n	800219a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000

080021ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0d0      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b6a      	ldr	r3, [pc, #424]	@ (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b67      	ldr	r3, [pc, #412]	@ (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4965      	ldr	r1, [pc, #404]	@ (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b63      	ldr	r3, [pc, #396]	@ (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b59      	ldr	r3, [pc, #356]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a58      	ldr	r2, [pc, #352]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002212:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002220:	4b53      	ldr	r3, [pc, #332]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a52      	ldr	r2, [pc, #328]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800222a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222c:	4b50      	ldr	r3, [pc, #320]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	494d      	ldr	r1, [pc, #308]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d040      	beq.n	80022cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d115      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e073      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b3d      	ldr	r3, [pc, #244]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06b      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4936      	ldr	r1, [pc, #216]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800229c:	f7fe fc62 	bl	8000b64 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7fe fc5e 	bl	8000b64 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e053      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d210      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 0207 	bic.w	r2, r3, #7
 80022e2:	4922      	ldr	r1, [pc, #136]	@ (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e032      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4916      	ldr	r1, [pc, #88]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490e      	ldr	r1, [pc, #56]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f821 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800233e:	4602      	mov	r2, r0
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	490a      	ldr	r1, [pc, #40]	@ (8002374 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	5ccb      	ldrb	r3, [r1, r3]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <HAL_RCC_ClockConfig+0x1cc>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1d0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fbc0 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40022000 	.word	0x40022000
 8002370:	40021000 	.word	0x40021000
 8002374:	08003e38 	.word	0x08003e38
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800239a:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x94>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x30>
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ae:	e027      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x98>)
 80023b2:	613b      	str	r3, [r7, #16]
      break;
 80023b4:	e027      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	4a17      	ldr	r2, [pc, #92]	@ (800241c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023c0:	5cd3      	ldrb	r3, [r2, r3]
 80023c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d010      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x94>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0c5b      	lsrs	r3, r3, #17
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	4a11      	ldr	r2, [pc, #68]	@ (8002420 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023da:	5cd3      	ldrb	r3, [r2, r3]
 80023dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x98>)
 80023e2:	fb03 f202 	mul.w	r2, r3, r2
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e004      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	613b      	str	r3, [r7, #16]
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x98>)
 8002402:	613b      	str	r3, [r7, #16]
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	693b      	ldr	r3, [r7, #16]
}
 8002408:	4618      	mov	r0, r3
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	007a1200 	.word	0x007a1200
 800241c:	08003e50 	.word	0x08003e50
 8002420:	08003e60 	.word	0x08003e60
 8002424:	003d0900 	.word	0x003d0900

08002428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b02      	ldr	r3, [pc, #8]	@ (8002438 <HAL_RCC_GetHCLKFreq+0x10>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002440:	f7ff fff2 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	@ (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08003e48 	.word	0x08003e48

08002464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800246c:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <RCC_Delay+0x34>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <RCC_Delay+0x38>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002480:	bf00      	nop
  }
  while (Delay --);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	60fa      	str	r2, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f9      	bne.n	8002480 <RCC_Delay+0x1c>
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000000 	.word	0x20000000
 800249c:	10624dd3 	.word	0x10624dd3

080024a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e041      	b.n	8002536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe f9be 	bl	8000848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3304      	adds	r3, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f000 fd62 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e041      	b.n	80025d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f839 	bl	80025dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f000 fd13 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_TIM_PWM_Start+0x24>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e022      	b.n	800265a <HAL_TIM_PWM_Start+0x6a>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b04      	cmp	r3, #4
 8002618:	d109      	bne.n	800262e <HAL_TIM_PWM_Start+0x3e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	e015      	b.n	800265a <HAL_TIM_PWM_Start+0x6a>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d109      	bne.n	8002648 <HAL_TIM_PWM_Start+0x58>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	e008      	b.n	800265a <HAL_TIM_PWM_Start+0x6a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b01      	cmp	r3, #1
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e05e      	b.n	8002720 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d104      	bne.n	8002672 <HAL_TIM_PWM_Start+0x82>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002670:	e013      	b.n	800269a <HAL_TIM_PWM_Start+0xaa>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d104      	bne.n	8002682 <HAL_TIM_PWM_Start+0x92>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002680:	e00b      	b.n	800269a <HAL_TIM_PWM_Start+0xaa>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d104      	bne.n	8002692 <HAL_TIM_PWM_Start+0xa2>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002690:	e003      	b.n	800269a <HAL_TIM_PWM_Start+0xaa>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2201      	movs	r2, #1
 80026a0:	6839      	ldr	r1, [r7, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 ff0c 	bl	80034c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002728 <HAL_TIM_PWM_Start+0x138>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d107      	bne.n	80026c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a18      	ldr	r2, [pc, #96]	@ (8002728 <HAL_TIM_PWM_Start+0x138>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00e      	beq.n	80026ea <HAL_TIM_PWM_Start+0xfa>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d4:	d009      	beq.n	80026ea <HAL_TIM_PWM_Start+0xfa>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a14      	ldr	r2, [pc, #80]	@ (800272c <HAL_TIM_PWM_Start+0x13c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_TIM_PWM_Start+0xfa>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <HAL_TIM_PWM_Start+0x140>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d111      	bne.n	800270e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d010      	beq.n	800271e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270c:	e007      	b.n	800271e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40012c00 	.word	0x40012c00
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800

08002734 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2200      	movs	r2, #0
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 feba 	bl	80034c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a29      	ldr	r2, [pc, #164]	@ (80027f8 <HAL_TIM_PWM_Stop+0xc4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d117      	bne.n	8002786 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_TIM_PWM_Stop+0x52>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d107      	bne.n	8002786 <HAL_TIM_PWM_Stop+0x52>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_TIM_PWM_Stop+0x82>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	f240 4344 	movw	r3, #1092	@ 0x444
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_TIM_PWM_Stop+0x82>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_PWM_Stop+0x92>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c4:	e013      	b.n	80027ee <HAL_TIM_PWM_Stop+0xba>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_PWM_Stop+0xa2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d4:	e00b      	b.n	80027ee <HAL_TIM_PWM_Stop+0xba>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_PWM_Stop+0xb2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e4:	e003      	b.n	80027ee <HAL_TIM_PWM_Stop+0xba>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40012c00 	.word	0x40012c00

080027fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e093      	b.n	8002938 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fe f82d 	bl	8000884 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2202      	movs	r2, #2
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002840:	f023 0307 	bic.w	r3, r3, #7
 8002844:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f000 fba9 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287e:	f023 0303 	bic.w	r3, r3, #3
 8002882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4313      	orrs	r3, r2
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800289c:	f023 030c 	bic.w	r3, r3, #12
 80028a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	4313      	orrs	r3, r2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	011a      	lsls	r2, r3, #4
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	031b      	lsls	r3, r3, #12
 80028cc:	4313      	orrs	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80028da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	4313      	orrs	r3, r2
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002950:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002958:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002960:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002968:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d110      	bne.n	8002992 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d102      	bne.n	800297c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002976:	7b7b      	ldrb	r3, [r7, #13]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d001      	beq.n	8002980 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e069      	b.n	8002a54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002990:	e031      	b.n	80029f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d110      	bne.n	80029ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002998:	7bbb      	ldrb	r3, [r7, #14]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800299e:	7b3b      	ldrb	r3, [r7, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e055      	b.n	8002a54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029b8:	e01d      	b.n	80029f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d108      	bne.n	80029d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80029c0:	7bbb      	ldrb	r3, [r7, #14]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029c6:	7b7b      	ldrb	r3, [r7, #13]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80029cc:	7b3b      	ldrb	r3, [r7, #12]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d001      	beq.n	80029d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e03e      	b.n	8002a54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_TIM_Encoder_Start+0xc4>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d008      	beq.n	8002a14 <HAL_TIM_Encoder_Start+0xd4>
 8002a02:	e00f      	b.n	8002a24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fd57 	bl	80034c0 <TIM_CCxChannelCmd>
      break;
 8002a12:	e016      	b.n	8002a42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fd4f 	bl	80034c0 <TIM_CCxChannelCmd>
      break;
 8002a22:	e00e      	b.n	8002a42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fd47 	bl	80034c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2201      	movs	r2, #1
 8002a38:	2104      	movs	r1, #4
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fd40 	bl	80034c0 <TIM_CCxChannelCmd>
      break;
 8002a40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0202 	mvn.w	r2, #2
 8002a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fa63 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa56 	bl	8002f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fa65 	bl	8002f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0204 	mvn.w	r2, #4
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa3d 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa30 	bl	8002f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fa3f 	bl	8002f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d020      	beq.n	8002b58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0208 	mvn.w	r2, #8
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fa17 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa0a 	bl	8002f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa19 	bl	8002f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d020      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01b      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0210 	mvn.w	r2, #16
 8002b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9f1 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f9e4 	bl	8002f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f9f3 	bl	8002f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0201 	mvn.w	r2, #1
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9c3 	bl	8002f4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fd46 	bl	8003678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9c3 	bl	8002f96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00c      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0220 	mvn.w	r2, #32
 8002c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fd19 	bl	8003666 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0ae      	b.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	f200 809f 	bhi.w	8002da8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c70:	08002ca5 	.word	0x08002ca5
 8002c74:	08002da9 	.word	0x08002da9
 8002c78:	08002da9 	.word	0x08002da9
 8002c7c:	08002da9 	.word	0x08002da9
 8002c80:	08002ce5 	.word	0x08002ce5
 8002c84:	08002da9 	.word	0x08002da9
 8002c88:	08002da9 	.word	0x08002da9
 8002c8c:	08002da9 	.word	0x08002da9
 8002c90:	08002d27 	.word	0x08002d27
 8002c94:	08002da9 	.word	0x08002da9
 8002c98:	08002da9 	.word	0x08002da9
 8002c9c:	08002da9 	.word	0x08002da9
 8002ca0:	08002d67 	.word	0x08002d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f9ea 	bl	8003084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0208 	orr.w	r2, r2, #8
 8002cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6999      	ldr	r1, [r3, #24]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	619a      	str	r2, [r3, #24]
      break;
 8002ce2:	e064      	b.n	8002dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fa30 	bl	8003150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6999      	ldr	r1, [r3, #24]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	021a      	lsls	r2, r3, #8
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	619a      	str	r2, [r3, #24]
      break;
 8002d24:	e043      	b.n	8002dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fa79 	bl	8003224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0208 	orr.w	r2, r2, #8
 8002d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0204 	bic.w	r2, r2, #4
 8002d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69d9      	ldr	r1, [r3, #28]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	61da      	str	r2, [r3, #28]
      break;
 8002d64:	e023      	b.n	8002dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fac3 	bl	80032f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69d9      	ldr	r1, [r3, #28]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	021a      	lsls	r2, r3, #8
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	61da      	str	r2, [r3, #28]
      break;
 8002da6:	e002      	b.n	8002dae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
      break;
 8002dac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIM_ConfigClockSource+0x1c>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0b4      	b.n	8002f46 <HAL_TIM_ConfigClockSource+0x186>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e14:	d03e      	beq.n	8002e94 <HAL_TIM_ConfigClockSource+0xd4>
 8002e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e1a:	f200 8087 	bhi.w	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e22:	f000 8086 	beq.w	8002f32 <HAL_TIM_ConfigClockSource+0x172>
 8002e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e2a:	d87f      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b70      	cmp	r3, #112	@ 0x70
 8002e2e:	d01a      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0xa6>
 8002e30:	2b70      	cmp	r3, #112	@ 0x70
 8002e32:	d87b      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b60      	cmp	r3, #96	@ 0x60
 8002e36:	d050      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0x11a>
 8002e38:	2b60      	cmp	r3, #96	@ 0x60
 8002e3a:	d877      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b50      	cmp	r3, #80	@ 0x50
 8002e3e:	d03c      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0xfa>
 8002e40:	2b50      	cmp	r3, #80	@ 0x50
 8002e42:	d873      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b40      	cmp	r3, #64	@ 0x40
 8002e46:	d058      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0x13a>
 8002e48:	2b40      	cmp	r3, #64	@ 0x40
 8002e4a:	d86f      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b30      	cmp	r3, #48	@ 0x30
 8002e4e:	d064      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x15a>
 8002e50:	2b30      	cmp	r3, #48	@ 0x30
 8002e52:	d86b      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d060      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x15a>
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d867      	bhi.n	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d05c      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x15a>
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d05a      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x15a>
 8002e64:	e062      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e76:	f000 fb04 	bl	8003482 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	609a      	str	r2, [r3, #8]
      break;
 8002e92:	e04f      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea4:	f000 faed 	bl	8003482 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eb6:	609a      	str	r2, [r3, #8]
      break;
 8002eb8:	e03c      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f000 fa64 	bl	8003394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2150      	movs	r1, #80	@ 0x50
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fabb 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8002ed8:	e02c      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f000 fa82 	bl	80033f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2160      	movs	r1, #96	@ 0x60
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 faab 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8002ef8:	e01c      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	461a      	mov	r2, r3
 8002f08:	f000 fa44 	bl	8003394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2140      	movs	r1, #64	@ 0x40
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa9b 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8002f18:	e00c      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f000 fa92 	bl	800344e <TIM_ITRx_SetConfig>
      break;
 8002f2a:	e003      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	e000      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a2f      	ldr	r2, [pc, #188]	@ (8003078 <TIM_Base_SetConfig+0xd0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00b      	beq.n	8002fd8 <TIM_Base_SetConfig+0x30>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc6:	d007      	beq.n	8002fd8 <TIM_Base_SetConfig+0x30>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a2c      	ldr	r2, [pc, #176]	@ (800307c <TIM_Base_SetConfig+0xd4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_Base_SetConfig+0x30>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8003080 <TIM_Base_SetConfig+0xd8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d108      	bne.n	8002fea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a22      	ldr	r2, [pc, #136]	@ (8003078 <TIM_Base_SetConfig+0xd0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00b      	beq.n	800300a <TIM_Base_SetConfig+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff8:	d007      	beq.n	800300a <TIM_Base_SetConfig+0x62>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <TIM_Base_SetConfig+0xd4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_Base_SetConfig+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a1e      	ldr	r2, [pc, #120]	@ (8003080 <TIM_Base_SetConfig+0xd8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d108      	bne.n	800301c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a0d      	ldr	r2, [pc, #52]	@ (8003078 <TIM_Base_SetConfig+0xd0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d103      	bne.n	8003050 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	611a      	str	r2, [r3, #16]
  }
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40000400 	.word	0x40000400
 8003080:	40000800 	.word	0x40000800

08003084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f023 0201 	bic.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f023 0302 	bic.w	r3, r3, #2
 80030cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <TIM_OC1_SetConfig+0xc8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10c      	bne.n	80030fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0308 	bic.w	r3, r3, #8
 80030e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a13      	ldr	r2, [pc, #76]	@ (800314c <TIM_OC1_SetConfig+0xc8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d111      	bne.n	8003126 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40012c00 	.word	0x40012c00

08003150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f023 0210 	bic.w	r2, r3, #16
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0320 	bic.w	r3, r3, #32
 800319a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <TIM_OC2_SetConfig+0xd0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10d      	bne.n	80031cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a14      	ldr	r2, [pc, #80]	@ (8003220 <TIM_OC2_SetConfig+0xd0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d113      	bne.n	80031fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00

08003224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800326c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1d      	ldr	r2, [pc, #116]	@ (80032f4 <TIM_OC3_SetConfig+0xd0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10d      	bne.n	800329e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800329c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a14      	ldr	r2, [pc, #80]	@ (80032f4 <TIM_OC3_SetConfig+0xd0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d113      	bne.n	80032ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	621a      	str	r2, [r3, #32]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40012c00 	.word	0x40012c00

080032f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800332e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	031b      	lsls	r3, r3, #12
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <TIM_OC4_SetConfig+0x98>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d109      	bne.n	800336c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800335e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00

08003394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f023 0201 	bic.w	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 030a 	bic.w	r3, r3, #10
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800341a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	031b      	lsls	r3, r3, #12
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800342c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	621a      	str	r2, [r3, #32]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	f043 0307 	orr.w	r3, r3, #7
 8003470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003482:	b480      	push	{r7}
 8003484:	b087      	sub	sp, #28
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800349c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	2201      	movs	r2, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	401a      	ands	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a1a      	ldr	r2, [r3, #32]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800351c:	2302      	movs	r3, #2
 800351e:	e046      	b.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a16      	ldr	r2, [pc, #88]	@ (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356c:	d009      	beq.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a10      	ldr	r2, [pc, #64]	@ (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10c      	bne.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	4313      	orrs	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800

080035c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035dc:	2302      	movs	r3, #2
 80035de:	e03d      	b.n	800365c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	4603      	mov	r3, r0
 8003692:	460a      	mov	r2, r1
 8003694:	71fb      	strb	r3, [r7, #7]
 8003696:	4613      	mov	r3, r2
 8003698:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 800369a:	2226      	movs	r2, #38	@ 0x26
 800369c:	2100      	movs	r1, #0
 800369e:	2078      	movs	r0, #120	@ 0x78
 80036a0:	f000 fb0c 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80036a4:	2200      	movs	r2, #0
 80036a6:	2100      	movs	r1, #0
 80036a8:	2078      	movs	r0, #120	@ 0x78
 80036aa:	f000 fb07 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	461a      	mov	r2, r3
 80036b2:	2100      	movs	r1, #0
 80036b4:	2078      	movs	r0, #120	@ 0x78
 80036b6:	f000 fb01 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80036ba:	2200      	movs	r2, #0
 80036bc:	2100      	movs	r1, #0
 80036be:	2078      	movs	r0, #120	@ 0x78
 80036c0:	f000 fafc 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80036c4:	79bb      	ldrb	r3, [r7, #6]
 80036c6:	461a      	mov	r2, r3
 80036c8:	2100      	movs	r1, #0
 80036ca:	2078      	movs	r0, #120	@ 0x78
 80036cc:	f000 faf6 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2100      	movs	r1, #0
 80036d4:	2078      	movs	r0, #120	@ 0x78
 80036d6:	f000 faf1 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80036da:	22ff      	movs	r2, #255	@ 0xff
 80036dc:	2100      	movs	r1, #0
 80036de:	2078      	movs	r0, #120	@ 0x78
 80036e0:	f000 faec 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80036e4:	222f      	movs	r2, #47	@ 0x2f
 80036e6:	2100      	movs	r1, #0
 80036e8:	2078      	movs	r0, #120	@ 0x78
 80036ea:	f000 fae7 	bl	8003cbc <ssd1306_I2C_Write>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	460a      	mov	r2, r1
 8003700:	71fb      	strb	r3, [r7, #7]
 8003702:	4613      	mov	r3, r2
 8003704:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8003706:	2227      	movs	r2, #39	@ 0x27
 8003708:	2100      	movs	r1, #0
 800370a:	2078      	movs	r0, #120	@ 0x78
 800370c:	f000 fad6 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8003710:	2200      	movs	r2, #0
 8003712:	2100      	movs	r1, #0
 8003714:	2078      	movs	r0, #120	@ 0x78
 8003716:	f000 fad1 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	461a      	mov	r2, r3
 800371e:	2100      	movs	r1, #0
 8003720:	2078      	movs	r0, #120	@ 0x78
 8003722:	f000 facb 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8003726:	2200      	movs	r2, #0
 8003728:	2100      	movs	r1, #0
 800372a:	2078      	movs	r0, #120	@ 0x78
 800372c:	f000 fac6 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8003730:	79bb      	ldrb	r3, [r7, #6]
 8003732:	461a      	mov	r2, r3
 8003734:	2100      	movs	r1, #0
 8003736:	2078      	movs	r0, #120	@ 0x78
 8003738:	f000 fac0 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	2078      	movs	r0, #120	@ 0x78
 8003742:	f000 fabb 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8003746:	22ff      	movs	r2, #255	@ 0xff
 8003748:	2100      	movs	r1, #0
 800374a:	2078      	movs	r0, #120	@ 0x78
 800374c:	f000 fab6 	bl	8003cbc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8003750:	222f      	movs	r2, #47	@ 0x2f
 8003752:	2100      	movs	r1, #0
 8003754:	2078      	movs	r0, #120	@ 0x78
 8003756:	f000 fab1 	bl	8003cbc <ssd1306_I2C_Write>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003766:	222e      	movs	r2, #46	@ 0x2e
 8003768:	2100      	movs	r1, #0
 800376a:	2078      	movs	r0, #120	@ 0x78
 800376c:	f000 faa6 	bl	8003cbc <ssd1306_I2C_Write>
}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}

08003774 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800377a:	f000 fa25 	bl	8003bc8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800377e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003782:	2201      	movs	r2, #1
 8003784:	2178      	movs	r1, #120	@ 0x78
 8003786:	485b      	ldr	r0, [pc, #364]	@ (80038f4 <SSD1306_Init+0x180>)
 8003788:	f7fd ff06 	bl	8001598 <HAL_I2C_IsDeviceReady>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003792:	2300      	movs	r3, #0
 8003794:	e0a9      	b.n	80038ea <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003796:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800379a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800379c:	e002      	b.n	80037a4 <SSD1306_Init+0x30>
		p--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f9      	bne.n	800379e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80037aa:	22ae      	movs	r2, #174	@ 0xae
 80037ac:	2100      	movs	r1, #0
 80037ae:	2078      	movs	r0, #120	@ 0x78
 80037b0:	f000 fa84 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80037b4:	2220      	movs	r2, #32
 80037b6:	2100      	movs	r1, #0
 80037b8:	2078      	movs	r0, #120	@ 0x78
 80037ba:	f000 fa7f 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80037be:	2210      	movs	r2, #16
 80037c0:	2100      	movs	r1, #0
 80037c2:	2078      	movs	r0, #120	@ 0x78
 80037c4:	f000 fa7a 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80037c8:	22b0      	movs	r2, #176	@ 0xb0
 80037ca:	2100      	movs	r1, #0
 80037cc:	2078      	movs	r0, #120	@ 0x78
 80037ce:	f000 fa75 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80037d2:	22c8      	movs	r2, #200	@ 0xc8
 80037d4:	2100      	movs	r1, #0
 80037d6:	2078      	movs	r0, #120	@ 0x78
 80037d8:	f000 fa70 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80037dc:	2200      	movs	r2, #0
 80037de:	2100      	movs	r1, #0
 80037e0:	2078      	movs	r0, #120	@ 0x78
 80037e2:	f000 fa6b 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80037e6:	2210      	movs	r2, #16
 80037e8:	2100      	movs	r1, #0
 80037ea:	2078      	movs	r0, #120	@ 0x78
 80037ec:	f000 fa66 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80037f0:	2240      	movs	r2, #64	@ 0x40
 80037f2:	2100      	movs	r1, #0
 80037f4:	2078      	movs	r0, #120	@ 0x78
 80037f6:	f000 fa61 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80037fa:	2281      	movs	r2, #129	@ 0x81
 80037fc:	2100      	movs	r1, #0
 80037fe:	2078      	movs	r0, #120	@ 0x78
 8003800:	f000 fa5c 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003804:	22ff      	movs	r2, #255	@ 0xff
 8003806:	2100      	movs	r1, #0
 8003808:	2078      	movs	r0, #120	@ 0x78
 800380a:	f000 fa57 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800380e:	22a1      	movs	r2, #161	@ 0xa1
 8003810:	2100      	movs	r1, #0
 8003812:	2078      	movs	r0, #120	@ 0x78
 8003814:	f000 fa52 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003818:	22a6      	movs	r2, #166	@ 0xa6
 800381a:	2100      	movs	r1, #0
 800381c:	2078      	movs	r0, #120	@ 0x78
 800381e:	f000 fa4d 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003822:	22a8      	movs	r2, #168	@ 0xa8
 8003824:	2100      	movs	r1, #0
 8003826:	2078      	movs	r0, #120	@ 0x78
 8003828:	f000 fa48 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800382c:	223f      	movs	r2, #63	@ 0x3f
 800382e:	2100      	movs	r1, #0
 8003830:	2078      	movs	r0, #120	@ 0x78
 8003832:	f000 fa43 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003836:	22a4      	movs	r2, #164	@ 0xa4
 8003838:	2100      	movs	r1, #0
 800383a:	2078      	movs	r0, #120	@ 0x78
 800383c:	f000 fa3e 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003840:	22d3      	movs	r2, #211	@ 0xd3
 8003842:	2100      	movs	r1, #0
 8003844:	2078      	movs	r0, #120	@ 0x78
 8003846:	f000 fa39 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800384a:	2200      	movs	r2, #0
 800384c:	2100      	movs	r1, #0
 800384e:	2078      	movs	r0, #120	@ 0x78
 8003850:	f000 fa34 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003854:	22d5      	movs	r2, #213	@ 0xd5
 8003856:	2100      	movs	r1, #0
 8003858:	2078      	movs	r0, #120	@ 0x78
 800385a:	f000 fa2f 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800385e:	22f0      	movs	r2, #240	@ 0xf0
 8003860:	2100      	movs	r1, #0
 8003862:	2078      	movs	r0, #120	@ 0x78
 8003864:	f000 fa2a 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003868:	22d9      	movs	r2, #217	@ 0xd9
 800386a:	2100      	movs	r1, #0
 800386c:	2078      	movs	r0, #120	@ 0x78
 800386e:	f000 fa25 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003872:	2222      	movs	r2, #34	@ 0x22
 8003874:	2100      	movs	r1, #0
 8003876:	2078      	movs	r0, #120	@ 0x78
 8003878:	f000 fa20 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800387c:	22da      	movs	r2, #218	@ 0xda
 800387e:	2100      	movs	r1, #0
 8003880:	2078      	movs	r0, #120	@ 0x78
 8003882:	f000 fa1b 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003886:	2212      	movs	r2, #18
 8003888:	2100      	movs	r1, #0
 800388a:	2078      	movs	r0, #120	@ 0x78
 800388c:	f000 fa16 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003890:	22db      	movs	r2, #219	@ 0xdb
 8003892:	2100      	movs	r1, #0
 8003894:	2078      	movs	r0, #120	@ 0x78
 8003896:	f000 fa11 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800389a:	2220      	movs	r2, #32
 800389c:	2100      	movs	r1, #0
 800389e:	2078      	movs	r0, #120	@ 0x78
 80038a0:	f000 fa0c 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80038a4:	228d      	movs	r2, #141	@ 0x8d
 80038a6:	2100      	movs	r1, #0
 80038a8:	2078      	movs	r0, #120	@ 0x78
 80038aa:	f000 fa07 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80038ae:	2214      	movs	r2, #20
 80038b0:	2100      	movs	r1, #0
 80038b2:	2078      	movs	r0, #120	@ 0x78
 80038b4:	f000 fa02 	bl	8003cbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80038b8:	22af      	movs	r2, #175	@ 0xaf
 80038ba:	2100      	movs	r1, #0
 80038bc:	2078      	movs	r0, #120	@ 0x78
 80038be:	f000 f9fd 	bl	8003cbc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80038c2:	222e      	movs	r2, #46	@ 0x2e
 80038c4:	2100      	movs	r1, #0
 80038c6:	2078      	movs	r0, #120	@ 0x78
 80038c8:	f000 f9f8 	bl	8003cbc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f000 f843 	bl	8003958 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80038d2:	f000 f813 	bl	80038fc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80038d6:	4b08      	ldr	r3, [pc, #32]	@ (80038f8 <SSD1306_Init+0x184>)
 80038d8:	2200      	movs	r2, #0
 80038da:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80038dc:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <SSD1306_Init+0x184>)
 80038de:	2200      	movs	r2, #0
 80038e0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80038e2:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <SSD1306_Init+0x184>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80038e8:	2301      	movs	r3, #1
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000030 	.word	0x20000030
 80038f8:	20000560 	.word	0x20000560

080038fc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003902:	2300      	movs	r3, #0
 8003904:	71fb      	strb	r3, [r7, #7]
 8003906:	e01d      	b.n	8003944 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	3b50      	subs	r3, #80	@ 0x50
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	2100      	movs	r1, #0
 8003912:	2078      	movs	r0, #120	@ 0x78
 8003914:	f000 f9d2 	bl	8003cbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003918:	2200      	movs	r2, #0
 800391a:	2100      	movs	r1, #0
 800391c:	2078      	movs	r0, #120	@ 0x78
 800391e:	f000 f9cd 	bl	8003cbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003922:	2210      	movs	r2, #16
 8003924:	2100      	movs	r1, #0
 8003926:	2078      	movs	r0, #120	@ 0x78
 8003928:	f000 f9c8 	bl	8003cbc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	01db      	lsls	r3, r3, #7
 8003930:	4a08      	ldr	r2, [pc, #32]	@ (8003954 <SSD1306_UpdateScreen+0x58>)
 8003932:	441a      	add	r2, r3
 8003934:	2380      	movs	r3, #128	@ 0x80
 8003936:	2140      	movs	r1, #64	@ 0x40
 8003938:	2078      	movs	r0, #120	@ 0x78
 800393a:	f000 f959 	bl	8003bf0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	3301      	adds	r3, #1
 8003942:	71fb      	strb	r3, [r7, #7]
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	2b07      	cmp	r3, #7
 8003948:	d9de      	bls.n	8003908 <SSD1306_UpdateScreen+0xc>
	}
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000160 	.word	0x20000160

08003958 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <SSD1306_Fill+0x14>
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <SSD1306_Fill+0x16>
 800396c:	23ff      	movs	r3, #255	@ 0xff
 800396e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003972:	4619      	mov	r1, r3
 8003974:	4803      	ldr	r0, [pc, #12]	@ (8003984 <SSD1306_Fill+0x2c>)
 8003976:	f000 fa1b 	bl	8003db0 <memset>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000160 	.word	0x20000160

08003988 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	80fb      	strh	r3, [r7, #6]
 8003992:	460b      	mov	r3, r1
 8003994:	80bb      	strh	r3, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	70fb      	strb	r3, [r7, #3]
	if (
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	2b7f      	cmp	r3, #127	@ 0x7f
 800399e:	d848      	bhi.n	8003a32 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80039a0:	88bb      	ldrh	r3, [r7, #4]
 80039a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80039a4:	d845      	bhi.n	8003a32 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80039a6:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <SSD1306_DrawPixel+0xb4>)
 80039a8:	791b      	ldrb	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d11a      	bne.n	80039f8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	88bb      	ldrh	r3, [r7, #4]
 80039c6:	08db      	lsrs	r3, r3, #3
 80039c8:	b298      	uxth	r0, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	01db      	lsls	r3, r3, #7
 80039ce:	4413      	add	r3, r2
 80039d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a40 <SSD1306_DrawPixel+0xb8>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	b25a      	sxtb	r2, r3
 80039d6:	88bb      	ldrh	r3, [r7, #4]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b259      	sxtb	r1, r3
 80039e8:	88fa      	ldrh	r2, [r7, #6]
 80039ea:	4603      	mov	r3, r0
 80039ec:	01db      	lsls	r3, r3, #7
 80039ee:	4413      	add	r3, r2
 80039f0:	b2c9      	uxtb	r1, r1
 80039f2:	4a13      	ldr	r2, [pc, #76]	@ (8003a40 <SSD1306_DrawPixel+0xb8>)
 80039f4:	54d1      	strb	r1, [r2, r3]
 80039f6:	e01d      	b.n	8003a34 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	88bb      	ldrh	r3, [r7, #4]
 80039fc:	08db      	lsrs	r3, r3, #3
 80039fe:	b298      	uxth	r0, r3
 8003a00:	4603      	mov	r3, r0
 8003a02:	01db      	lsls	r3, r3, #7
 8003a04:	4413      	add	r3, r2
 8003a06:	4a0e      	ldr	r2, [pc, #56]	@ (8003a40 <SSD1306_DrawPixel+0xb8>)
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	b25a      	sxtb	r2, r3
 8003a0c:	88bb      	ldrh	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	2101      	movs	r1, #1
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	b25b      	sxtb	r3, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	b25b      	sxtb	r3, r3
 8003a1e:	4013      	ands	r3, r2
 8003a20:	b259      	sxtb	r1, r3
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	4603      	mov	r3, r0
 8003a26:	01db      	lsls	r3, r3, #7
 8003a28:	4413      	add	r3, r2
 8003a2a:	b2c9      	uxtb	r1, r1
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <SSD1306_DrawPixel+0xb8>)
 8003a2e:	54d1      	strb	r1, [r2, r3]
 8003a30:	e000      	b.n	8003a34 <SSD1306_DrawPixel+0xac>
		return;
 8003a32:	bf00      	nop
	}
}
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	20000560 	.word	0x20000560
 8003a40:	20000160 	.word	0x20000160

08003a44 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	80fb      	strh	r3, [r7, #6]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003a54:	4a05      	ldr	r2, [pc, #20]	@ (8003a6c <SSD1306_GotoXY+0x28>)
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003a5a:	4a04      	ldr	r2, [pc, #16]	@ (8003a6c <SSD1306_GotoXY+0x28>)
 8003a5c:	88bb      	ldrh	r3, [r7, #4]
 8003a5e:	8053      	strh	r3, [r2, #2]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000560 	.word	0x20000560

08003a70 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003a80:	4b39      	ldr	r3, [pc, #228]	@ (8003b68 <SSD1306_Putc+0xf8>)
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	4413      	add	r3, r2
	if (
 8003a8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a8e:	dc07      	bgt.n	8003aa0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003a90:	4b35      	ldr	r3, [pc, #212]	@ (8003b68 <SSD1306_Putc+0xf8>)
 8003a92:	885b      	ldrh	r3, [r3, #2]
 8003a94:	461a      	mov	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003a9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a9e:	dd01      	ble.n	8003aa4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e05d      	b.n	8003b60 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e04b      	b.n	8003b42 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	3b20      	subs	r3, #32
 8003ab2:	6839      	ldr	r1, [r7, #0]
 8003ab4:	7849      	ldrb	r1, [r1, #1]
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4619      	mov	r1, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	440b      	add	r3, r1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e030      	b.n	8003b30 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d010      	beq.n	8003b00 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003ade:	4b22      	ldr	r3, [pc, #136]	@ (8003b68 <SSD1306_Putc+0xf8>)
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	b298      	uxth	r0, r3
 8003aea:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <SSD1306_Putc+0xf8>)
 8003aec:	885a      	ldrh	r2, [r3, #2]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	79ba      	ldrb	r2, [r7, #6]
 8003af8:	4619      	mov	r1, r3
 8003afa:	f7ff ff45 	bl	8003988 <SSD1306_DrawPixel>
 8003afe:	e014      	b.n	8003b2a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003b00:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <SSD1306_Putc+0xf8>)
 8003b02:	881a      	ldrh	r2, [r3, #0]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	b298      	uxth	r0, r3
 8003b0c:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <SSD1306_Putc+0xf8>)
 8003b0e:	885a      	ldrh	r2, [r3, #2]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	b299      	uxth	r1, r3
 8003b18:	79bb      	ldrb	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	f7ff ff2f 	bl	8003988 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d3c8      	bcc.n	8003ace <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	461a      	mov	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d3ad      	bcc.n	8003aaa <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003b4e:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <SSD1306_Putc+0xf8>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	4b03      	ldr	r3, [pc, #12]	@ (8003b68 <SSD1306_Putc+0xf8>)
 8003b5c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000560 	.word	0x20000560

08003b6c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003b7a:	e012      	b.n	8003ba2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	79fa      	ldrb	r2, [r7, #7]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff73 	bl	8003a70 <SSD1306_Putc>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d002      	beq.n	8003b9c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	e008      	b.n	8003bae <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e8      	bne.n	8003b7c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	781b      	ldrb	r3, [r3, #0]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003bba:	2000      	movs	r0, #0
 8003bbc:	f7ff fecc 	bl	8003958 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003bc0:	f7ff fe9c 	bl	80038fc <SSD1306_UpdateScreen>
}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003bce:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <ssd1306_I2C_Init+0x24>)
 8003bd0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bd2:	e002      	b.n	8003bda <ssd1306_I2C_Init+0x12>
		p--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f9      	bne.n	8003bd4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	0003d090 	.word	0x0003d090

08003bf0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b0c7      	sub	sp, #284	@ 0x11c
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003bfe:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8003c02:	600a      	str	r2, [r1, #0]
 8003c04:	4619      	mov	r1, r3
 8003c06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c0a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003c0e:	4622      	mov	r2, r4
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c16:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c26:	460a      	mov	r2, r1
 8003c28:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003c2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c32:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003c36:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003c44:	e015      	b.n	8003c72 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003c46:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003c4a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003c4e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	441a      	add	r2, r3
 8003c56:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	7811      	ldrb	r1, [r2, #0]
 8003c5e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003c62:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003c66:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003c68:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003c72:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003c7c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003c80:	8812      	ldrh	r2, [r2, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d8df      	bhi.n	8003c46 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003c86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c8a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b299      	uxth	r1, r3
 8003c92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003c96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f107 020c 	add.w	r2, r7, #12
 8003ca4:	200a      	movs	r0, #10
 8003ca6:	9000      	str	r0, [sp, #0]
 8003ca8:	4803      	ldr	r0, [pc, #12]	@ (8003cb8 <ssd1306_I2C_WriteMulti+0xc8>)
 8003caa:	f7fd fb77 	bl	800139c <HAL_I2C_Master_Transmit>
}
 8003cae:	bf00      	nop
 8003cb0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd90      	pop	{r4, r7, pc}
 8003cb8:	20000030 	.word	0x20000030

08003cbc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	71bb      	strb	r3, [r7, #6]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003cce:	79bb      	ldrb	r3, [r7, #6]
 8003cd0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003cd2:	797b      	ldrb	r3, [r7, #5]
 8003cd4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	b299      	uxth	r1, r3
 8003cda:	f107 020c 	add.w	r2, r7, #12
 8003cde:	230a      	movs	r3, #10
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	4803      	ldr	r0, [pc, #12]	@ (8003cf4 <ssd1306_I2C_Write+0x38>)
 8003ce6:	f7fd fb59 	bl	800139c <HAL_I2C_Master_Transmit>
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000030 	.word	0x20000030

08003cf8 <__itoa>:
 8003cf8:	1e93      	subs	r3, r2, #2
 8003cfa:	2b22      	cmp	r3, #34	@ 0x22
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	460c      	mov	r4, r1
 8003d00:	d904      	bls.n	8003d0c <__itoa+0x14>
 8003d02:	2300      	movs	r3, #0
 8003d04:	461c      	mov	r4, r3
 8003d06:	700b      	strb	r3, [r1, #0]
 8003d08:	4620      	mov	r0, r4
 8003d0a:	bd10      	pop	{r4, pc}
 8003d0c:	2a0a      	cmp	r2, #10
 8003d0e:	d109      	bne.n	8003d24 <__itoa+0x2c>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	da07      	bge.n	8003d24 <__itoa+0x2c>
 8003d14:	232d      	movs	r3, #45	@ 0x2d
 8003d16:	700b      	strb	r3, [r1, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4240      	negs	r0, r0
 8003d1c:	4421      	add	r1, r4
 8003d1e:	f000 f805 	bl	8003d2c <__utoa>
 8003d22:	e7f1      	b.n	8003d08 <__itoa+0x10>
 8003d24:	2100      	movs	r1, #0
 8003d26:	e7f9      	b.n	8003d1c <__itoa+0x24>

08003d28 <itoa>:
 8003d28:	f7ff bfe6 	b.w	8003cf8 <__itoa>

08003d2c <__utoa>:
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b08b      	sub	sp, #44	@ 0x2c
 8003d30:	4605      	mov	r5, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	466e      	mov	r6, sp
 8003d36:	4c1d      	ldr	r4, [pc, #116]	@ (8003dac <__utoa+0x80>)
 8003d38:	f104 0c20 	add.w	ip, r4, #32
 8003d3c:	4637      	mov	r7, r6
 8003d3e:	6820      	ldr	r0, [r4, #0]
 8003d40:	6861      	ldr	r1, [r4, #4]
 8003d42:	3408      	adds	r4, #8
 8003d44:	c703      	stmia	r7!, {r0, r1}
 8003d46:	4564      	cmp	r4, ip
 8003d48:	463e      	mov	r6, r7
 8003d4a:	d1f7      	bne.n	8003d3c <__utoa+0x10>
 8003d4c:	7921      	ldrb	r1, [r4, #4]
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	7139      	strb	r1, [r7, #4]
 8003d52:	1e91      	subs	r1, r2, #2
 8003d54:	2922      	cmp	r1, #34	@ 0x22
 8003d56:	6038      	str	r0, [r7, #0]
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	d904      	bls.n	8003d68 <__utoa+0x3c>
 8003d5e:	7019      	strb	r1, [r3, #0]
 8003d60:	460b      	mov	r3, r1
 8003d62:	4618      	mov	r0, r3
 8003d64:	b00b      	add	sp, #44	@ 0x2c
 8003d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d68:	1e58      	subs	r0, r3, #1
 8003d6a:	4684      	mov	ip, r0
 8003d6c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003d70:	fb02 5617 	mls	r6, r2, r7, r5
 8003d74:	3628      	adds	r6, #40	@ 0x28
 8003d76:	446e      	add	r6, sp
 8003d78:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003d82:	462e      	mov	r6, r5
 8003d84:	42b2      	cmp	r2, r6
 8003d86:	463d      	mov	r5, r7
 8003d88:	f101 0101 	add.w	r1, r1, #1
 8003d8c:	d9ee      	bls.n	8003d6c <__utoa+0x40>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	545a      	strb	r2, [r3, r1]
 8003d92:	1919      	adds	r1, r3, r4
 8003d94:	1aa5      	subs	r5, r4, r2
 8003d96:	42aa      	cmp	r2, r5
 8003d98:	dae3      	bge.n	8003d62 <__utoa+0x36>
 8003d9a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003d9e:	780e      	ldrb	r6, [r1, #0]
 8003da0:	3201      	adds	r2, #1
 8003da2:	7006      	strb	r6, [r0, #0]
 8003da4:	f801 5901 	strb.w	r5, [r1], #-1
 8003da8:	e7f4      	b.n	8003d94 <__utoa+0x68>
 8003daa:	bf00      	nop
 8003dac:	08004bc0 	.word	0x08004bc0

08003db0 <memset>:
 8003db0:	4603      	mov	r3, r0
 8003db2:	4402      	add	r2, r0
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d100      	bne.n	8003dba <memset+0xa>
 8003db8:	4770      	bx	lr
 8003dba:	f803 1b01 	strb.w	r1, [r3], #1
 8003dbe:	e7f9      	b.n	8003db4 <memset+0x4>

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	4d0c      	ldr	r5, [pc, #48]	@ (8003df8 <__libc_init_array+0x38>)
 8003dc6:	4c0d      	ldr	r4, [pc, #52]	@ (8003dfc <__libc_init_array+0x3c>)
 8003dc8:	1b64      	subs	r4, r4, r5
 8003dca:	10a4      	asrs	r4, r4, #2
 8003dcc:	42a6      	cmp	r6, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	f000 f81a 	bl	8003e08 <_init>
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	4d0a      	ldr	r5, [pc, #40]	@ (8003e00 <__libc_init_array+0x40>)
 8003dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8003e04 <__libc_init_array+0x44>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de8:	4798      	blx	r3
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df2:	4798      	blx	r3
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08004be8 	.word	0x08004be8
 8003dfc:	08004be8 	.word	0x08004be8
 8003e00:	08004be8 	.word	0x08004be8
 8003e04:	08004bec 	.word	0x08004bec

08003e08 <_init>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr

08003e14 <_fini>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr
