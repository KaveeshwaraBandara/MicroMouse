
two_tofs_with_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  08004e24  08004e24  00005e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c2c  08005c2c  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  08005c2c  08005c2c  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c2c  08005c2c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c2c  08005c2c  00006c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c30  08005c30  00006c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005c34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000070  08005ca4  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08005ca4  00007640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082c3  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aee  00000000  00000000  0000f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00010e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006cc  00000000  00000000  00011738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171b9  00000000  00000000  00011e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b59f  00000000  00000000  00028fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008308c  00000000  00000000  0003455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b75e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be4  00000000  00000000  000b762c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ba210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e0c 	.word	0x08004e0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004e0c 	.word	0x08004e0c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_fmul>:
 80005d8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e0:	bf1e      	ittt	ne
 80005e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005e6:	ea92 0f0c 	teqne	r2, ip
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d06f      	beq.n	80006d0 <__aeabi_fmul+0xf8>
 80005f0:	441a      	add	r2, r3
 80005f2:	ea80 0c01 	eor.w	ip, r0, r1
 80005f6:	0240      	lsls	r0, r0, #9
 80005f8:	bf18      	it	ne
 80005fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80005fe:	d01e      	beq.n	800063e <__aeabi_fmul+0x66>
 8000600:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000604:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000608:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800060c:	fba0 3101 	umull	r3, r1, r0, r1
 8000610:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000614:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000618:	bf3e      	ittt	cc
 800061a:	0049      	lslcc	r1, r1, #1
 800061c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000620:	005b      	lslcc	r3, r3, #1
 8000622:	ea40 0001 	orr.w	r0, r0, r1
 8000626:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800062a:	2afd      	cmp	r2, #253	@ 0xfd
 800062c:	d81d      	bhi.n	800066a <__aeabi_fmul+0x92>
 800062e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000632:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000636:	bf08      	it	eq
 8000638:	f020 0001 	biceq.w	r0, r0, #1
 800063c:	4770      	bx	lr
 800063e:	f090 0f00 	teq	r0, #0
 8000642:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	0249      	lsleq	r1, r1, #9
 800064a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800064e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000652:	3a7f      	subs	r2, #127	@ 0x7f
 8000654:	bfc2      	ittt	gt
 8000656:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800065a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800065e:	4770      	bxgt	lr
 8000660:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	3a01      	subs	r2, #1
 800066a:	dc5d      	bgt.n	8000728 <__aeabi_fmul+0x150>
 800066c:	f112 0f19 	cmn.w	r2, #25
 8000670:	bfdc      	itt	le
 8000672:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000676:	4770      	bxle	lr
 8000678:	f1c2 0200 	rsb	r2, r2, #0
 800067c:	0041      	lsls	r1, r0, #1
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	f1c2 0220 	rsb	r2, r2, #32
 8000686:	fa00 fc02 	lsl.w	ip, r0, r2
 800068a:	ea5f 0031 	movs.w	r0, r1, rrx
 800068e:	f140 0000 	adc.w	r0, r0, #0
 8000692:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000696:	bf08      	it	eq
 8000698:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800069c:	4770      	bx	lr
 800069e:	f092 0f00 	teq	r2, #0
 80006a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80006a6:	bf02      	ittt	eq
 80006a8:	0040      	lsleq	r0, r0, #1
 80006aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80006ae:	3a01      	subeq	r2, #1
 80006b0:	d0f9      	beq.n	80006a6 <__aeabi_fmul+0xce>
 80006b2:	ea40 000c 	orr.w	r0, r0, ip
 80006b6:	f093 0f00 	teq	r3, #0
 80006ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80006be:	bf02      	ittt	eq
 80006c0:	0049      	lsleq	r1, r1, #1
 80006c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80006c6:	3b01      	subeq	r3, #1
 80006c8:	d0f9      	beq.n	80006be <__aeabi_fmul+0xe6>
 80006ca:	ea41 010c 	orr.w	r1, r1, ip
 80006ce:	e78f      	b.n	80005f0 <__aeabi_fmul+0x18>
 80006d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006d4:	ea92 0f0c 	teq	r2, ip
 80006d8:	bf18      	it	ne
 80006da:	ea93 0f0c 	teqne	r3, ip
 80006de:	d00a      	beq.n	80006f6 <__aeabi_fmul+0x11e>
 80006e0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006e4:	bf18      	it	ne
 80006e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006ea:	d1d8      	bne.n	800069e <__aeabi_fmul+0xc6>
 80006ec:	ea80 0001 	eor.w	r0, r0, r1
 80006f0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80006f4:	4770      	bx	lr
 80006f6:	f090 0f00 	teq	r0, #0
 80006fa:	bf17      	itett	ne
 80006fc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000700:	4608      	moveq	r0, r1
 8000702:	f091 0f00 	teqne	r1, #0
 8000706:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800070a:	d014      	beq.n	8000736 <__aeabi_fmul+0x15e>
 800070c:	ea92 0f0c 	teq	r2, ip
 8000710:	d101      	bne.n	8000716 <__aeabi_fmul+0x13e>
 8000712:	0242      	lsls	r2, r0, #9
 8000714:	d10f      	bne.n	8000736 <__aeabi_fmul+0x15e>
 8000716:	ea93 0f0c 	teq	r3, ip
 800071a:	d103      	bne.n	8000724 <__aeabi_fmul+0x14c>
 800071c:	024b      	lsls	r3, r1, #9
 800071e:	bf18      	it	ne
 8000720:	4608      	movne	r0, r1
 8000722:	d108      	bne.n	8000736 <__aeabi_fmul+0x15e>
 8000724:	ea80 0001 	eor.w	r0, r0, r1
 8000728:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000730:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000734:	4770      	bx	lr
 8000736:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800073a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800073e:	4770      	bx	lr

08000740 <__aeabi_fdiv>:
 8000740:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000744:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000748:	bf1e      	ittt	ne
 800074a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800074e:	ea92 0f0c 	teqne	r2, ip
 8000752:	ea93 0f0c 	teqne	r3, ip
 8000756:	d069      	beq.n	800082c <__aeabi_fdiv+0xec>
 8000758:	eba2 0203 	sub.w	r2, r2, r3
 800075c:	ea80 0c01 	eor.w	ip, r0, r1
 8000760:	0249      	lsls	r1, r1, #9
 8000762:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000766:	d037      	beq.n	80007d8 <__aeabi_fdiv+0x98>
 8000768:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800076c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000770:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000774:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000778:	428b      	cmp	r3, r1
 800077a:	bf38      	it	cc
 800077c:	005b      	lslcc	r3, r3, #1
 800077e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000782:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000786:	428b      	cmp	r3, r1
 8000788:	bf24      	itt	cs
 800078a:	1a5b      	subcs	r3, r3, r1
 800078c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000790:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000794:	bf24      	itt	cs
 8000796:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800079a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800079e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80007a2:	bf24      	itt	cs
 80007a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80007a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80007b0:	bf24      	itt	cs
 80007b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80007b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	bf18      	it	ne
 80007be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80007c2:	d1e0      	bne.n	8000786 <__aeabi_fdiv+0x46>
 80007c4:	2afd      	cmp	r2, #253	@ 0xfd
 80007c6:	f63f af50 	bhi.w	800066a <__aeabi_fmul+0x92>
 80007ca:	428b      	cmp	r3, r1
 80007cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007d0:	bf08      	it	eq
 80007d2:	f020 0001 	biceq.w	r0, r0, #1
 80007d6:	4770      	bx	lr
 80007d8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80007dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e0:	327f      	adds	r2, #127	@ 0x7f
 80007e2:	bfc2      	ittt	gt
 80007e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80007e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007ec:	4770      	bxgt	lr
 80007ee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	3a01      	subs	r2, #1
 80007f8:	e737      	b.n	800066a <__aeabi_fmul+0x92>
 80007fa:	f092 0f00 	teq	r2, #0
 80007fe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000802:	bf02      	ittt	eq
 8000804:	0040      	lsleq	r0, r0, #1
 8000806:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800080a:	3a01      	subeq	r2, #1
 800080c:	d0f9      	beq.n	8000802 <__aeabi_fdiv+0xc2>
 800080e:	ea40 000c 	orr.w	r0, r0, ip
 8000812:	f093 0f00 	teq	r3, #0
 8000816:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800081a:	bf02      	ittt	eq
 800081c:	0049      	lsleq	r1, r1, #1
 800081e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000822:	3b01      	subeq	r3, #1
 8000824:	d0f9      	beq.n	800081a <__aeabi_fdiv+0xda>
 8000826:	ea41 010c 	orr.w	r1, r1, ip
 800082a:	e795      	b.n	8000758 <__aeabi_fdiv+0x18>
 800082c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000830:	ea92 0f0c 	teq	r2, ip
 8000834:	d108      	bne.n	8000848 <__aeabi_fdiv+0x108>
 8000836:	0242      	lsls	r2, r0, #9
 8000838:	f47f af7d 	bne.w	8000736 <__aeabi_fmul+0x15e>
 800083c:	ea93 0f0c 	teq	r3, ip
 8000840:	f47f af70 	bne.w	8000724 <__aeabi_fmul+0x14c>
 8000844:	4608      	mov	r0, r1
 8000846:	e776      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000848:	ea93 0f0c 	teq	r3, ip
 800084c:	d104      	bne.n	8000858 <__aeabi_fdiv+0x118>
 800084e:	024b      	lsls	r3, r1, #9
 8000850:	f43f af4c 	beq.w	80006ec <__aeabi_fmul+0x114>
 8000854:	4608      	mov	r0, r1
 8000856:	e76e      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000858:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800085c:	bf18      	it	ne
 800085e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000862:	d1ca      	bne.n	80007fa <__aeabi_fdiv+0xba>
 8000864:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000868:	f47f af5c 	bne.w	8000724 <__aeabi_fmul+0x14c>
 800086c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000870:	f47f af3c 	bne.w	80006ec <__aeabi_fmul+0x114>
 8000874:	e75f      	b.n	8000736 <__aeabi_fmul+0x15e>
 8000876:	bf00      	nop

08000878 <__gesf2>:
 8000878:	f04f 3cff 	mov.w	ip, #4294967295
 800087c:	e006      	b.n	800088c <__cmpsf2+0x4>
 800087e:	bf00      	nop

08000880 <__lesf2>:
 8000880:	f04f 0c01 	mov.w	ip, #1
 8000884:	e002      	b.n	800088c <__cmpsf2+0x4>
 8000886:	bf00      	nop

08000888 <__cmpsf2>:
 8000888:	f04f 0c01 	mov.w	ip, #1
 800088c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000890:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000894:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000898:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800089c:	bf18      	it	ne
 800089e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008a2:	d011      	beq.n	80008c8 <__cmpsf2+0x40>
 80008a4:	b001      	add	sp, #4
 80008a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80008aa:	bf18      	it	ne
 80008ac:	ea90 0f01 	teqne	r0, r1
 80008b0:	bf58      	it	pl
 80008b2:	ebb2 0003 	subspl.w	r0, r2, r3
 80008b6:	bf88      	it	hi
 80008b8:	17c8      	asrhi	r0, r1, #31
 80008ba:	bf38      	it	cc
 80008bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80008c0:	bf18      	it	ne
 80008c2:	f040 0001 	orrne.w	r0, r0, #1
 80008c6:	4770      	bx	lr
 80008c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008cc:	d102      	bne.n	80008d4 <__cmpsf2+0x4c>
 80008ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80008d2:	d105      	bne.n	80008e0 <__cmpsf2+0x58>
 80008d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80008d8:	d1e4      	bne.n	80008a4 <__cmpsf2+0x1c>
 80008da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80008de:	d0e1      	beq.n	80008a4 <__cmpsf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cfrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4608      	mov	r0, r1
 80008ec:	4661      	mov	r1, ip
 80008ee:	e7ff      	b.n	80008f0 <__aeabi_cfcmpeq>

080008f0 <__aeabi_cfcmpeq>:
 80008f0:	b50f      	push	{r0, r1, r2, r3, lr}
 80008f2:	f7ff ffc9 	bl	8000888 <__cmpsf2>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	bf48      	it	mi
 80008fa:	f110 0f00 	cmnmi.w	r0, #0
 80008fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000900 <__aeabi_fcmpeq>:
 8000900:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000904:	f7ff fff4 	bl	80008f0 <__aeabi_cfcmpeq>
 8000908:	bf0c      	ite	eq
 800090a:	2001      	moveq	r0, #1
 800090c:	2000      	movne	r0, #0
 800090e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000912:	bf00      	nop

08000914 <__aeabi_fcmplt>:
 8000914:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000918:	f7ff ffea 	bl	80008f0 <__aeabi_cfcmpeq>
 800091c:	bf34      	ite	cc
 800091e:	2001      	movcc	r0, #1
 8000920:	2000      	movcs	r0, #0
 8000922:	f85d fb08 	ldr.w	pc, [sp], #8
 8000926:	bf00      	nop

08000928 <__aeabi_fcmple>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff ffe0 	bl	80008f0 <__aeabi_cfcmpeq>
 8000930:	bf94      	ite	ls
 8000932:	2001      	movls	r0, #1
 8000934:	2000      	movhi	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_fcmpge>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffd2 	bl	80008e8 <__aeabi_cfrcmple>
 8000944:	bf94      	ite	ls
 8000946:	2001      	movls	r0, #1
 8000948:	2000      	movhi	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_fcmpgt>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffc8 	bl	80008e8 <__aeabi_cfrcmple>
 8000958:	bf34      	ite	cc
 800095a:	2001      	movcc	r0, #1
 800095c:	2000      	movcs	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_f2uiz>:
 8000964:	0042      	lsls	r2, r0, #1
 8000966:	d20e      	bcs.n	8000986 <__aeabi_f2uiz+0x22>
 8000968:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800096c:	d30b      	bcc.n	8000986 <__aeabi_f2uiz+0x22>
 800096e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000972:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000976:	d409      	bmi.n	800098c <__aeabi_f2uiz+0x28>
 8000978:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800097c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000980:	fa23 f002 	lsr.w	r0, r3, r2
 8000984:	4770      	bx	lr
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	4770      	bx	lr
 800098c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000990:	d101      	bne.n	8000996 <__aeabi_f2uiz+0x32>
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	d102      	bne.n	800099c <__aeabi_f2uiz+0x38>
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <scanI2CBus>:
    }
    SSD1306_UpdateScreen();
    HAL_Delay(delay);
}

void scanI2CBus(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
    char buffer[16];
    SSD1306_Clear();
 80009aa:	f003 fc6e 	bl	800428a <SSD1306_Clear>
    SSD1306_GotoXY(0, 0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	2000      	movs	r0, #0
 80009b2:	f003 fbb1 	bl	8004118 <SSD1306_GotoXY>
    SSD1306_Puts("I2C Scan:", &Font_11x18, 1);
 80009b6:	2201      	movs	r2, #1
 80009b8:	491b      	ldr	r1, [pc, #108]	@ (8000a28 <scanI2CBus+0x84>)
 80009ba:	481c      	ldr	r0, [pc, #112]	@ (8000a2c <scanI2CBus+0x88>)
 80009bc:	f003 fc40 	bl	8004240 <SSD1306_Puts>

    for (uint8_t address = 1; address < 128; address++) {
 80009c0:	2301      	movs	r3, #1
 80009c2:	75fb      	strb	r3, [r7, #23]
 80009c4:	e024      	b.n	8000a10 <scanI2CBus+0x6c>
        // Perform an I2C write operation to check if the device responds
        if (HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 1, 10) == HAL_OK) {
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	b299      	uxth	r1, r3
 80009ce:	230a      	movs	r3, #10
 80009d0:	2201      	movs	r2, #1
 80009d2:	4817      	ldr	r0, [pc, #92]	@ (8000a30 <scanI2CBus+0x8c>)
 80009d4:	f001 fa16 	bl	8001e04 <HAL_I2C_IsDeviceReady>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d115      	bne.n	8000a0a <scanI2CBus+0x66>
            snprintf(buffer, sizeof(buffer), "Found: 0x%02X", address);
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	1d38      	adds	r0, r7, #4
 80009e2:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <scanI2CBus+0x90>)
 80009e4:	2110      	movs	r1, #16
 80009e6:	f003 fd4d 	bl	8004484 <sniprintf>
            SSD1306_GotoXY(0, 30);
 80009ea:	211e      	movs	r1, #30
 80009ec:	2000      	movs	r0, #0
 80009ee:	f003 fb93 	bl	8004118 <SSD1306_GotoXY>
            SSD1306_Puts(buffer, &Font_11x18, 1);
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2201      	movs	r2, #1
 80009f6:	490c      	ldr	r1, [pc, #48]	@ (8000a28 <scanI2CBus+0x84>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fc21 	bl	8004240 <SSD1306_Puts>
            SSD1306_UpdateScreen();
 80009fe:	f003 fae7 	bl	8003fd0 <SSD1306_UpdateScreen>
            HAL_Delay(1000);
 8000a02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a06:	f000 faab 	bl	8000f60 <HAL_Delay>
    for (uint8_t address = 1; address < 128; address++) {
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	75fb      	strb	r3, [r7, #23]
 8000a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dad6      	bge.n	80009c6 <scanI2CBus+0x22>
            //SD1306_Clear();// Delay to display each address found
        }
    }
    HAL_Delay(2000);  // Delay at the end of the scan
 8000a18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a1c:	f000 faa0 	bl	8000f60 <HAL_Delay>
}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000018 	.word	0x20000018
 8000a2c:	08004e24 	.word	0x08004e24
 8000a30:	2000008c 	.word	0x2000008c
 8000a34:	08004e30 	.word	0x08004e30

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3e:	f000 fa2d 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a42:	f000 f87f 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a46:	f000 f8e7 	bl	8000c18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a4a:	f000 f8b7 	bl	8000bbc <MX_I2C1_Init>
//      Error_Handler();
//  } else {
//      displayMessage("I2C Init", "Success", 2000);
//  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);  // Enable Sensor 1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2108      	movs	r1, #8
 8000a52:	4837      	ldr	r0, [pc, #220]	@ (8000b30 <main+0xf8>)
 8000a54:	f000 fd10 	bl	8001478 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Disable Sensor 2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4834      	ldr	r0, [pc, #208]	@ (8000b30 <main+0xf8>)
 8000a5e:	f000 fd0b 	bl	8001478 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000a62:	2032      	movs	r0, #50	@ 0x32
 8000a64:	f000 fa7c 	bl	8000f60 <HAL_Delay>

//  displayMessage("Initializing", "Sensor 1", 500);
  if (!init(true)) {
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f002 fbe9 	bl	8003240 <init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <main+0x40>
      //displayMessage("Sensor 1", "Init Failed", 2000);
      Error_Handler();
 8000a74:	f000 f90e 	bl	8000c94 <Error_Handler>
  }
  setAddress(SENSOR1_ADDRESS);
 8000a78:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <main+0xfc>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fbc5 	bl	800320c <setAddress>
  //displayMessage("Sensor 1", "Initialized", 1000);
  //scanI2CBus();

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);  // Disable Sensor 1
 8000a82:	2200      	movs	r2, #0
 8000a84:	2108      	movs	r1, #8
 8000a86:	482a      	ldr	r0, [pc, #168]	@ (8000b30 <main+0xf8>)
 8000a88:	f000 fcf6 	bl	8001478 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);  // Enable Sensor 2
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2110      	movs	r1, #16
 8000a90:	4827      	ldr	r0, [pc, #156]	@ (8000b30 <main+0xf8>)
 8000a92:	f000 fcf1 	bl	8001478 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000a96:	2032      	movs	r0, #50	@ 0x32
 8000a98:	f000 fa62 	bl	8000f60 <HAL_Delay>

  //displayMessage("Initializing", "Sensor 2", 500);
  if (!init(true)) {
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f002 fbcf 	bl	8003240 <init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <main+0x74>
    //  displayMessage("Sensor 2", "Init Failed", 2000);
      Error_Handler();
 8000aa8:	f000 f8f4 	bl	8000c94 <Error_Handler>
  }
  setAddress(SENSOR2_ADDRESS);
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <main+0x100>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fbab 	bl	800320c <setAddress>
  //displayMessage("Sensor 2", "Initialized", 1000);
  SSD1306_Init();
 8000ab6:	f003 f9c7 	bl	8003e48 <SSD1306_Init>
  scanI2CBus();
 8000aba:	f7ff ff73 	bl	80009a4 <scanI2CBus>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); // Enable Sensor 1
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	481b      	ldr	r0, [pc, #108]	@ (8000b30 <main+0xf8>)
 8000ac4:	f000 fcd8 	bl	8001478 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); // Disable Sensor 2
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	4818      	ldr	r0, [pc, #96]	@ (8000b30 <main+0xf8>)
 8000ace:	f000 fcd3 	bl	8001478 <HAL_GPIO_WritePin>

	  VL53L0X_SetAddress(SENSOR1_ADDRESS);
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <main+0xfc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fa50 	bl	8002f7c <VL53L0X_SetAddress>
	  uint16_t distance = readRangeSingleMillimeters();
 8000adc:	f002 ff84 	bl	80039e8 <readRangeSingleMillimeters>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  SSD1306_Clear();
 8000ae4:	f003 fbd1 	bl	800428a <SSD1306_Clear>
	  SSD1306_GotoXY(0, 10);
 8000ae8:	210a      	movs	r1, #10
 8000aea:	2000      	movs	r0, #0
 8000aec:	f003 fb14 	bl	8004118 <SSD1306_GotoXY>
	  SSD1306_Puts("Sensor 1:", &Font_11x18, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	4912      	ldr	r1, [pc, #72]	@ (8000b3c <main+0x104>)
 8000af4:	4812      	ldr	r0, [pc, #72]	@ (8000b40 <main+0x108>)
 8000af6:	f003 fba3 	bl	8004240 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 30);
 8000afa:	211e      	movs	r1, #30
 8000afc:	2000      	movs	r0, #0
 8000afe:	f003 fb0b 	bl	8004118 <SSD1306_GotoXY>
	  itoa(distance, buffer1, 10);
 8000b02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b04:	f107 0114 	add.w	r1, r7, #20
 8000b08:	220a      	movs	r2, #10
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 fc76 	bl	80043fc <itoa>
	  SSD1306_Puts(buffer1, &Font_11x18, 1);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2201      	movs	r2, #1
 8000b16:	4909      	ldr	r1, [pc, #36]	@ (8000b3c <main+0x104>)
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fb91 	bl	8004240 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000b1e:	f003 fa57 	bl	8003fd0 <SSD1306_UpdateScreen>
	  HAL_Delay(1000);
 8000b22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b26:	f000 fa1b 	bl	8000f60 <HAL_Delay>
  {
 8000b2a:	bf00      	nop
 8000b2c:	e7c7      	b.n	8000abe <main+0x86>
 8000b2e:	bf00      	nop
 8000b30:	40010c00 	.word	0x40010c00
 8000b34:	20000007 	.word	0x20000007
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000018 	.word	0x20000018
 8000b40:	08004e40 	.word	0x08004e40

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b090      	sub	sp, #64	@ 0x40
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	2228      	movs	r2, #40	@ 0x28
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fcca 	bl	80044ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fdf6 	bl	800276c <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b86:	f000 f885 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 f864 	bl	8002c70 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bae:	f000 f871 	bl	8000c94 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3740      	adds	r7, #64	@ 0x40
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bc2:	4a13      	ldr	r2, [pc, #76]	@ (8000c10 <MX_I2C1_Init+0x54>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bc8:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <MX_I2C1_Init+0x58>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bfa:	f000 fc55 	bl	80014a8 <HAL_I2C_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c04:	f000 f846 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000008c 	.word	0x2000008c
 8000c10:	40005400 	.word	0x40005400
 8000c14:	00061a80 	.word	0x00061a80

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_GPIO_Init+0x74>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a16      	ldr	r2, [pc, #88]	@ (8000c8c <MX_GPIO_Init+0x74>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_GPIO_Init+0x74>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_GPIO_Init+0x74>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <MX_GPIO_Init+0x74>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_GPIO_Init+0x74>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2118      	movs	r1, #24
 8000c60:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <MX_GPIO_Init+0x78>)
 8000c62:	f000 fc09 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c66:	2318      	movs	r3, #24
 8000c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2302      	movs	r3, #2
 8000c74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <MX_GPIO_Init+0x78>)
 8000c7e:	f000 fa77 	bl	8001170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010c00 	.word	0x40010c00

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_MspInit+0x60>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_MspInit+0x60>)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000

08000d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <HAL_I2C_MspInit+0x70>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d123      	bne.n	8000d6c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_I2C_MspInit+0x74>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <HAL_I2C_MspInit+0x74>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <HAL_I2C_MspInit+0x74>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d3c:	23c0      	movs	r3, #192	@ 0xc0
 8000d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d40:	2312      	movs	r3, #18
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <HAL_I2C_MspInit+0x78>)
 8000d50:	f000 fa0e 	bl	8001170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_I2C_MspInit+0x74>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_I2C_MspInit+0x74>)
 8000d5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d5e:	61d3      	str	r3, [r2, #28]
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_I2C_MspInit+0x74>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8aa 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f003 fb78 	bl	80044fc <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20005000 	.word	0x20005000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	200000e0 	.word	0x200000e0
 8000e40:	20000640 	.word	0x20000640

08000e44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e50:	f7ff fff8 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480b      	ldr	r0, [pc, #44]	@ (8000e84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e56:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e58:	4a0c      	ldr	r2, [pc, #48]	@ (8000e8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a09      	ldr	r2, [pc, #36]	@ (8000e90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e6c:	4c09      	ldr	r4, [pc, #36]	@ (8000e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f003 fb45 	bl	8004508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7e:	f7ff fddb 	bl	8000a38 <main>
  bx lr
 8000e82:	4770      	bx	lr
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e8c:	08005c34 	.word	0x08005c34
  ldr r2, =_sbss
 8000e90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e94:	20000640 	.word	0x20000640

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x28>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x28>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f92b 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fef2 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f935 	bl	8001156 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f90b 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	20000014 	.word	0x20000014
 8000f24:	20000010 	.word	0x20000010

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a03      	ldr	r2, [pc, #12]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000014 	.word	0x20000014
 8000f48:	200000e4 	.word	0x200000e4

08000f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b02      	ldr	r3, [pc, #8]	@ (8000f5c <HAL_GetTick+0x10>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	200000e4 	.word	0x200000e4

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff fff0 	bl	8000f4c <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffe0 	bl	8000f4c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000014 	.word	0x20000014

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	@ (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	@ (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	@ 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	@ 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff90 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff49 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff5e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff90 	bl	8001060 <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5f 	bl	800100c <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffb0 	bl	80010c4 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b08b      	sub	sp, #44	@ 0x2c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e169      	b.n	8001458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001184:	2201      	movs	r2, #1
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8158 	bne.w	8001452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001410 <HAL_GPIO_Init+0x2a0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d05e      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011ac:	4a98      	ldr	r2, [pc, #608]	@ (8001410 <HAL_GPIO_Init+0x2a0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d875      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011b2:	4a98      	ldr	r2, [pc, #608]	@ (8001414 <HAL_GPIO_Init+0x2a4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d058      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011b8:	4a96      	ldr	r2, [pc, #600]	@ (8001414 <HAL_GPIO_Init+0x2a4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d86f      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011be:	4a96      	ldr	r2, [pc, #600]	@ (8001418 <HAL_GPIO_Init+0x2a8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d052      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011c4:	4a94      	ldr	r2, [pc, #592]	@ (8001418 <HAL_GPIO_Init+0x2a8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d869      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ca:	4a94      	ldr	r2, [pc, #592]	@ (800141c <HAL_GPIO_Init+0x2ac>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04c      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011d0:	4a92      	ldr	r2, [pc, #584]	@ (800141c <HAL_GPIO_Init+0x2ac>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d863      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011d6:	4a92      	ldr	r2, [pc, #584]	@ (8001420 <HAL_GPIO_Init+0x2b0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d046      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011dc:	4a90      	ldr	r2, [pc, #576]	@ (8001420 <HAL_GPIO_Init+0x2b0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d85d      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d82a      	bhi.n	800123c <HAL_GPIO_Init+0xcc>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d859      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ea:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <HAL_GPIO_Init+0x80>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	08001245 	.word	0x08001245
 80011f8:	08001257 	.word	0x08001257
 80011fc:	08001299 	.word	0x08001299
 8001200:	0800129f 	.word	0x0800129f
 8001204:	0800129f 	.word	0x0800129f
 8001208:	0800129f 	.word	0x0800129f
 800120c:	0800129f 	.word	0x0800129f
 8001210:	0800129f 	.word	0x0800129f
 8001214:	0800129f 	.word	0x0800129f
 8001218:	0800129f 	.word	0x0800129f
 800121c:	0800129f 	.word	0x0800129f
 8001220:	0800129f 	.word	0x0800129f
 8001224:	0800129f 	.word	0x0800129f
 8001228:	0800129f 	.word	0x0800129f
 800122c:	0800129f 	.word	0x0800129f
 8001230:	0800129f 	.word	0x0800129f
 8001234:	0800124d 	.word	0x0800124d
 8001238:	08001261 	.word	0x08001261
 800123c:	4a79      	ldr	r2, [pc, #484]	@ (8001424 <HAL_GPIO_Init+0x2b4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001242:	e02c      	b.n	800129e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e029      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	3304      	adds	r3, #4
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e024      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	3308      	adds	r3, #8
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e01f      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	330c      	adds	r3, #12
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e01a      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001272:	2304      	movs	r3, #4
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e013      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001280:	2308      	movs	r3, #8
 8001282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	611a      	str	r2, [r3, #16]
          break;
 800128a:	e009      	b.n	80012a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800128c:	2308      	movs	r3, #8
 800128e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	615a      	str	r2, [r3, #20]
          break;
 8001296:	e003      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          break;
 800129e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	@ 0xff
 80012a4:	d801      	bhi.n	80012aa <HAL_GPIO_Init+0x13a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	e001      	b.n	80012ae <HAL_GPIO_Init+0x13e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3304      	adds	r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	@ 0xff
 80012b4:	d802      	bhi.n	80012bc <HAL_GPIO_Init+0x14c>
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x152>
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	3b08      	subs	r3, #8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	210f      	movs	r1, #15
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	6a39      	ldr	r1, [r7, #32]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80b1 	beq.w	8001452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001428 <HAL_GPIO_Init+0x2b8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001428 <HAL_GPIO_Init+0x2b8>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001428 <HAL_GPIO_Init+0x2b8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001308:	4a48      	ldr	r2, [pc, #288]	@ (800142c <HAL_GPIO_Init+0x2bc>)
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a40      	ldr	r2, [pc, #256]	@ (8001430 <HAL_GPIO_Init+0x2c0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d013      	beq.n	800135c <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3f      	ldr	r2, [pc, #252]	@ (8001434 <HAL_GPIO_Init+0x2c4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00d      	beq.n	8001358 <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3e      	ldr	r2, [pc, #248]	@ (8001438 <HAL_GPIO_Init+0x2c8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x1e4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3d      	ldr	r2, [pc, #244]	@ (800143c <HAL_GPIO_Init+0x2cc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_GPIO_Init+0x1e0>
 800134c:	2303      	movs	r3, #3
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001350:	2304      	movs	r3, #4
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 800135c:	2300      	movs	r3, #0
 800135e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800136e:	492f      	ldr	r1, [pc, #188]	@ (800142c <HAL_GPIO_Init+0x2bc>)
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001388:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	492c      	ldr	r1, [pc, #176]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	608b      	str	r3, [r1, #8]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001396:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	4928      	ldr	r1, [pc, #160]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b0:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	4922      	ldr	r1, [pc, #136]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	60cb      	str	r3, [r1, #12]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	491e      	ldr	r1, [pc, #120]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4918      	ldr	r1, [pc, #96]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4914      	ldr	r1, [pc, #80]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d021      	beq.n	8001444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	490e      	ldr	r1, [pc, #56]	@ (8001440 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e021      	b.n	8001452 <HAL_GPIO_Init+0x2e2>
 800140e:	bf00      	nop
 8001410:	10320000 	.word	0x10320000
 8001414:	10310000 	.word	0x10310000
 8001418:	10220000 	.word	0x10220000
 800141c:	10210000 	.word	0x10210000
 8001420:	10120000 	.word	0x10120000
 8001424:	10110000 	.word	0x10110000
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000
 8001430:	40010800 	.word	0x40010800
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40011000 	.word	0x40011000
 800143c:	40011400 	.word	0x40011400
 8001440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_GPIO_Init+0x304>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	43db      	mvns	r3, r3
 800144c:	4909      	ldr	r1, [pc, #36]	@ (8001474 <HAL_GPIO_Init+0x304>)
 800144e:	4013      	ands	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	3301      	adds	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	f47f ae8e 	bne.w	8001184 <HAL_GPIO_Init+0x14>
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	372c      	adds	r7, #44	@ 0x2c
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e12b      	b.n	8001712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fc18 	bl	8000d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2224      	movs	r2, #36	@ 0x24
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800150a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800150c:	f001 fcf8 	bl	8002f00 <HAL_RCC_GetPCLK1Freq>
 8001510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a81      	ldr	r2, [pc, #516]	@ (800171c <HAL_I2C_Init+0x274>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d807      	bhi.n	800152c <HAL_I2C_Init+0x84>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a80      	ldr	r2, [pc, #512]	@ (8001720 <HAL_I2C_Init+0x278>)
 8001520:	4293      	cmp	r3, r2
 8001522:	bf94      	ite	ls
 8001524:	2301      	movls	r3, #1
 8001526:	2300      	movhi	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	e006      	b.n	800153a <HAL_I2C_Init+0x92>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a7d      	ldr	r2, [pc, #500]	@ (8001724 <HAL_I2C_Init+0x27c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	bf94      	ite	ls
 8001534:	2301      	movls	r3, #1
 8001536:	2300      	movhi	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0e7      	b.n	8001712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a78      	ldr	r2, [pc, #480]	@ (8001728 <HAL_I2C_Init+0x280>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4a6a      	ldr	r2, [pc, #424]	@ (800171c <HAL_I2C_Init+0x274>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d802      	bhi.n	800157c <HAL_I2C_Init+0xd4>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3301      	adds	r3, #1
 800157a:	e009      	b.n	8001590 <HAL_I2C_Init+0xe8>
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	4a69      	ldr	r2, [pc, #420]	@ (800172c <HAL_I2C_Init+0x284>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	099b      	lsrs	r3, r3, #6
 800158e:	3301      	adds	r3, #1
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	430b      	orrs	r3, r1
 8001596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	495c      	ldr	r1, [pc, #368]	@ (800171c <HAL_I2C_Init+0x274>)
 80015ac:	428b      	cmp	r3, r1
 80015ae:	d819      	bhi.n	80015e4 <HAL_I2C_Init+0x13c>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1e59      	subs	r1, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015c4:	400b      	ands	r3, r1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00a      	beq.n	80015e0 <HAL_I2C_Init+0x138>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1e59      	subs	r1, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015de:	e051      	b.n	8001684 <HAL_I2C_Init+0x1dc>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e04f      	b.n	8001684 <HAL_I2C_Init+0x1dc>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d111      	bne.n	8001610 <HAL_I2C_Init+0x168>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e58      	subs	r0, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	e012      	b.n	8001636 <HAL_I2C_Init+0x18e>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	0099      	lsls	r1, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	fbb0 f3f3 	udiv	r3, r0, r3
 8001626:	3301      	adds	r3, #1
 8001628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Init+0x196>
 800163a:	2301      	movs	r3, #1
 800163c:	e022      	b.n	8001684 <HAL_I2C_Init+0x1dc>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10e      	bne.n	8001664 <HAL_I2C_Init+0x1bc>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1e58      	subs	r0, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	440b      	add	r3, r1
 8001654:	fbb0 f3f3 	udiv	r3, r0, r3
 8001658:	3301      	adds	r3, #1
 800165a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001662:	e00f      	b.n	8001684 <HAL_I2C_Init+0x1dc>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e58      	subs	r0, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	0099      	lsls	r1, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	fbb0 f3f3 	udiv	r3, r0, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	6809      	ldr	r1, [r1, #0]
 8001688:	4313      	orrs	r3, r2
 800168a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6911      	ldr	r1, [r2, #16]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68d2      	ldr	r2, [r2, #12]
 80016be:	4311      	orrs	r1, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2220      	movs	r2, #32
 80016fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	000186a0 	.word	0x000186a0
 8001720:	001e847f 	.word	0x001e847f
 8001724:	003d08ff 	.word	0x003d08ff
 8001728:	431bde83 	.word	0x431bde83
 800172c:	10624dd3 	.word	0x10624dd3

08001730 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	461a      	mov	r2, r3
 800173c:	460b      	mov	r3, r1
 800173e:	817b      	strh	r3, [r7, #10]
 8001740:	4613      	mov	r3, r2
 8001742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fc02 	bl	8000f4c <HAL_GetTick>
 8001748:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b20      	cmp	r3, #32
 8001754:	f040 80e0 	bne.w	8001918 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2319      	movs	r3, #25
 800175e:	2201      	movs	r2, #1
 8001760:	4970      	ldr	r1, [pc, #448]	@ (8001924 <HAL_I2C_Master_Transmit+0x1f4>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fdcc 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	e0d3      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_I2C_Master_Transmit+0x50>
 800177c:	2302      	movs	r3, #2
 800177e:	e0cc      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d007      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2221      	movs	r2, #33	@ 0x21
 80017ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2210      	movs	r2, #16
 80017c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	893a      	ldrh	r2, [r7, #8]
 80017d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a50      	ldr	r2, [pc, #320]	@ (8001928 <HAL_I2C_Master_Transmit+0x1f8>)
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017e8:	8979      	ldrh	r1, [r7, #10]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fc36 	bl	8002060 <I2C_MasterRequestWrite>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e08d      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001814:	e066      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6a39      	ldr	r1, [r7, #32]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fe8a 	bl	8002534 <I2C_WaitOnTXEFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	2b04      	cmp	r3, #4
 800182c:	d107      	bne.n	800183e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800183c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06b      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b04      	cmp	r3, #4
 800187e:	d11b      	bne.n	80018b8 <HAL_I2C_Master_Transmit+0x188>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d017      	beq.n	80018b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	6a39      	ldr	r1, [r7, #32]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fe81 	bl	80025c4 <I2C_WaitOnBTFFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00d      	beq.n	80018e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d107      	bne.n	80018e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e01a      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d194      	bne.n	8001816 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	00100002 	.word	0x00100002
 8001928:	ffff0000 	.word	0xffff0000

0800192c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	@ 0x30
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	460b      	mov	r3, r1
 800193a:	817b      	strh	r3, [r7, #10]
 800193c:	4613      	mov	r3, r2
 800193e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff fb02 	bl	8000f4c <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b20      	cmp	r3, #32
 8001954:	f040 824b 	bne.w	8001dee <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2319      	movs	r3, #25
 800195e:	2201      	movs	r2, #1
 8001960:	497f      	ldr	r1, [pc, #508]	@ (8001b60 <HAL_I2C_Master_Receive+0x234>)
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fccc 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800196e:	2302      	movs	r3, #2
 8001970:	e23e      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_I2C_Master_Receive+0x54>
 800197c:	2302      	movs	r3, #2
 800197e:	e237      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d007      	beq.n	80019a6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2222      	movs	r2, #34	@ 0x22
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2210      	movs	r2, #16
 80019c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	893a      	ldrh	r2, [r7, #8]
 80019d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001b64 <HAL_I2C_Master_Receive+0x238>)
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019e8:	8979      	ldrh	r1, [r7, #10]
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fbb8 	bl	8002164 <I2C_MasterRequestRead>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1f8      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e1cc      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d11e      	bne.n	8001a74 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a46:	b672      	cpsid	i
}
 8001a48:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a70:	b662      	cpsie	i
}
 8001a72:	e035      	b.n	8001ae0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d11e      	bne.n	8001aba <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ab6:	b662      	cpsie	i
}
 8001ab8:	e012      	b.n	8001ae0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ae0:	e172      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	f200 811f 	bhi.w	8001d2a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d123      	bne.n	8001b3c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 fdab 	bl	8002654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e173      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b3a:	e145      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d152      	bne.n	8001bea <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4906      	ldr	r1, [pc, #24]	@ (8001b68 <HAL_I2C_Master_Receive+0x23c>)
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fbd6 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e148      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
 8001b5e:	bf00      	nop
 8001b60:	00100002 	.word	0x00100002
 8001b64:	ffff0000 	.word	0xffff0000
 8001b68:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb2:	b662      	cpsie	i
}
 8001bb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001be8:	e0ee      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4981      	ldr	r1, [pc, #516]	@ (8001df8 <HAL_I2C_Master_Receive+0x4cc>)
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fb83 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0f5      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dfc <HAL_I2C_Master_Receive+0x4d0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	4a6b      	ldr	r2, [pc, #428]	@ (8001e00 <HAL_I2C_Master_Receive+0x4d4>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	0a1a      	lsrs	r2, r3, #8
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00da      	lsls	r2, r3, #3
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d118      	bne.n	8001ca2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f043 0220 	orr.w	r2, r3, #32
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c92:	b662      	cpsie	i
}
 8001c94:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0a6      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d1d9      	bne.n	8001c64 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cf2:	b662      	cpsie	i
}
 8001cf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d28:	e04e      	b.n	8001dc8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fc90 	bl	8002654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e058      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d124      	bne.n	8001dc8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d107      	bne.n	8001d96 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d94:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f47f ae88 	bne.w	8001ae2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3728      	adds	r7, #40	@ 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	00010004 	.word	0x00010004
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	14f8b589 	.word	0x14f8b589

08001e04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	@ 0x28
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	460b      	mov	r3, r1
 8001e12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff f89a 	bl	8000f4c <HAL_GetTick>
 8001e18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	f040 8111 	bne.w	800204e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2319      	movs	r3, #25
 8001e32:	2201      	movs	r2, #1
 8001e34:	4988      	ldr	r1, [pc, #544]	@ (8002058 <HAL_I2C_IsDeviceReady+0x254>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa62 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	e104      	b.n	8002050 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2C_IsDeviceReady+0x50>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e0fd      	b.n	8002050 <HAL_I2C_IsDeviceReady+0x24c>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d007      	beq.n	8001e7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2224      	movs	r2, #36	@ 0x24
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a70      	ldr	r2, [pc, #448]	@ (800205c <HAL_I2C_IsDeviceReady+0x258>)
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fa20 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ed4:	d103      	bne.n	8001ede <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001edc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0b6      	b.n	8002050 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ef0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f82b 	bl	8000f4c <HAL_GetTick>
 8001ef6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1c:	bf0c      	ite	eq
 8001f1e:	2301      	moveq	r3, #1
 8001f20:	2300      	movne	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f26:	e025      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f28:	f7ff f810 	bl	8000f4c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d302      	bcc.n	8001f3e <HAL_I2C_IsDeviceReady+0x13a>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	22a0      	movs	r2, #160	@ 0xa0
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f7e:	d005      	beq.n	8001f8c <HAL_I2C_IsDeviceReady+0x188>
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_I2C_IsDeviceReady+0x188>
 8001f86:	7dbb      	ldrb	r3, [r7, #22]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0cd      	beq.n	8001f28 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d129      	bne.n	8001ff6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2319      	movs	r3, #25
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4921      	ldr	r1, [pc, #132]	@ (8002058 <HAL_I2C_IsDeviceReady+0x254>)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f994 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e036      	b.n	8002050 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e02c      	b.n	8002050 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002004:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800200e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2319      	movs	r3, #25
 8002016:	2201      	movs	r2, #1
 8002018:	490f      	ldr	r1, [pc, #60]	@ (8002058 <HAL_I2C_IsDeviceReady+0x254>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f970 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e012      	b.n	8002050 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3301      	adds	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	f4ff af32 	bcc.w	8001e9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800204e:	2302      	movs	r3, #2
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	00100002 	.word	0x00100002
 800205c:	ffff0000 	.word	0xffff0000

08002060 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	460b      	mov	r3, r1
 800206e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d006      	beq.n	800208a <I2C_MasterRequestWrite+0x2a>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d003      	beq.n	800208a <I2C_MasterRequestWrite+0x2a>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002088:	d108      	bne.n	800209c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e00b      	b.n	80020b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	2b12      	cmp	r3, #18
 80020a2:	d107      	bne.n	80020b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f91d 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020da:	d103      	bne.n	80020e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e035      	b.n	8002154 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020f0:	d108      	bne.n	8002104 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	e01b      	b.n	800213c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002104:	897b      	ldrh	r3, [r7, #10]
 8002106:	11db      	asrs	r3, r3, #7
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 0306 	and.w	r3, r3, #6
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f063 030f 	orn	r3, r3, #15
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	490e      	ldr	r1, [pc, #56]	@ (800215c <I2C_MasterRequestWrite+0xfc>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f966 	bl	80023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e010      	b.n	8002154 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002132:	897b      	ldrh	r3, [r7, #10]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4907      	ldr	r1, [pc, #28]	@ (8002160 <I2C_MasterRequestWrite+0x100>)
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f956 	bl	80023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	00010008 	.word	0x00010008
 8002160:	00010002 	.word	0x00010002

08002164 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	460b      	mov	r3, r1
 8002172:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002178:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002188:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d006      	beq.n	800219e <I2C_MasterRequestRead+0x3a>
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d003      	beq.n	800219e <I2C_MasterRequestRead+0x3a>
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800219c:	d108      	bne.n	80021b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e00b      	b.n	80021c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	2b11      	cmp	r3, #17
 80021b6:	d107      	bne.n	80021c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f893 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ee:	d103      	bne.n	80021f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e079      	b.n	80022f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002204:	d108      	bne.n	8002218 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	611a      	str	r2, [r3, #16]
 8002216:	e05f      	b.n	80022d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002218:	897b      	ldrh	r3, [r7, #10]
 800221a:	11db      	asrs	r3, r3, #7
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0306 	and.w	r3, r3, #6
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f063 030f 	orn	r3, r3, #15
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4930      	ldr	r1, [pc, #192]	@ (80022f8 <I2C_MasterRequestRead+0x194>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f8dc 	bl	80023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e054      	b.n	80022f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002246:	897b      	ldrh	r3, [r7, #10]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4929      	ldr	r1, [pc, #164]	@ (80022fc <I2C_MasterRequestRead+0x198>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f8cc 	bl	80023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e044      	b.n	80022f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800228a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f831 	bl	8002300 <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b2:	d103      	bne.n	80022bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e017      	b.n	80022f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80022c0:	897b      	ldrh	r3, [r7, #10]
 80022c2:	11db      	asrs	r3, r3, #7
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f003 0306 	and.w	r3, r3, #6
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f063 030e 	orn	r3, r3, #14
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4907      	ldr	r1, [pc, #28]	@ (80022fc <I2C_MasterRequestRead+0x198>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f888 	bl	80023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	00010008 	.word	0x00010008
 80022fc:	00010002 	.word	0x00010002

08002300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002310:	e048      	b.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d044      	beq.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231a:	f7fe fe17 	bl	8000f4c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d302      	bcc.n	8002330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d139      	bne.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	0c1b      	lsrs	r3, r3, #16
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10d      	bne.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x56>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	43da      	mvns	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	e00c      	b.n	8002370 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	43da      	mvns	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	4013      	ands	r3, r2
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	429a      	cmp	r2, r3
 8002374:	d116      	bne.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e023      	b.n	80023ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10d      	bne.n	80023ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	e00c      	b.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	43da      	mvns	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4013      	ands	r3, r2
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d093      	beq.n	8002312 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002402:	e071      	b.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002412:	d123      	bne.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002422:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800242c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f043 0204 	orr.w	r2, r3, #4
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e067      	b.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d041      	beq.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002464:	f7fe fd72 	bl	8000f4c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	d302      	bcc.n	800247a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d136      	bne.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10c      	bne.n	800249e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4013      	ands	r3, r2
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e00b      	b.n	80024b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e021      	b.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d10c      	bne.n	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	43da      	mvns	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e00b      	b.n	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4013      	ands	r3, r2
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f af6d 	bne.w	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002540:	e034      	b.n	80025ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f8e3 	bl	800270e <I2C_IsAcknowledgeFailed>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e034      	b.n	80025bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d028      	beq.n	80025ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7fe fcf7 	bl	8000f4c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11d      	bne.n	80025ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d016      	beq.n	80025ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e007      	b.n	80025bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b6:	2b80      	cmp	r3, #128	@ 0x80
 80025b8:	d1c3      	bne.n	8002542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025d0:	e034      	b.n	800263c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f89b 	bl	800270e <I2C_IsAcknowledgeFailed>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e034      	b.n	800264c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d028      	beq.n	800263c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7fe fcaf 	bl	8000f4c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d11d      	bne.n	800263c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d016      	beq.n	800263c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e007      	b.n	800264c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b04      	cmp	r3, #4
 8002648:	d1c3      	bne.n	80025d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002660:	e049      	b.n	80026f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	d119      	bne.n	80026a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0210 	mvn.w	r2, #16
 8002678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e030      	b.n	8002706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a4:	f7fe fc52 	bl	8000f4c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d302      	bcc.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11d      	bne.n	80026f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c4:	2b40      	cmp	r3, #64	@ 0x40
 80026c6:	d016      	beq.n	80026f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e007      	b.n	8002706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d1ae      	bne.n	8002662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002724:	d11b      	bne.n	800275e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800272e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
	...

0800276c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e272      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8087 	beq.w	800289a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800278c:	4b92      	ldr	r3, [pc, #584]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b04      	cmp	r3, #4
 8002796:	d00c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002798:	4b8f      	ldr	r3, [pc, #572]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d112      	bne.n	80027ca <HAL_RCC_OscConfig+0x5e>
 80027a4:	4b8c      	ldr	r3, [pc, #560]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b0:	d10b      	bne.n	80027ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b2:	4b89      	ldr	r3, [pc, #548]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d06c      	beq.n	8002898 <HAL_RCC_OscConfig+0x12c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d168      	bne.n	8002898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e24c      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x76>
 80027d4:	4b80      	ldr	r3, [pc, #512]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a7f      	ldr	r2, [pc, #508]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e02e      	b.n	8002840 <HAL_RCC_OscConfig+0xd4>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x98>
 80027ea:	4b7b      	ldr	r3, [pc, #492]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a7a      	ldr	r2, [pc, #488]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b78      	ldr	r3, [pc, #480]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a77      	ldr	r2, [pc, #476]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e01d      	b.n	8002840 <HAL_RCC_OscConfig+0xd4>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0xbc>
 800280e:	4b72      	ldr	r3, [pc, #456]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a71      	ldr	r2, [pc, #452]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b6f      	ldr	r3, [pc, #444]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6e      	ldr	r2, [pc, #440]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0xd4>
 8002828:	4b6b      	ldr	r3, [pc, #428]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a6a      	ldr	r2, [pc, #424]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800282e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b68      	ldr	r3, [pc, #416]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a67      	ldr	r2, [pc, #412]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800283a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fb80 	bl	8000f4c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7fe fb7c 	bl	8000f4c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	@ 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e200      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b5d      	ldr	r3, [pc, #372]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0xe4>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fb6c 	bl	8000f4c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fb68 	bl	8000f4c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1ec      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x10c>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d063      	beq.n	800296e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028a6:	4b4c      	ldr	r3, [pc, #304]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028b2:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d11c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x18c>
 80028be:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d116      	bne.n	80028f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_RCC_OscConfig+0x176>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1c0      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4939      	ldr	r1, [pc, #228]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	e03a      	b.n	800296e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002900:	4b36      	ldr	r3, [pc, #216]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fb21 	bl	8000f4c <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290e:	f7fe fb1d 	bl	8000f4c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e1a1      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4927      	ldr	r1, [pc, #156]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
 8002940:	e015      	b.n	800296e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002942:	4b26      	ldr	r3, [pc, #152]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe fb00 	bl	8000f4c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002950:	f7fe fafc 	bl	8000f4c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e180      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d03a      	beq.n	80029f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d019      	beq.n	80029b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002982:	4b17      	ldr	r3, [pc, #92]	@ (80029e0 <HAL_RCC_OscConfig+0x274>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002988:	f7fe fae0 	bl	8000f4c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002990:	f7fe fadc 	bl	8000f4c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e160      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029ae:	2001      	movs	r0, #1
 80029b0:	f000 faba 	bl	8002f28 <RCC_Delay>
 80029b4:	e01c      	b.n	80029f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <HAL_RCC_OscConfig+0x274>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029bc:	f7fe fac6 	bl	8000f4c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c2:	e00f      	b.n	80029e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c4:	f7fe fac2 	bl	8000f4c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d908      	bls.n	80029e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e146      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	42420000 	.word	0x42420000
 80029e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	4b92      	ldr	r3, [pc, #584]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e9      	bne.n	80029c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a6 	beq.w	8002b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a02:	4b8b      	ldr	r3, [pc, #556]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10d      	bne.n	8002a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b88      	ldr	r3, [pc, #544]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a87      	ldr	r2, [pc, #540]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	61d3      	str	r3, [r2, #28]
 8002a1a:	4b85      	ldr	r3, [pc, #532]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b82      	ldr	r3, [pc, #520]	@ (8002c34 <HAL_RCC_OscConfig+0x4c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d118      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a36:	4b7f      	ldr	r3, [pc, #508]	@ (8002c34 <HAL_RCC_OscConfig+0x4c8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c34 <HAL_RCC_OscConfig+0x4c8>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7fe fa83 	bl	8000f4c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7fe fa7f 	bl	8000f4c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b64      	cmp	r3, #100	@ 0x64
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e103      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	4b75      	ldr	r3, [pc, #468]	@ (8002c34 <HAL_RCC_OscConfig+0x4c8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x312>
 8002a70:	4b6f      	ldr	r3, [pc, #444]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4a6e      	ldr	r2, [pc, #440]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6213      	str	r3, [r2, #32]
 8002a7c:	e02d      	b.n	8002ada <HAL_RCC_OscConfig+0x36e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x334>
 8002a86:	4b6a      	ldr	r3, [pc, #424]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a69      	ldr	r2, [pc, #420]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	6213      	str	r3, [r2, #32]
 8002a92:	4b67      	ldr	r3, [pc, #412]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a66      	ldr	r2, [pc, #408]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	e01c      	b.n	8002ada <HAL_RCC_OscConfig+0x36e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x356>
 8002aa8:	4b61      	ldr	r3, [pc, #388]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a60      	ldr	r2, [pc, #384]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6213      	str	r3, [r2, #32]
 8002ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	e00b      	b.n	8002ada <HAL_RCC_OscConfig+0x36e>
 8002ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4a5a      	ldr	r2, [pc, #360]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	6213      	str	r3, [r2, #32]
 8002ace:	4b58      	ldr	r3, [pc, #352]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a57      	ldr	r2, [pc, #348]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	f023 0304 	bic.w	r3, r3, #4
 8002ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d015      	beq.n	8002b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fa33 	bl	8000f4c <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe fa2f 	bl	8000f4c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0b1      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	4b4b      	ldr	r3, [pc, #300]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ee      	beq.n	8002aea <HAL_RCC_OscConfig+0x37e>
 8002b0c:	e014      	b.n	8002b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fa1d 	bl	8000f4c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fa19 	bl	8000f4c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e09b      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	4b40      	ldr	r3, [pc, #256]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ee      	bne.n	8002b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4a3b      	ldr	r2, [pc, #236]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8087 	beq.w	8002c62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b54:	4b36      	ldr	r3, [pc, #216]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d061      	beq.n	8002c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d146      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b68:	4b33      	ldr	r3, [pc, #204]	@ (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f9ed 	bl	8000f4c <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe f9e9 	bl	8000f4c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e06d      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b88:	4b29      	ldr	r3, [pc, #164]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b9e:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4921      	ldr	r1, [pc, #132]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a19      	ldr	r1, [r3, #32]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	491b      	ldr	r1, [pc, #108]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe f9bd 	bl	8000f4c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe f9b9 	bl	8000f4c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e03d      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be8:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x46a>
 8002bf4:	e035      	b.n	8002c62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f9a6 	bl	8000f4c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe f9a2 	bl	8000f4c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e026      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x498>
 8002c22:	e01e      	b.n	8002c62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e019      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
 8002c38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <HAL_RCC_OscConfig+0x500>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0d0      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d910      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b67      	ldr	r3, [pc, #412]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4965      	ldr	r1, [pc, #404]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b63      	ldr	r3, [pc, #396]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0b8      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ccc:	4b59      	ldr	r3, [pc, #356]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a58      	ldr	r2, [pc, #352]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce4:	4b53      	ldr	r3, [pc, #332]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf0:	4b50      	ldr	r3, [pc, #320]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	494d      	ldr	r1, [pc, #308]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d040      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b47      	ldr	r3, [pc, #284]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d115      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e07f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b41      	ldr	r3, [pc, #260]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e073      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e06b      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4e:	4b39      	ldr	r3, [pc, #228]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4936      	ldr	r1, [pc, #216]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7fe f8f4 	bl	8000f4c <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7fe f8f0 	bl	8000f4c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e053      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 020c 	and.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1eb      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d90:	4b27      	ldr	r3, [pc, #156]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d210      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b24      	ldr	r3, [pc, #144]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 0207 	bic.w	r2, r3, #7
 8002da6:	4922      	ldr	r1, [pc, #136]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b20      	ldr	r3, [pc, #128]	@ (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e032      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4916      	ldr	r1, [pc, #88]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dea:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	490e      	ldr	r1, [pc, #56]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfe:	f000 f821 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	490a      	ldr	r1, [pc, #40]	@ (8002e38 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	5ccb      	ldrb	r3, [r1, r3]
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	4a09      	ldr	r2, [pc, #36]	@ (8002e3c <HAL_RCC_ClockConfig+0x1cc>)
 8002e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <HAL_RCC_ClockConfig+0x1d0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe f852 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08004e4c 	.word	0x08004e4c
 8002e3c:	2000000c 	.word	0x2000000c
 8002e40:	20000010 	.word	0x20000010

08002e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x30>
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x36>
 8002e72:	e027      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x98>)
 8002e76:	613b      	str	r3, [r7, #16]
      break;
 8002e78:	e027      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	0c9b      	lsrs	r3, r3, #18
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	4a17      	ldr	r2, [pc, #92]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e92:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	0c5b      	lsrs	r3, r3, #17
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea6:	fb03 f202 	mul.w	r2, r3, r2
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e004      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
      break;
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ec6:	613b      	str	r3, [r7, #16]
      break;
 8002ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eca:	693b      	ldr	r3, [r7, #16]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	007a1200 	.word	0x007a1200
 8002ee0:	08004e64 	.word	0x08004e64
 8002ee4:	08004e74 	.word	0x08004e74
 8002ee8:	003d0900 	.word	0x003d0900

08002eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef0:	4b02      	ldr	r3, [pc, #8]	@ (8002efc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	2000000c 	.word	0x2000000c

08002f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f04:	f7ff fff2 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	@ (8002f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08004e5c 	.word	0x08004e5c

08002f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f30:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <RCC_Delay+0x34>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <RCC_Delay+0x38>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0a5b      	lsrs	r3, r3, #9
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f44:	bf00      	nop
  }
  while (Delay --);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1e5a      	subs	r2, r3, #1
 8002f4a:	60fa      	str	r2, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f9      	bne.n	8002f44 <RCC_Delay+0x1c>
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	2000000c 	.word	0x2000000c
 8002f60:	10624dd3 	.word	0x10624dd3

08002f64 <millis>:

uint32_t measurement_timing_budget_us;
uint8_t address;
uint8_t I2C_SLAVE_DEVICE_ADDRESS = 0x29;

uint32_t millis(){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
	uint32_t st=HAL_GetTick();
 8002f6a:	f7fd ffef 	bl	8000f4c <HAL_GetTick>
 8002f6e:	6078      	str	r0, [r7, #4]
	return st;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <VL53L0X_SetAddress>:

void VL53L0X_SetAddress(uint8_t new_add) {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	I2C_SLAVE_DEVICE_ADDRESS = new_add;
 8002f86:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <VL53L0X_SetAddress+0x1c>)
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	7013      	strb	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000015 	.word	0x20000015

08002f9c <writeReg>:


// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	460a      	mov	r2, r1
 8002fa6:	71fb      	strb	r3, [r7, #7]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71bb      	strb	r3, [r7, #6]
	uint8_t array[2];
	array[0]=reg;
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	733b      	strb	r3, [r7, #12]
	array[1]=value;
 8002fb0:	79bb      	ldrb	r3, [r7, #6]
 8002fb2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,2,HAL_MAX_DELAY);
 8002fb4:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <writeReg+0x38>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f107 020c 	add.w	r2, r7, #12
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	4804      	ldr	r0, [pc, #16]	@ (8002fd8 <writeReg+0x3c>)
 8002fc8:	f7fe fbb2 	bl	8001730 <HAL_I2C_Master_Transmit>

}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000015 	.word	0x20000015
 8002fd8:	2000008c 	.word	0x2000008c

08002fdc <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	460a      	mov	r2, r1
 8002fe6:	71fb      	strb	r3, [r7, #7]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	80bb      	strh	r3, [r7, #4]
	uint8_t array[3];
	array[0]=reg;
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	733b      	strb	r3, [r7, #12]
	array[1]=(value >> 8) & 0xFF;
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	737b      	strb	r3, [r7, #13]
	array[2]= value  & 0xFF;
 8002ffa:	88bb      	ldrh	r3, [r7, #4]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,3,HAL_MAX_DELAY);
 8003000:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <writeReg16Bit+0x44>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	f107 020c 	add.w	r2, r7, #12
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2303      	movs	r3, #3
 8003012:	4804      	ldr	r0, [pc, #16]	@ (8003024 <writeReg16Bit+0x48>)
 8003014:	f7fe fb8c 	bl	8001730 <HAL_I2C_Master_Transmit>
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000015 	.word	0x20000015
 8003024:	2000008c 	.word	0x2000008c

08003028 <readReg>:
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,5,HAL_MAX_DELAY);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af02      	add	r7, sp, #8
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
 	uint8_t array[1];
 	uint8_t data[1];
	array[0]=reg;
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,1,HAL_MAX_DELAY);
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <readReg+0x4c>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4619      	mov	r1, r3
 800303c:	f107 020c 	add.w	r2, r7, #12
 8003040:	f04f 33ff 	mov.w	r3, #4294967295
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	2301      	movs	r3, #1
 8003048:	480b      	ldr	r0, [pc, #44]	@ (8003078 <readReg+0x50>)
 800304a:	f7fe fb71 	bl	8001730 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,data,1,HAL_MAX_DELAY);
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <readReg+0x4c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	f107 0208 	add.w	r2, r7, #8
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2301      	movs	r3, #1
 8003060:	4805      	ldr	r0, [pc, #20]	@ (8003078 <readReg+0x50>)
 8003062:	f7fe fc63 	bl	800192c <HAL_I2C_Master_Receive>
	value=data[0];
 8003066:	7a3b      	ldrb	r3, [r7, #8]
 8003068:	73fb      	strb	r3, [r7, #15]
  return value;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000015 	.word	0x20000015
 8003078:	2000008c 	.word	0x2000008c

0800307c <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af02      	add	r7, sp, #8
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
	uint16_t value;
	uint8_t array[1];
	uint8_t data[2];
	array[0]=reg;
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,1,HAL_MAX_DELAY);
 800308a:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <readReg16Bit+0x58>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	4619      	mov	r1, r3
 8003090:	f107 020c 	add.w	r2, r7, #12
 8003094:	f04f 33ff 	mov.w	r3, #4294967295
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2301      	movs	r3, #1
 800309c:	480e      	ldr	r0, [pc, #56]	@ (80030d8 <readReg16Bit+0x5c>)
 800309e:	f7fe fb47 	bl	8001730 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,data,2,HAL_MAX_DELAY);
 80030a2:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <readReg16Bit+0x58>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	f107 0208 	add.w	r2, r7, #8
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2302      	movs	r3, #2
 80030b4:	4808      	ldr	r0, [pc, #32]	@ (80030d8 <readReg16Bit+0x5c>)
 80030b6:	f7fe fc39 	bl	800192c <HAL_I2C_Master_Receive>
	//value=array[1];
	value  = (uint16_t)data[0] << 8;
 80030ba:	7a3b      	ldrb	r3, [r7, #8]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	81fb      	strh	r3, [r7, #14]
	value |=data[1];
 80030c0:	7a7b      	ldrb	r3, [r7, #9]
 80030c2:	461a      	mov	r2, r3
 80030c4:	89fb      	ldrh	r3, [r7, #14]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	81fb      	strh	r3, [r7, #14]


  return value;
 80030ca:	89fb      	ldrh	r3, [r7, #14]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000015 	.word	0x20000015
 80030d8:	2000008c 	.word	0x2000008c

080030dc <writeMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71bb      	strb	r3, [r7, #6]
  ///Wire.beginTransmission(address);
  ///Wire.write(reg);
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,reg,1,HAL_MAX_DELAY);
 80030ec:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <writeMulti+0x5c>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2301      	movs	r3, #1
 80030fe:	480f      	ldr	r0, [pc, #60]	@ (800313c <writeMulti+0x60>)
 8003100:	f7fe fb16 	bl	8001730 <HAL_I2C_Master_Transmit>

  while (count-- > 0)
 8003104:	e00e      	b.n	8003124 <writeMulti+0x48>
  {
    //Wire.write(*(src++));
	  HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,*(src++),1,HAL_MAX_DELAY);
 8003106:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <writeMulti+0x5c>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	603a      	str	r2, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2301      	movs	r3, #1
 800311e:	4807      	ldr	r0, [pc, #28]	@ (800313c <writeMulti+0x60>)
 8003120:	f7fe fb06 	bl	8001730 <HAL_I2C_Master_Transmit>
  while (count-- > 0)
 8003124:	79bb      	ldrb	r3, [r7, #6]
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	71ba      	strb	r2, [r7, #6]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1eb      	bne.n	8003106 <writeMulti+0x2a>
  }

  //last_status = Wire.endTransmission();
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000015 	.word	0x20000015
 800313c:	2000008c 	.word	0x2000008c

08003140 <readMulti>:

void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 8003140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003144:	b087      	sub	sp, #28
 8003146:	af02      	add	r7, sp, #8
 8003148:	4603      	mov	r3, r0
 800314a:	6039      	str	r1, [r7, #0]
 800314c:	71fb      	strb	r3, [r7, #7]
 800314e:	4613      	mov	r3, r2
 8003150:	71bb      	strb	r3, [r7, #6]
 8003152:	466b      	mov	r3, sp
 8003154:	461e      	mov	r6, r3
	uint8_t array[count];
 8003156:	79b9      	ldrb	r1, [r7, #6]
 8003158:	460b      	mov	r3, r1
 800315a:	3b01      	subs	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	b2cb      	uxtb	r3, r1
 8003160:	2200      	movs	r2, #0
 8003162:	4698      	mov	r8, r3
 8003164:	4691      	mov	r9, r2
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800317a:	b2cb      	uxtb	r3, r1
 800317c:	2200      	movs	r2, #0
 800317e:	461c      	mov	r4, r3
 8003180:	4615      	mov	r5, r2
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	00eb      	lsls	r3, r5, #3
 800318c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003190:	00e2      	lsls	r2, r4, #3
 8003192:	460b      	mov	r3, r1
 8003194:	3307      	adds	r3, #7
 8003196:	08db      	lsrs	r3, r3, #3
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	ebad 0d03 	sub.w	sp, sp, r3
 800319e:	ab02      	add	r3, sp, #8
 80031a0:	3300      	adds	r3, #0
 80031a2:	60bb      	str	r3, [r7, #8]
	array[0]=reg;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	79fa      	ldrb	r2, [r7, #7]
 80031a8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array[0],1,HAL_MAX_DELAY);
 80031aa:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <readMulti+0xc4>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2301      	movs	r3, #1
 80031be:	4812      	ldr	r0, [pc, #72]	@ (8003208 <readMulti+0xc8>)
 80031c0:	f7fe fab6 	bl	8001730 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1,I2C_SLAVE_DEVICE_ADDRESS,array,count,HAL_MAX_DELAY);
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <readMulti+0xc4>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	79bb      	ldrb	r3, [r7, #6]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f04f 32ff 	mov.w	r2, #4294967295
 80031d2:	9200      	str	r2, [sp, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	480c      	ldr	r0, [pc, #48]	@ (8003208 <readMulti+0xc8>)
 80031d8:	f7fe fba8 	bl	800192c <HAL_I2C_Master_Receive>
  while (count-- > 0)
 80031dc:	e007      	b.n	80031ee <readMulti+0xae>
  {
    *(dst++) = array[count-1];
 80031de:	79bb      	ldrb	r3, [r7, #6]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	1c59      	adds	r1, r3, #1
 80031e6:	6039      	str	r1, [r7, #0]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	5c8a      	ldrb	r2, [r1, r2]
 80031ec:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	71ba      	strb	r2, [r7, #6]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f2      	bne.n	80031de <readMulti+0x9e>
 80031f8:	46b5      	mov	sp, r6
  }
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003204:	20000015 	.word	0x20000015
 8003208:	2000008c 	.word	0x2000008c

0800320c <setAddress>:


void setAddress(uint8_t new_addr)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 8003216:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <setAddress+0x2c>)
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003220:	b2db      	uxtb	r3, r3
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f7ff feb9 	bl	8002f9c <writeReg>
  address = new_addr;
 800322a:	4a04      	ldr	r2, [pc, #16]	@ (800323c <setAddress+0x30>)
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	7013      	strb	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000015 	.word	0x20000015
 800323c:	200000ec 	.word	0x200000ec

08003240 <init>:


bool init(bool io_2v8)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <init+0x26>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
    readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8003250:	2089      	movs	r0, #137	@ 0x89
 8003252:	f7ff fee9 	bl	8003028 <readReg>
 8003256:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	4619      	mov	r1, r3
 8003260:	2089      	movs	r0, #137	@ 0x89
 8003262:	f7ff fe9b 	bl	8002f9c <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8003266:	2100      	movs	r1, #0
 8003268:	2088      	movs	r0, #136	@ 0x88
 800326a:	f7ff fe97 	bl	8002f9c <writeReg>

  writeReg(0x80, 0x01);
 800326e:	2101      	movs	r1, #1
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	f7ff fe93 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x01);
 8003276:	2101      	movs	r1, #1
 8003278:	20ff      	movs	r0, #255	@ 0xff
 800327a:	f7ff fe8f 	bl	8002f9c <writeReg>
  writeReg(0x00, 0x00);
 800327e:	2100      	movs	r1, #0
 8003280:	2000      	movs	r0, #0
 8003282:	f7ff fe8b 	bl	8002f9c <writeReg>
  stop_variable = readReg(0x91);
 8003286:	2091      	movs	r0, #145	@ 0x91
 8003288:	f7ff fece 	bl	8003028 <readReg>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	4b3b      	ldr	r3, [pc, #236]	@ (8003380 <init+0x140>)
 8003292:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8003294:	2101      	movs	r1, #1
 8003296:	2000      	movs	r0, #0
 8003298:	f7ff fe80 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x00);
 800329c:	2100      	movs	r1, #0
 800329e:	20ff      	movs	r0, #255	@ 0xff
 80032a0:	f7ff fe7c 	bl	8002f9c <writeReg>
  writeReg(0x80, 0x00);
 80032a4:	2100      	movs	r1, #0
 80032a6:	2080      	movs	r0, #128	@ 0x80
 80032a8:	f7ff fe78 	bl	8002f9c <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80032ac:	2060      	movs	r0, #96	@ 0x60
 80032ae:	f7ff febb 	bl	8003028 <readReg>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f043 0312 	orr.w	r3, r3, #18
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4619      	mov	r1, r3
 80032bc:	2060      	movs	r0, #96	@ 0x60
 80032be:	f7ff fe6d 	bl	8002f9c <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80032c2:	f04f 507a 	mov.w	r0, #1048576000	@ 0x3e800000
 80032c6:	f000 fa03 	bl	80036d0 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80032ca:	21ff      	movs	r1, #255	@ 0xff
 80032cc:	2001      	movs	r0, #1
 80032ce:	f7ff fe65 	bl	8002f9c <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80032d2:	f107 0213 	add.w	r2, r7, #19
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fbd9 	bl	8003a94 <getSpadInfo>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <init+0xac>
 80032e8:	2300      	movs	r3, #0
 80032ea:	e1ea      	b.n	80036c2 <init+0x482>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	2206      	movs	r2, #6
 80032f2:	4619      	mov	r1, r3
 80032f4:	20b0      	movs	r0, #176	@ 0xb0
 80032f6:	f7ff ff23 	bl	8003140 <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80032fa:	2101      	movs	r1, #1
 80032fc:	20ff      	movs	r0, #255	@ 0xff
 80032fe:	f7ff fe4d 	bl	8002f9c <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8003302:	2100      	movs	r1, #0
 8003304:	204f      	movs	r0, #79	@ 0x4f
 8003306:	f7ff fe49 	bl	8002f9c <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 800330a:	212c      	movs	r1, #44	@ 0x2c
 800330c:	204e      	movs	r0, #78	@ 0x4e
 800330e:	f7ff fe45 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x00);
 8003312:	2100      	movs	r1, #0
 8003314:	20ff      	movs	r0, #255	@ 0xff
 8003316:	f7ff fe41 	bl	8002f9c <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 800331a:	21b4      	movs	r1, #180	@ 0xb4
 800331c:	20b6      	movs	r0, #182	@ 0xb6
 800331e:	f7ff fe3d 	bl	8002f9c <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <init+0xec>
 8003328:	230c      	movs	r3, #12
 800332a:	e000      	b.n	800332e <init+0xee>
 800332c:	2300      	movs	r3, #0
 800332e:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	75bb      	strb	r3, [r7, #22]
 8003338:	e03b      	b.n	80033b2 <init+0x172>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 800333a:	7dba      	ldrb	r2, [r7, #22]
 800333c:	7d7b      	ldrb	r3, [r7, #21]
 800333e:	429a      	cmp	r2, r3
 8003340:	d303      	bcc.n	800334a <init+0x10a>
 8003342:	7d3b      	ldrb	r3, [r7, #20]
 8003344:	7dfa      	ldrb	r2, [r7, #23]
 8003346:	429a      	cmp	r2, r3
 8003348:	d11c      	bne.n	8003384 <init+0x144>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 800334a:	7dbb      	ldrb	r3, [r7, #22]
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	b2d8      	uxtb	r0, r3
 8003350:	4603      	mov	r3, r0
 8003352:	3318      	adds	r3, #24
 8003354:	443b      	add	r3, r7
 8003356:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800335a:	b25a      	sxtb	r2, r3
 800335c:	7dbb      	ldrb	r3, [r7, #22]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	2101      	movs	r1, #1
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	b25b      	sxtb	r3, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	b25b      	sxtb	r3, r3
 800336e:	4013      	ands	r3, r2
 8003370:	b25a      	sxtb	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	3318      	adds	r3, #24
 8003378:	443b      	add	r3, r7
 800337a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800337e:	e015      	b.n	80033ac <init+0x16c>
 8003380:	20000000 	.word	0x20000000
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8003384:	7dbb      	ldrb	r3, [r7, #22]
 8003386:	08db      	lsrs	r3, r3, #3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3318      	adds	r3, #24
 800338c:	443b      	add	r3, r7
 800338e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003392:	461a      	mov	r2, r3
 8003394:	7dbb      	ldrb	r3, [r7, #22]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	fa42 f303 	asr.w	r3, r2, r3
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <init+0x16c>
    {
      spads_enabled++;
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	3301      	adds	r3, #1
 80033aa:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 80033ac:	7dbb      	ldrb	r3, [r7, #22]
 80033ae:	3301      	adds	r3, #1
 80033b0:	75bb      	strb	r3, [r7, #22]
 80033b2:	7dbb      	ldrb	r3, [r7, #22]
 80033b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80033b6:	d9c0      	bls.n	800333a <init+0xfa>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	2206      	movs	r2, #6
 80033be:	4619      	mov	r1, r3
 80033c0:	20b0      	movs	r0, #176	@ 0xb0
 80033c2:	f7ff fe8b 	bl	80030dc <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80033c6:	2101      	movs	r1, #1
 80033c8:	20ff      	movs	r0, #255	@ 0xff
 80033ca:	f7ff fde7 	bl	8002f9c <writeReg>
  writeReg(0x00, 0x00);
 80033ce:	2100      	movs	r1, #0
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7ff fde3 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x00);
 80033d6:	2100      	movs	r1, #0
 80033d8:	20ff      	movs	r0, #255	@ 0xff
 80033da:	f7ff fddf 	bl	8002f9c <writeReg>
  writeReg(0x09, 0x00);
 80033de:	2100      	movs	r1, #0
 80033e0:	2009      	movs	r0, #9
 80033e2:	f7ff fddb 	bl	8002f9c <writeReg>
  writeReg(0x10, 0x00);
 80033e6:	2100      	movs	r1, #0
 80033e8:	2010      	movs	r0, #16
 80033ea:	f7ff fdd7 	bl	8002f9c <writeReg>
  writeReg(0x11, 0x00);
 80033ee:	2100      	movs	r1, #0
 80033f0:	2011      	movs	r0, #17
 80033f2:	f7ff fdd3 	bl	8002f9c <writeReg>

  writeReg(0x24, 0x01);
 80033f6:	2101      	movs	r1, #1
 80033f8:	2024      	movs	r0, #36	@ 0x24
 80033fa:	f7ff fdcf 	bl	8002f9c <writeReg>
  writeReg(0x25, 0xFF);
 80033fe:	21ff      	movs	r1, #255	@ 0xff
 8003400:	2025      	movs	r0, #37	@ 0x25
 8003402:	f7ff fdcb 	bl	8002f9c <writeReg>
  writeReg(0x75, 0x00);
 8003406:	2100      	movs	r1, #0
 8003408:	2075      	movs	r0, #117	@ 0x75
 800340a:	f7ff fdc7 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x01);
 800340e:	2101      	movs	r1, #1
 8003410:	20ff      	movs	r0, #255	@ 0xff
 8003412:	f7ff fdc3 	bl	8002f9c <writeReg>
  writeReg(0x4E, 0x2C);
 8003416:	212c      	movs	r1, #44	@ 0x2c
 8003418:	204e      	movs	r0, #78	@ 0x4e
 800341a:	f7ff fdbf 	bl	8002f9c <writeReg>
  writeReg(0x48, 0x00);
 800341e:	2100      	movs	r1, #0
 8003420:	2048      	movs	r0, #72	@ 0x48
 8003422:	f7ff fdbb 	bl	8002f9c <writeReg>
  writeReg(0x30, 0x20);
 8003426:	2120      	movs	r1, #32
 8003428:	2030      	movs	r0, #48	@ 0x30
 800342a:	f7ff fdb7 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x00);
 800342e:	2100      	movs	r1, #0
 8003430:	20ff      	movs	r0, #255	@ 0xff
 8003432:	f7ff fdb3 	bl	8002f9c <writeReg>
  writeReg(0x30, 0x09);
 8003436:	2109      	movs	r1, #9
 8003438:	2030      	movs	r0, #48	@ 0x30
 800343a:	f7ff fdaf 	bl	8002f9c <writeReg>
  writeReg(0x54, 0x00);
 800343e:	2100      	movs	r1, #0
 8003440:	2054      	movs	r0, #84	@ 0x54
 8003442:	f7ff fdab 	bl	8002f9c <writeReg>
  writeReg(0x31, 0x04);
 8003446:	2104      	movs	r1, #4
 8003448:	2031      	movs	r0, #49	@ 0x31
 800344a:	f7ff fda7 	bl	8002f9c <writeReg>
  writeReg(0x32, 0x03);
 800344e:	2103      	movs	r1, #3
 8003450:	2032      	movs	r0, #50	@ 0x32
 8003452:	f7ff fda3 	bl	8002f9c <writeReg>
  writeReg(0x40, 0x83);
 8003456:	2183      	movs	r1, #131	@ 0x83
 8003458:	2040      	movs	r0, #64	@ 0x40
 800345a:	f7ff fd9f 	bl	8002f9c <writeReg>
  writeReg(0x46, 0x25);
 800345e:	2125      	movs	r1, #37	@ 0x25
 8003460:	2046      	movs	r0, #70	@ 0x46
 8003462:	f7ff fd9b 	bl	8002f9c <writeReg>
  writeReg(0x60, 0x00);
 8003466:	2100      	movs	r1, #0
 8003468:	2060      	movs	r0, #96	@ 0x60
 800346a:	f7ff fd97 	bl	8002f9c <writeReg>
  writeReg(0x27, 0x00);
 800346e:	2100      	movs	r1, #0
 8003470:	2027      	movs	r0, #39	@ 0x27
 8003472:	f7ff fd93 	bl	8002f9c <writeReg>
  writeReg(0x50, 0x06);
 8003476:	2106      	movs	r1, #6
 8003478:	2050      	movs	r0, #80	@ 0x50
 800347a:	f7ff fd8f 	bl	8002f9c <writeReg>
  writeReg(0x51, 0x00);
 800347e:	2100      	movs	r1, #0
 8003480:	2051      	movs	r0, #81	@ 0x51
 8003482:	f7ff fd8b 	bl	8002f9c <writeReg>
  writeReg(0x52, 0x96);
 8003486:	2196      	movs	r1, #150	@ 0x96
 8003488:	2052      	movs	r0, #82	@ 0x52
 800348a:	f7ff fd87 	bl	8002f9c <writeReg>
  writeReg(0x56, 0x08);
 800348e:	2108      	movs	r1, #8
 8003490:	2056      	movs	r0, #86	@ 0x56
 8003492:	f7ff fd83 	bl	8002f9c <writeReg>
  writeReg(0x57, 0x30);
 8003496:	2130      	movs	r1, #48	@ 0x30
 8003498:	2057      	movs	r0, #87	@ 0x57
 800349a:	f7ff fd7f 	bl	8002f9c <writeReg>
  writeReg(0x61, 0x00);
 800349e:	2100      	movs	r1, #0
 80034a0:	2061      	movs	r0, #97	@ 0x61
 80034a2:	f7ff fd7b 	bl	8002f9c <writeReg>
  writeReg(0x62, 0x00);
 80034a6:	2100      	movs	r1, #0
 80034a8:	2062      	movs	r0, #98	@ 0x62
 80034aa:	f7ff fd77 	bl	8002f9c <writeReg>
  writeReg(0x64, 0x00);
 80034ae:	2100      	movs	r1, #0
 80034b0:	2064      	movs	r0, #100	@ 0x64
 80034b2:	f7ff fd73 	bl	8002f9c <writeReg>
  writeReg(0x65, 0x00);
 80034b6:	2100      	movs	r1, #0
 80034b8:	2065      	movs	r0, #101	@ 0x65
 80034ba:	f7ff fd6f 	bl	8002f9c <writeReg>
  writeReg(0x66, 0xA0);
 80034be:	21a0      	movs	r1, #160	@ 0xa0
 80034c0:	2066      	movs	r0, #102	@ 0x66
 80034c2:	f7ff fd6b 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x01);
 80034c6:	2101      	movs	r1, #1
 80034c8:	20ff      	movs	r0, #255	@ 0xff
 80034ca:	f7ff fd67 	bl	8002f9c <writeReg>
  writeReg(0x22, 0x32);
 80034ce:	2132      	movs	r1, #50	@ 0x32
 80034d0:	2022      	movs	r0, #34	@ 0x22
 80034d2:	f7ff fd63 	bl	8002f9c <writeReg>
  writeReg(0x47, 0x14);
 80034d6:	2114      	movs	r1, #20
 80034d8:	2047      	movs	r0, #71	@ 0x47
 80034da:	f7ff fd5f 	bl	8002f9c <writeReg>
  writeReg(0x49, 0xFF);
 80034de:	21ff      	movs	r1, #255	@ 0xff
 80034e0:	2049      	movs	r0, #73	@ 0x49
 80034e2:	f7ff fd5b 	bl	8002f9c <writeReg>
  writeReg(0x4A, 0x00);
 80034e6:	2100      	movs	r1, #0
 80034e8:	204a      	movs	r0, #74	@ 0x4a
 80034ea:	f7ff fd57 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x00);
 80034ee:	2100      	movs	r1, #0
 80034f0:	20ff      	movs	r0, #255	@ 0xff
 80034f2:	f7ff fd53 	bl	8002f9c <writeReg>
  writeReg(0x7A, 0x0A);
 80034f6:	210a      	movs	r1, #10
 80034f8:	207a      	movs	r0, #122	@ 0x7a
 80034fa:	f7ff fd4f 	bl	8002f9c <writeReg>
  writeReg(0x7B, 0x00);
 80034fe:	2100      	movs	r1, #0
 8003500:	207b      	movs	r0, #123	@ 0x7b
 8003502:	f7ff fd4b 	bl	8002f9c <writeReg>
  writeReg(0x78, 0x21);
 8003506:	2121      	movs	r1, #33	@ 0x21
 8003508:	2078      	movs	r0, #120	@ 0x78
 800350a:	f7ff fd47 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x01);
 800350e:	2101      	movs	r1, #1
 8003510:	20ff      	movs	r0, #255	@ 0xff
 8003512:	f7ff fd43 	bl	8002f9c <writeReg>
  writeReg(0x23, 0x34);
 8003516:	2134      	movs	r1, #52	@ 0x34
 8003518:	2023      	movs	r0, #35	@ 0x23
 800351a:	f7ff fd3f 	bl	8002f9c <writeReg>
  writeReg(0x42, 0x00);
 800351e:	2100      	movs	r1, #0
 8003520:	2042      	movs	r0, #66	@ 0x42
 8003522:	f7ff fd3b 	bl	8002f9c <writeReg>
  writeReg(0x44, 0xFF);
 8003526:	21ff      	movs	r1, #255	@ 0xff
 8003528:	2044      	movs	r0, #68	@ 0x44
 800352a:	f7ff fd37 	bl	8002f9c <writeReg>
  writeReg(0x45, 0x26);
 800352e:	2126      	movs	r1, #38	@ 0x26
 8003530:	2045      	movs	r0, #69	@ 0x45
 8003532:	f7ff fd33 	bl	8002f9c <writeReg>
  writeReg(0x46, 0x05);
 8003536:	2105      	movs	r1, #5
 8003538:	2046      	movs	r0, #70	@ 0x46
 800353a:	f7ff fd2f 	bl	8002f9c <writeReg>
  writeReg(0x40, 0x40);
 800353e:	2140      	movs	r1, #64	@ 0x40
 8003540:	2040      	movs	r0, #64	@ 0x40
 8003542:	f7ff fd2b 	bl	8002f9c <writeReg>
  writeReg(0x0E, 0x06);
 8003546:	2106      	movs	r1, #6
 8003548:	200e      	movs	r0, #14
 800354a:	f7ff fd27 	bl	8002f9c <writeReg>
  writeReg(0x20, 0x1A);
 800354e:	211a      	movs	r1, #26
 8003550:	2020      	movs	r0, #32
 8003552:	f7ff fd23 	bl	8002f9c <writeReg>
  writeReg(0x43, 0x40);
 8003556:	2140      	movs	r1, #64	@ 0x40
 8003558:	2043      	movs	r0, #67	@ 0x43
 800355a:	f7ff fd1f 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x00);
 800355e:	2100      	movs	r1, #0
 8003560:	20ff      	movs	r0, #255	@ 0xff
 8003562:	f7ff fd1b 	bl	8002f9c <writeReg>
  writeReg(0x34, 0x03);
 8003566:	2103      	movs	r1, #3
 8003568:	2034      	movs	r0, #52	@ 0x34
 800356a:	f7ff fd17 	bl	8002f9c <writeReg>
  writeReg(0x35, 0x44);
 800356e:	2144      	movs	r1, #68	@ 0x44
 8003570:	2035      	movs	r0, #53	@ 0x35
 8003572:	f7ff fd13 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x01);
 8003576:	2101      	movs	r1, #1
 8003578:	20ff      	movs	r0, #255	@ 0xff
 800357a:	f7ff fd0f 	bl	8002f9c <writeReg>
  writeReg(0x31, 0x04);
 800357e:	2104      	movs	r1, #4
 8003580:	2031      	movs	r0, #49	@ 0x31
 8003582:	f7ff fd0b 	bl	8002f9c <writeReg>
  writeReg(0x4B, 0x09);
 8003586:	2109      	movs	r1, #9
 8003588:	204b      	movs	r0, #75	@ 0x4b
 800358a:	f7ff fd07 	bl	8002f9c <writeReg>
  writeReg(0x4C, 0x05);
 800358e:	2105      	movs	r1, #5
 8003590:	204c      	movs	r0, #76	@ 0x4c
 8003592:	f7ff fd03 	bl	8002f9c <writeReg>
  writeReg(0x4D, 0x04);
 8003596:	2104      	movs	r1, #4
 8003598:	204d      	movs	r0, #77	@ 0x4d
 800359a:	f7ff fcff 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x00);
 800359e:	2100      	movs	r1, #0
 80035a0:	20ff      	movs	r0, #255	@ 0xff
 80035a2:	f7ff fcfb 	bl	8002f9c <writeReg>
  writeReg(0x44, 0x00);
 80035a6:	2100      	movs	r1, #0
 80035a8:	2044      	movs	r0, #68	@ 0x44
 80035aa:	f7ff fcf7 	bl	8002f9c <writeReg>
  writeReg(0x45, 0x20);
 80035ae:	2120      	movs	r1, #32
 80035b0:	2045      	movs	r0, #69	@ 0x45
 80035b2:	f7ff fcf3 	bl	8002f9c <writeReg>
  writeReg(0x47, 0x08);
 80035b6:	2108      	movs	r1, #8
 80035b8:	2047      	movs	r0, #71	@ 0x47
 80035ba:	f7ff fcef 	bl	8002f9c <writeReg>
  writeReg(0x48, 0x28);
 80035be:	2128      	movs	r1, #40	@ 0x28
 80035c0:	2048      	movs	r0, #72	@ 0x48
 80035c2:	f7ff fceb 	bl	8002f9c <writeReg>
  writeReg(0x67, 0x00);
 80035c6:	2100      	movs	r1, #0
 80035c8:	2067      	movs	r0, #103	@ 0x67
 80035ca:	f7ff fce7 	bl	8002f9c <writeReg>
  writeReg(0x70, 0x04);
 80035ce:	2104      	movs	r1, #4
 80035d0:	2070      	movs	r0, #112	@ 0x70
 80035d2:	f7ff fce3 	bl	8002f9c <writeReg>
  writeReg(0x71, 0x01);
 80035d6:	2101      	movs	r1, #1
 80035d8:	2071      	movs	r0, #113	@ 0x71
 80035da:	f7ff fcdf 	bl	8002f9c <writeReg>
  writeReg(0x72, 0xFE);
 80035de:	21fe      	movs	r1, #254	@ 0xfe
 80035e0:	2072      	movs	r0, #114	@ 0x72
 80035e2:	f7ff fcdb 	bl	8002f9c <writeReg>
  writeReg(0x76, 0x00);
 80035e6:	2100      	movs	r1, #0
 80035e8:	2076      	movs	r0, #118	@ 0x76
 80035ea:	f7ff fcd7 	bl	8002f9c <writeReg>
  writeReg(0x77, 0x00);
 80035ee:	2100      	movs	r1, #0
 80035f0:	2077      	movs	r0, #119	@ 0x77
 80035f2:	f7ff fcd3 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x01);
 80035f6:	2101      	movs	r1, #1
 80035f8:	20ff      	movs	r0, #255	@ 0xff
 80035fa:	f7ff fccf 	bl	8002f9c <writeReg>
  writeReg(0x0D, 0x01);
 80035fe:	2101      	movs	r1, #1
 8003600:	200d      	movs	r0, #13
 8003602:	f7ff fccb 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x00);
 8003606:	2100      	movs	r1, #0
 8003608:	20ff      	movs	r0, #255	@ 0xff
 800360a:	f7ff fcc7 	bl	8002f9c <writeReg>
  writeReg(0x80, 0x01);
 800360e:	2101      	movs	r1, #1
 8003610:	2080      	movs	r0, #128	@ 0x80
 8003612:	f7ff fcc3 	bl	8002f9c <writeReg>
  writeReg(0x01, 0xF8);
 8003616:	21f8      	movs	r1, #248	@ 0xf8
 8003618:	2001      	movs	r0, #1
 800361a:	f7ff fcbf 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x01);
 800361e:	2101      	movs	r1, #1
 8003620:	20ff      	movs	r0, #255	@ 0xff
 8003622:	f7ff fcbb 	bl	8002f9c <writeReg>
  writeReg(0x8E, 0x01);
 8003626:	2101      	movs	r1, #1
 8003628:	208e      	movs	r0, #142	@ 0x8e
 800362a:	f7ff fcb7 	bl	8002f9c <writeReg>
  writeReg(0x00, 0x01);
 800362e:	2101      	movs	r1, #1
 8003630:	2000      	movs	r0, #0
 8003632:	f7ff fcb3 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x00);
 8003636:	2100      	movs	r1, #0
 8003638:	20ff      	movs	r0, #255	@ 0xff
 800363a:	f7ff fcaf 	bl	8002f9c <writeReg>
  writeReg(0x80, 0x00);
 800363e:	2100      	movs	r1, #0
 8003640:	2080      	movs	r0, #128	@ 0x80
 8003642:	f7ff fcab 	bl	8002f9c <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8003646:	2104      	movs	r1, #4
 8003648:	200a      	movs	r0, #10
 800364a:	f7ff fca7 	bl	8002f9c <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800364e:	2084      	movs	r0, #132	@ 0x84
 8003650:	f7ff fcea 	bl	8003028 <readReg>
 8003654:	4603      	mov	r3, r0
 8003656:	f023 0310 	bic.w	r3, r3, #16
 800365a:	b2db      	uxtb	r3, r3
 800365c:	4619      	mov	r1, r3
 800365e:	2084      	movs	r0, #132	@ 0x84
 8003660:	f7ff fc9c 	bl	8002f9c <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8003664:	2101      	movs	r1, #1
 8003666:	200b      	movs	r0, #11
 8003668:	f7ff fc98 	bl	8002f9c <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 800366c:	f000 f8fc 	bl	8003868 <getMeasurementTimingBudget>
 8003670:	4603      	mov	r3, r0
 8003672:	4a16      	ldr	r2, [pc, #88]	@ (80036cc <init+0x48c>)
 8003674:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8003676:	21e8      	movs	r1, #232	@ 0xe8
 8003678:	2001      	movs	r0, #1
 800367a:	f7ff fc8f 	bl	8002f9c <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 800367e:	4b13      	ldr	r3, [pc, #76]	@ (80036cc <init+0x48c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f858 	bl	8003738 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8003688:	2101      	movs	r1, #1
 800368a:	2001      	movs	r0, #1
 800368c:	f7ff fc86 	bl	8002f9c <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 8003690:	2040      	movs	r0, #64	@ 0x40
 8003692:	f000 fb99 	bl	8003dc8 <performSingleRefCalibration>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <init+0x460>
 800369c:	2300      	movs	r3, #0
 800369e:	e010      	b.n	80036c2 <init+0x482>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80036a0:	2102      	movs	r1, #2
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7ff fc7a 	bl	8002f9c <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80036a8:	2000      	movs	r0, #0
 80036aa:	f000 fb8d 	bl	8003dc8 <performSingleRefCalibration>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <init+0x478>
 80036b4:	2300      	movs	r3, #0
 80036b6:	e004      	b.n	80036c2 <init+0x482>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80036b8:	21e8      	movs	r1, #232	@ 0xe8
 80036ba:	2001      	movs	r0, #1
 80036bc:	f7ff fc6e 	bl	8002f9c <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 80036c0:	2301      	movs	r3, #1
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200000e8 	.word	0x200000e8

080036d0 <setSignalRateLimit>:

bool setSignalRateLimit(float limit_Mcps)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fd f919 	bl	8000914 <__aeabi_fcmplt>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <setSignalRateLimit+0x2e>
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fc fe95 	bl	8000418 <__aeabi_f2d>
 80036ee:	a310      	add	r3, pc, #64	@ (adr r3, 8003730 <setSignalRateLimit+0x60>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f7fc ff66 	bl	80005c4 <__aeabi_dcmpgt>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <setSignalRateLimit+0x32>
 80036fe:	2300      	movs	r3, #0
 8003700:	e00f      	b.n	8003722 <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8003702:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fc ff66 	bl	80005d8 <__aeabi_fmul>
 800370c:	4603      	mov	r3, r0
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd f928 	bl	8000964 <__aeabi_f2uiz>
 8003714:	4603      	mov	r3, r0
 8003716:	b29b      	uxth	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	2044      	movs	r0, #68	@ 0x44
 800371c:	f7ff fc5e 	bl	8002fdc <writeReg16Bit>
  return true;
 8003720:	2301      	movs	r3, #1
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	f3af 8000 	nop.w
 8003730:	0a3d70a4 	.word	0x0a3d70a4
 8003734:	407fffd7 	.word	0x407fffd7

08003738 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b092      	sub	sp, #72	@ 0x48
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	struct SequenceStepEnables enables;
	struct SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8003740:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8003744:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 8003748:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800374c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 800374e:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8003752:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 8003754:	f240 234e 	movw	r3, #590	@ 0x24e
 8003758:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 800375a:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800375e:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 8003760:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8003764:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 8003766:	f240 2326 	movw	r3, #550	@ 0x226
 800376a:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 800376c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003770:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	429a      	cmp	r2, r3
 8003778:	d201      	bcs.n	800377e <setMeasurementTimingBudget+0x46>
 800377a:	2300      	movs	r3, #0
 800377c:	e06e      	b.n	800385c <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 800377e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003782:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003784:	4413      	add	r3, r2
 8003786:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 8003788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f9f9 	bl	8003b84 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8003792:	f107 020c 	add.w	r2, r7, #12
 8003796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fa23 	bl	8003be8 <getSequenceStepTimeouts>

  if (enables.tcc)
 80037a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80037ae:	4413      	add	r3, r2
 80037b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037b2:	4413      	add	r3, r2
 80037b4:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 80037b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80037c2:	4413      	add	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c8:	4413      	add	r3, r2
 80037ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80037cc:	e009      	b.n	80037e2 <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 80037ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80037da:	4413      	add	r3, r2
 80037dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037de:	4413      	add	r3, r2
 80037e0:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 80037e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037ee:	4413      	add	r3, r2
 80037f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037f2:	4413      	add	r3, r2
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 80037f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d02d      	beq.n	800385a <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 80037fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003800:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003802:	4413      	add	r3, r2
 8003804:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8003806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d901      	bls.n	8003812 <setMeasurementTimingBudget+0xda>
    {
      // "Requested timeout too big."
      return false;
 800380e:	2300      	movs	r3, #0
 8003810:	e024      	b.n	800385c <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 800381a:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 800381c:	b2db      	uxtb	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003822:	f000 faab 	bl	8003d7c <timeoutMicrosecondsToMclks>
 8003826:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8003828:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 800382c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8003834:	8a7a      	ldrh	r2, [r7, #18]
 8003836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800383a:	4413      	add	r3, r2
 800383c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8003840:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fa47 	bl	8003cd8 <encodeTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	4619      	mov	r1, r3
 800384e:	2071      	movs	r0, #113	@ 0x71
 8003850:	f7ff fbc4 	bl	8002fdc <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8003854:	4a03      	ldr	r2, [pc, #12]	@ (8003864 <setMeasurementTimingBudget+0x12c>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6013      	str	r3, [r2, #0]
  }
  return true;
 800385a:	2301      	movs	r3, #1
}
 800385c:	4618      	mov	r0, r3
 800385e:	3748      	adds	r7, #72	@ 0x48
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200000e8 	.word	0x200000e8

08003868 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	@ 0x30
 800386c:	af00      	add	r7, sp, #0
	struct SequenceStepEnables enables;
	struct SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800386e:	f240 7376 	movw	r3, #1910	@ 0x776
 8003872:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t const EndOverhead        = 960;
 8003874:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003878:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t const MsrcOverhead       = 660;
 800387a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800387e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const TccOverhead        = 590;
 8003880:	f240 234e 	movw	r3, #590	@ 0x24e
 8003884:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t const DssOverhead        = 690;
 8003886:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800388a:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t const PreRangeOverhead   = 660;
 800388c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8003890:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8003892:	f240 2326 	movw	r3, #550	@ 0x226
 8003896:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8003898:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800389a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800389c:	4413      	add	r3, r2
 800389e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 80038a0:	f107 0318 	add.w	r3, r7, #24
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f96d 	bl	8003b84 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 80038aa:	463a      	mov	r2, r7
 80038ac:	f107 0318 	add.w	r3, r7, #24
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f998 	bl	8003be8 <getSequenceStepTimeouts>

  if (enables.tcc)
 80038b8:	7e3b      	ldrb	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <getMeasurementTimingBudget+0x62>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038c2:	4413      	add	r3, r2
 80038c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c6:	4413      	add	r3, r2
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 80038ca:	7ebb      	ldrb	r3, [r7, #26]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <getMeasurementTimingBudget+0x78>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80038d4:	4413      	add	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038da:	4413      	add	r3, r2
 80038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038de:	e008      	b.n	80038f2 <getMeasurementTimingBudget+0x8a>
  }
  else if (enables.msrc)
 80038e0:	7e7b      	ldrb	r3, [r7, #25]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80038ea:	4413      	add	r3, r2
 80038ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ee:	4413      	add	r3, r2
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 80038f2:	7efb      	ldrb	r3, [r7, #27]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <getMeasurementTimingBudget+0x9c>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	8c3b      	ldrh	r3, [r7, #32]
 80038fc:	4413      	add	r3, r2
 80038fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003900:	4413      	add	r3, r2
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 8003904:	7f3b      	ldrb	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <getMeasurementTimingBudget+0xae>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	8bfb      	ldrh	r3, [r7, #30]
 800390e:	4413      	add	r3, r2
 8003910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003912:	4413      	add	r3, r2
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 8003916:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <getMeasurementTimingBudget+0xc0>)
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	6013      	str	r3, [r2, #0]
  return budget_us;
 800391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800391e:	4618      	mov	r0, r3
 8003920:	3730      	adds	r7, #48	@ 0x30
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200000e8 	.word	0x200000e8

0800392c <getVcselPulsePeriod>:


// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 800393c:	2050      	movs	r0, #80	@ 0x50
 800393e:	f7ff fb73 	bl	8003028 <readReg>
 8003942:	4603      	mov	r3, r0
 8003944:	3301      	adds	r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e00c      	b.n	8003968 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d108      	bne.n	8003966 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8003954:	2070      	movs	r0, #112	@ 0x70
 8003956:	f7ff fb67 	bl	8003028 <readReg>
 800395a:	4603      	mov	r3, r0
 800395c:	3301      	adds	r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	b2db      	uxtb	r3, r3
 8003964:	e000      	b.n	8003968 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; }
 8003966:	23ff      	movs	r3, #255	@ 0xff
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t readRangeContinuousMillimeters(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
  startTimeout();
 8003976:	f7ff faf5 	bl	8002f64 <millis>
 800397a:	4603      	mov	r3, r0
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b17      	ldr	r3, [pc, #92]	@ (80039dc <readRangeContinuousMillimeters+0x6c>)
 8003980:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8003982:	e015      	b.n	80039b0 <readRangeContinuousMillimeters+0x40>
  {
    if (checkTimeoutExpired())
 8003984:	4b16      	ldr	r3, [pc, #88]	@ (80039e0 <readRangeContinuousMillimeters+0x70>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d011      	beq.n	80039b0 <readRangeContinuousMillimeters+0x40>
 800398c:	f7ff faea 	bl	8002f64 <millis>
 8003990:	4603      	mov	r3, r0
 8003992:	b29b      	uxth	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <readRangeContinuousMillimeters+0x6c>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	4a10      	ldr	r2, [pc, #64]	@ (80039e0 <readRangeContinuousMillimeters+0x70>)
 800399e:	8812      	ldrh	r2, [r2, #0]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	dd05      	ble.n	80039b0 <readRangeContinuousMillimeters+0x40>
    {
      did_timeout = true;
 80039a4:	4b0f      	ldr	r3, [pc, #60]	@ (80039e4 <readRangeContinuousMillimeters+0x74>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
      return 65535;
 80039aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039ae:	e011      	b.n	80039d4 <readRangeContinuousMillimeters+0x64>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80039b0:	2013      	movs	r0, #19
 80039b2:	f7ff fb39 	bl	8003028 <readReg>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0e1      	beq.n	8003984 <readRangeContinuousMillimeters+0x14>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80039c0:	201e      	movs	r0, #30
 80039c2:	f7ff fb5b 	bl	800307c <readReg16Bit>
 80039c6:	4603      	mov	r3, r0
 80039c8:	80fb      	strh	r3, [r7, #6]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80039ca:	2101      	movs	r1, #1
 80039cc:	200b      	movs	r0, #11
 80039ce:	f7ff fae5 	bl	8002f9c <writeReg>

  return range;
 80039d2:	88fb      	ldrh	r3, [r7, #6]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000002 	.word	0x20000002
 80039e0:	20000004 	.word	0x20000004
 80039e4:	20000006 	.word	0x20000006

080039e8 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
uint16_t readRangeSingleMillimeters(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  writeReg(0x80, 0x01);
 80039ec:	2101      	movs	r1, #1
 80039ee:	2080      	movs	r0, #128	@ 0x80
 80039f0:	f7ff fad4 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x01);
 80039f4:	2101      	movs	r1, #1
 80039f6:	20ff      	movs	r0, #255	@ 0xff
 80039f8:	f7ff fad0 	bl	8002f9c <writeReg>
  writeReg(0x00, 0x00);
 80039fc:	2100      	movs	r1, #0
 80039fe:	2000      	movs	r0, #0
 8003a00:	f7ff facc 	bl	8002f9c <writeReg>
  writeReg(0x91, stop_variable);
 8003a04:	4b1f      	ldr	r3, [pc, #124]	@ (8003a84 <readRangeSingleMillimeters+0x9c>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	2091      	movs	r0, #145	@ 0x91
 8003a0c:	f7ff fac6 	bl	8002f9c <writeReg>
  writeReg(0x00, 0x01);
 8003a10:	2101      	movs	r1, #1
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7ff fac2 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x00);
 8003a18:	2100      	movs	r1, #0
 8003a1a:	20ff      	movs	r0, #255	@ 0xff
 8003a1c:	f7ff fabe 	bl	8002f9c <writeReg>
  writeReg(0x80, 0x00);
 8003a20:	2100      	movs	r1, #0
 8003a22:	2080      	movs	r0, #128	@ 0x80
 8003a24:	f7ff faba 	bl	8002f9c <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 8003a28:	2101      	movs	r1, #1
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7ff fab6 	bl	8002f9c <writeReg>

  // "Wait until start bit has been cleared"
  startTimeout();
 8003a30:	f7ff fa98 	bl	8002f64 <millis>
 8003a34:	4603      	mov	r3, r0
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <readRangeSingleMillimeters+0xa0>)
 8003a3a:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01)
 8003a3c:	e015      	b.n	8003a6a <readRangeSingleMillimeters+0x82>
  {
    if (checkTimeoutExpired())
 8003a3e:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <readRangeSingleMillimeters+0xa4>)
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d011      	beq.n	8003a6a <readRangeSingleMillimeters+0x82>
 8003a46:	f7ff fa8d 	bl	8002f64 <millis>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b0d      	ldr	r3, [pc, #52]	@ (8003a88 <readRangeSingleMillimeters+0xa0>)
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	4a0d      	ldr	r2, [pc, #52]	@ (8003a8c <readRangeSingleMillimeters+0xa4>)
 8003a58:	8812      	ldrh	r2, [r2, #0]
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	dd05      	ble.n	8003a6a <readRangeSingleMillimeters+0x82>
    {
      did_timeout = true;
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <readRangeSingleMillimeters+0xa8>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
      return 65535;
 8003a64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a68:	e00a      	b.n	8003a80 <readRangeSingleMillimeters+0x98>
  while (readReg(SYSRANGE_START) & 0x01)
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7ff fadc 	bl	8003028 <readReg>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e1      	bne.n	8003a3e <readRangeSingleMillimeters+0x56>
    }
  }

  return readRangeContinuousMillimeters();
 8003a7a:	f7ff ff79 	bl	8003970 <readRangeContinuousMillimeters>
 8003a7e:	4603      	mov	r3, r0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000000 	.word	0x20000000
 8003a88:	20000002 	.word	0x20000002
 8003a8c:	20000004 	.word	0x20000004
 8003a90:	20000006 	.word	0x20000006

08003a94 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2080      	movs	r0, #128	@ 0x80
 8003aa2:	f7ff fa7b 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x01);
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	20ff      	movs	r0, #255	@ 0xff
 8003aaa:	f7ff fa77 	bl	8002f9c <writeReg>
  writeReg(0x00, 0x00);
 8003aae:	2100      	movs	r1, #0
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f7ff fa73 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x06);
 8003ab6:	2106      	movs	r1, #6
 8003ab8:	20ff      	movs	r0, #255	@ 0xff
 8003aba:	f7ff fa6f 	bl	8002f9c <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8003abe:	2083      	movs	r0, #131	@ 0x83
 8003ac0:	f7ff fab2 	bl	8003028 <readReg>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	2083      	movs	r0, #131	@ 0x83
 8003ad0:	f7ff fa64 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x07);
 8003ad4:	2107      	movs	r1, #7
 8003ad6:	20ff      	movs	r0, #255	@ 0xff
 8003ad8:	f7ff fa60 	bl	8002f9c <writeReg>
  writeReg(0x81, 0x01);
 8003adc:	2101      	movs	r1, #1
 8003ade:	2081      	movs	r0, #129	@ 0x81
 8003ae0:	f7ff fa5c 	bl	8002f9c <writeReg>

  writeReg(0x80, 0x01);
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	2080      	movs	r0, #128	@ 0x80
 8003ae8:	f7ff fa58 	bl	8002f9c <writeReg>

  writeReg(0x94, 0x6b);
 8003aec:	216b      	movs	r1, #107	@ 0x6b
 8003aee:	2094      	movs	r0, #148	@ 0x94
 8003af0:	f7ff fa54 	bl	8002f9c <writeReg>
  writeReg(0x83, 0x00);
 8003af4:	2100      	movs	r1, #0
 8003af6:	2083      	movs	r0, #131	@ 0x83
 8003af8:	f7ff fa50 	bl	8002f9c <writeReg>
  startTimeout();
 8003afc:	f7ff fa32 	bl	8002f64 <millis>
 8003b00:	4603      	mov	r3, r0
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	4b1e      	ldr	r3, [pc, #120]	@ (8003b80 <getSpadInfo+0xec>)
 8003b06:	801a      	strh	r2, [r3, #0]
//  while (readReg(0x83) == 0x00)
//  {
//    if (checkTimeoutExpired()) { return false; }
//  }
  writeReg(0x83, 0x01);
 8003b08:	2101      	movs	r1, #1
 8003b0a:	2083      	movs	r0, #131	@ 0x83
 8003b0c:	f7ff fa46 	bl	8002f9c <writeReg>
  tmp = readReg(0x92);
 8003b10:	2092      	movs	r0, #146	@ 0x92
 8003b12:	f7ff fa89 	bl	8003028 <readReg>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	09db      	lsrs	r3, r3, #7
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8003b30:	2100      	movs	r1, #0
 8003b32:	2081      	movs	r0, #129	@ 0x81
 8003b34:	f7ff fa32 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x06);
 8003b38:	2106      	movs	r1, #6
 8003b3a:	20ff      	movs	r0, #255	@ 0xff
 8003b3c:	f7ff fa2e 	bl	8002f9c <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8003b40:	2083      	movs	r0, #131	@ 0x83
 8003b42:	f7ff fa71 	bl	8003028 <readReg>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	4619      	mov	r1, r3
 8003b50:	2083      	movs	r0, #131	@ 0x83
 8003b52:	f7ff fa23 	bl	8002f9c <writeReg>
  writeReg(0xFF, 0x01);
 8003b56:	2101      	movs	r1, #1
 8003b58:	20ff      	movs	r0, #255	@ 0xff
 8003b5a:	f7ff fa1f 	bl	8002f9c <writeReg>
  writeReg(0x00, 0x01);
 8003b5e:	2101      	movs	r1, #1
 8003b60:	2000      	movs	r0, #0
 8003b62:	f7ff fa1b 	bl	8002f9c <writeReg>

  writeReg(0xFF, 0x00);
 8003b66:	2100      	movs	r1, #0
 8003b68:	20ff      	movs	r0, #255	@ 0xff
 8003b6a:	f7ff fa17 	bl	8002f9c <writeReg>
  writeReg(0x80, 0x00);
 8003b6e:	2100      	movs	r1, #0
 8003b70:	2080      	movs	r0, #128	@ 0x80
 8003b72:	f7ff fa13 	bl	8002f9c <writeReg>

  return true;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000002 	.word	0x20000002

08003b84 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(struct SequenceStepEnables * enables)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7ff fa4b 	bl	8003028 <readReg>
 8003b92:	4603      	mov	r3, r0
 8003b94:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	08db      	lsrs	r3, r3, #3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	09db      	lsrs	r3, r3, #7
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	711a      	strb	r2, [r3, #4]
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(struct SequenceStepEnables const * enables, struct SequenceStepTimeouts * timeouts)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7ff fe9a 	bl	800392c <getVcselPulsePeriod>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8003c00:	2046      	movs	r0, #70	@ 0x46
 8003c02:	f7ff fa11 	bl	8003028 <readReg>
 8003c06:	4603      	mov	r3, r0
 8003c08:	3301      	adds	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f000 f885 	bl	8003d2c <timeoutMclksToMicroseconds>
 8003c22:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8003c28:	2051      	movs	r0, #81	@ 0x51
 8003c2a:	f7ff fa27 	bl	800307c <readReg16Bit>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f83e 	bl	8003cb2 <decodeTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 f86e 	bl	8003d2c <timeoutMclksToMicroseconds>
 8003c50:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8003c56:	2001      	movs	r0, #1
 8003c58:	f7ff fe68 	bl	800392c <getVcselPulsePeriod>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8003c64:	2071      	movs	r0, #113	@ 0x71
 8003c66:	f7ff fa09 	bl	800307c <readReg16Bit>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 f820 	bl	8003cb2 <decodeTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	78db      	ldrb	r3, [r3, #3]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	891a      	ldrh	r2, [r3, #8]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	88db      	ldrh	r3, [r3, #6]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f000 f844 	bl	8003d2c <timeoutMclksToMicroseconds>
 8003ca4:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	615a      	str	r2, [r3, #20]
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	4603      	mov	r3, r0
 8003cba:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	0a12      	lsrs	r2, r2, #8
 8003cc4:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8003cc6:	4093      	lsls	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b29b      	uxth	r3, r3
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d016      	beq.n	8003d1e <encodeTimeout+0x46>
  {
    ls_byte = timeout_mclks - 1;
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8003cf6:	e005      	b.n	8003d04 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8003cfe:	897b      	ldrh	r3, [r7, #10]
 8003d00:	3301      	adds	r3, #1
 8003d02:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2bff      	cmp	r3, #255	@ 0xff
 8003d08:	d8f6      	bhi.n	8003cf8 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	e000      	b.n	8003d20 <encodeTimeout+0x48>
  }
  else { return 0; }
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
	...

08003d2c <timeoutMclksToMicroseconds>:


// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	460a      	mov	r2, r1
 8003d36:	80fb      	strh	r3, [r7, #6]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8003d3c:	797b      	ldrb	r3, [r7, #5]
 8003d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d74 <timeoutMclksToMicroseconds+0x48>)
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
 8003d44:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003d48:	4a0b      	ldr	r2, [pc, #44]	@ (8003d78 <timeoutMclksToMicroseconds+0x4c>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	fb03 f202 	mul.w	r2, r3, r2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a05      	ldr	r2, [pc, #20]	@ (8003d78 <timeoutMclksToMicroseconds+0x4c>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	099b      	lsrs	r3, r3, #6
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	003a2f00 	.word	0x003a2f00
 8003d78:	10624dd3 	.word	0x10624dd3

08003d7c <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc0 <timeoutMicrosecondsToMclks+0x44>)
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003d94:	4a0b      	ldr	r2, [pc, #44]	@ (8003dc4 <timeoutMicrosecondsToMclks+0x48>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003da4:	fb03 f202 	mul.w	r2, r3, r2
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	003a2f00 	.word	0x003a2f00
 8003dc4:	10624dd3 	.word	0x10624dd3

08003dc8 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7ff f8dd 	bl	8002f9c <writeReg>

  startTimeout();
 8003de2:	f7ff f8bf 	bl	8002f64 <millis>
 8003de6:	4603      	mov	r3, r0
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	4b15      	ldr	r3, [pc, #84]	@ (8003e40 <performSingleRefCalibration+0x78>)
 8003dec:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8003dee:	e011      	b.n	8003e14 <performSingleRefCalibration+0x4c>
  {
    if (checkTimeoutExpired()) { return false; }
 8003df0:	4b14      	ldr	r3, [pc, #80]	@ (8003e44 <performSingleRefCalibration+0x7c>)
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <performSingleRefCalibration+0x4c>
 8003df8:	f7ff f8b4 	bl	8002f64 <millis>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b0f      	ldr	r3, [pc, #60]	@ (8003e40 <performSingleRefCalibration+0x78>)
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	4a0e      	ldr	r2, [pc, #56]	@ (8003e44 <performSingleRefCalibration+0x7c>)
 8003e0a:	8812      	ldrh	r2, [r2, #0]
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	dd01      	ble.n	8003e14 <performSingleRefCalibration+0x4c>
 8003e10:	2300      	movs	r3, #0
 8003e12:	e010      	b.n	8003e36 <performSingleRefCalibration+0x6e>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8003e14:	2013      	movs	r0, #19
 8003e16:	f7ff f907 	bl	8003028 <readReg>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0e5      	beq.n	8003df0 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8003e24:	2101      	movs	r1, #1
 8003e26:	200b      	movs	r0, #11
 8003e28:	f7ff f8b8 	bl	8002f9c <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7ff f8b4 	bl	8002f9c <writeReg>

  return true;
 8003e34:	2301      	movs	r3, #1
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000002 	.word	0x20000002
 8003e44:	20000004 	.word	0x20000004

08003e48 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003e4e:	f000 fa25 	bl	800429c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003e52:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003e56:	2201      	movs	r2, #1
 8003e58:	2178      	movs	r1, #120	@ 0x78
 8003e5a:	485b      	ldr	r0, [pc, #364]	@ (8003fc8 <SSD1306_Init+0x180>)
 8003e5c:	f7fd ffd2 	bl	8001e04 <HAL_I2C_IsDeviceReady>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e0a9      	b.n	8003fbe <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003e6a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003e6e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003e70:	e002      	b.n	8003e78 <SSD1306_Init+0x30>
		p--;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f9      	bne.n	8003e72 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003e7e:	22ae      	movs	r2, #174	@ 0xae
 8003e80:	2100      	movs	r1, #0
 8003e82:	2078      	movs	r0, #120	@ 0x78
 8003e84:	f000 fa84 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003e88:	2220      	movs	r2, #32
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2078      	movs	r0, #120	@ 0x78
 8003e8e:	f000 fa7f 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003e92:	2210      	movs	r2, #16
 8003e94:	2100      	movs	r1, #0
 8003e96:	2078      	movs	r0, #120	@ 0x78
 8003e98:	f000 fa7a 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e9c:	22b0      	movs	r2, #176	@ 0xb0
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	2078      	movs	r0, #120	@ 0x78
 8003ea2:	f000 fa75 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003ea6:	22c8      	movs	r2, #200	@ 0xc8
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2078      	movs	r0, #120	@ 0x78
 8003eac:	f000 fa70 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	2078      	movs	r0, #120	@ 0x78
 8003eb6:	f000 fa6b 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003eba:	2210      	movs	r2, #16
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	2078      	movs	r0, #120	@ 0x78
 8003ec0:	f000 fa66 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003ec4:	2240      	movs	r2, #64	@ 0x40
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2078      	movs	r0, #120	@ 0x78
 8003eca:	f000 fa61 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003ece:	2281      	movs	r2, #129	@ 0x81
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	2078      	movs	r0, #120	@ 0x78
 8003ed4:	f000 fa5c 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003ed8:	22ff      	movs	r2, #255	@ 0xff
 8003eda:	2100      	movs	r1, #0
 8003edc:	2078      	movs	r0, #120	@ 0x78
 8003ede:	f000 fa57 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003ee2:	22a1      	movs	r2, #161	@ 0xa1
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	2078      	movs	r0, #120	@ 0x78
 8003ee8:	f000 fa52 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003eec:	22a6      	movs	r2, #166	@ 0xa6
 8003eee:	2100      	movs	r1, #0
 8003ef0:	2078      	movs	r0, #120	@ 0x78
 8003ef2:	f000 fa4d 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003ef6:	22a8      	movs	r2, #168	@ 0xa8
 8003ef8:	2100      	movs	r1, #0
 8003efa:	2078      	movs	r0, #120	@ 0x78
 8003efc:	f000 fa48 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003f00:	223f      	movs	r2, #63	@ 0x3f
 8003f02:	2100      	movs	r1, #0
 8003f04:	2078      	movs	r0, #120	@ 0x78
 8003f06:	f000 fa43 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003f0a:	22a4      	movs	r2, #164	@ 0xa4
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	2078      	movs	r0, #120	@ 0x78
 8003f10:	f000 fa3e 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003f14:	22d3      	movs	r2, #211	@ 0xd3
 8003f16:	2100      	movs	r1, #0
 8003f18:	2078      	movs	r0, #120	@ 0x78
 8003f1a:	f000 fa39 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2100      	movs	r1, #0
 8003f22:	2078      	movs	r0, #120	@ 0x78
 8003f24:	f000 fa34 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003f28:	22d5      	movs	r2, #213	@ 0xd5
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	2078      	movs	r0, #120	@ 0x78
 8003f2e:	f000 fa2f 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003f32:	22f0      	movs	r2, #240	@ 0xf0
 8003f34:	2100      	movs	r1, #0
 8003f36:	2078      	movs	r0, #120	@ 0x78
 8003f38:	f000 fa2a 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003f3c:	22d9      	movs	r2, #217	@ 0xd9
 8003f3e:	2100      	movs	r1, #0
 8003f40:	2078      	movs	r0, #120	@ 0x78
 8003f42:	f000 fa25 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003f46:	2222      	movs	r2, #34	@ 0x22
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2078      	movs	r0, #120	@ 0x78
 8003f4c:	f000 fa20 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003f50:	22da      	movs	r2, #218	@ 0xda
 8003f52:	2100      	movs	r1, #0
 8003f54:	2078      	movs	r0, #120	@ 0x78
 8003f56:	f000 fa1b 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003f5a:	2212      	movs	r2, #18
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	2078      	movs	r0, #120	@ 0x78
 8003f60:	f000 fa16 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003f64:	22db      	movs	r2, #219	@ 0xdb
 8003f66:	2100      	movs	r1, #0
 8003f68:	2078      	movs	r0, #120	@ 0x78
 8003f6a:	f000 fa11 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003f6e:	2220      	movs	r2, #32
 8003f70:	2100      	movs	r1, #0
 8003f72:	2078      	movs	r0, #120	@ 0x78
 8003f74:	f000 fa0c 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003f78:	228d      	movs	r2, #141	@ 0x8d
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	2078      	movs	r0, #120	@ 0x78
 8003f7e:	f000 fa07 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003f82:	2214      	movs	r2, #20
 8003f84:	2100      	movs	r1, #0
 8003f86:	2078      	movs	r0, #120	@ 0x78
 8003f88:	f000 fa02 	bl	8004390 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003f8c:	22af      	movs	r2, #175	@ 0xaf
 8003f8e:	2100      	movs	r1, #0
 8003f90:	2078      	movs	r0, #120	@ 0x78
 8003f92:	f000 f9fd 	bl	8004390 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003f96:	222e      	movs	r2, #46	@ 0x2e
 8003f98:	2100      	movs	r1, #0
 8003f9a:	2078      	movs	r0, #120	@ 0x78
 8003f9c:	f000 f9f8 	bl	8004390 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f000 f843 	bl	800402c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8003fa6:	f000 f813 	bl	8003fd0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003faa:	4b08      	ldr	r3, [pc, #32]	@ (8003fcc <SSD1306_Init+0x184>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <SSD1306_Init+0x184>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003fb6:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <SSD1306_Init+0x184>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003fbc:	2301      	movs	r3, #1
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2000008c 	.word	0x2000008c
 8003fcc:	200004f0 	.word	0x200004f0

08003fd0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	71fb      	strb	r3, [r7, #7]
 8003fda:	e01d      	b.n	8004018 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	3b50      	subs	r3, #80	@ 0x50
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	2078      	movs	r0, #120	@ 0x78
 8003fe8:	f000 f9d2 	bl	8004390 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003fec:	2200      	movs	r2, #0
 8003fee:	2100      	movs	r1, #0
 8003ff0:	2078      	movs	r0, #120	@ 0x78
 8003ff2:	f000 f9cd 	bl	8004390 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003ff6:	2210      	movs	r2, #16
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	2078      	movs	r0, #120	@ 0x78
 8003ffc:	f000 f9c8 	bl	8004390 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	01db      	lsls	r3, r3, #7
 8004004:	4a08      	ldr	r2, [pc, #32]	@ (8004028 <SSD1306_UpdateScreen+0x58>)
 8004006:	441a      	add	r2, r3
 8004008:	2380      	movs	r3, #128	@ 0x80
 800400a:	2140      	movs	r1, #64	@ 0x40
 800400c:	2078      	movs	r0, #120	@ 0x78
 800400e:	f000 f959 	bl	80042c4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	3301      	adds	r3, #1
 8004016:	71fb      	strb	r3, [r7, #7]
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	2b07      	cmp	r3, #7
 800401c:	d9de      	bls.n	8003fdc <SSD1306_UpdateScreen+0xc>
	}
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	200000f0 	.word	0x200000f0

0800402c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <SSD1306_Fill+0x14>
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <SSD1306_Fill+0x16>
 8004040:	23ff      	movs	r3, #255	@ 0xff
 8004042:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004046:	4619      	mov	r1, r3
 8004048:	4803      	ldr	r0, [pc, #12]	@ (8004058 <SSD1306_Fill+0x2c>)
 800404a:	f000 fa4f 	bl	80044ec <memset>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200000f0 	.word	0x200000f0

0800405c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	80fb      	strh	r3, [r7, #6]
 8004066:	460b      	mov	r3, r1
 8004068:	80bb      	strh	r3, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	70fb      	strb	r3, [r7, #3]
	if (
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	2b7f      	cmp	r3, #127	@ 0x7f
 8004072:	d848      	bhi.n	8004106 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004074:	88bb      	ldrh	r3, [r7, #4]
 8004076:	2b3f      	cmp	r3, #63	@ 0x3f
 8004078:	d845      	bhi.n	8004106 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800407a:	4b25      	ldr	r3, [pc, #148]	@ (8004110 <SSD1306_DrawPixel+0xb4>)
 800407c:	791b      	ldrb	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d006      	beq.n	8004090 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d11a      	bne.n	80040cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	88bb      	ldrh	r3, [r7, #4]
 800409a:	08db      	lsrs	r3, r3, #3
 800409c:	b298      	uxth	r0, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	01db      	lsls	r3, r3, #7
 80040a2:	4413      	add	r3, r2
 80040a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004114 <SSD1306_DrawPixel+0xb8>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	b25a      	sxtb	r2, r3
 80040aa:	88bb      	ldrh	r3, [r7, #4]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	2101      	movs	r1, #1
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	b25b      	sxtb	r3, r3
 80040b8:	4313      	orrs	r3, r2
 80040ba:	b259      	sxtb	r1, r3
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	4603      	mov	r3, r0
 80040c0:	01db      	lsls	r3, r3, #7
 80040c2:	4413      	add	r3, r2
 80040c4:	b2c9      	uxtb	r1, r1
 80040c6:	4a13      	ldr	r2, [pc, #76]	@ (8004114 <SSD1306_DrawPixel+0xb8>)
 80040c8:	54d1      	strb	r1, [r2, r3]
 80040ca:	e01d      	b.n	8004108 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80040cc:	88fa      	ldrh	r2, [r7, #6]
 80040ce:	88bb      	ldrh	r3, [r7, #4]
 80040d0:	08db      	lsrs	r3, r3, #3
 80040d2:	b298      	uxth	r0, r3
 80040d4:	4603      	mov	r3, r0
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	4413      	add	r3, r2
 80040da:	4a0e      	ldr	r2, [pc, #56]	@ (8004114 <SSD1306_DrawPixel+0xb8>)
 80040dc:	5cd3      	ldrb	r3, [r2, r3]
 80040de:	b25a      	sxtb	r2, r3
 80040e0:	88bb      	ldrh	r3, [r7, #4]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	2101      	movs	r1, #1
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	4013      	ands	r3, r2
 80040f4:	b259      	sxtb	r1, r3
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	4603      	mov	r3, r0
 80040fa:	01db      	lsls	r3, r3, #7
 80040fc:	4413      	add	r3, r2
 80040fe:	b2c9      	uxtb	r1, r1
 8004100:	4a04      	ldr	r2, [pc, #16]	@ (8004114 <SSD1306_DrawPixel+0xb8>)
 8004102:	54d1      	strb	r1, [r2, r3]
 8004104:	e000      	b.n	8004108 <SSD1306_DrawPixel+0xac>
		return;
 8004106:	bf00      	nop
	}
}
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	200004f0 	.word	0x200004f0
 8004114:	200000f0 	.word	0x200000f0

08004118 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	460a      	mov	r2, r1
 8004122:	80fb      	strh	r3, [r7, #6]
 8004124:	4613      	mov	r3, r2
 8004126:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004128:	4a05      	ldr	r2, [pc, #20]	@ (8004140 <SSD1306_GotoXY+0x28>)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800412e:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <SSD1306_GotoXY+0x28>)
 8004130:	88bb      	ldrh	r3, [r7, #4]
 8004132:	8053      	strh	r3, [r2, #2]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	200004f0 	.word	0x200004f0

08004144 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]
 8004150:	4613      	mov	r3, r2
 8004152:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004154:	4b39      	ldr	r3, [pc, #228]	@ (800423c <SSD1306_Putc+0xf8>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	4413      	add	r3, r2
	if (
 8004160:	2b7f      	cmp	r3, #127	@ 0x7f
 8004162:	dc07      	bgt.n	8004174 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8004164:	4b35      	ldr	r3, [pc, #212]	@ (800423c <SSD1306_Putc+0xf8>)
 8004166:	885b      	ldrh	r3, [r3, #2]
 8004168:	461a      	mov	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004170:	2b3f      	cmp	r3, #63	@ 0x3f
 8004172:	dd01      	ble.n	8004178 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8004174:	2300      	movs	r3, #0
 8004176:	e05d      	b.n	8004234 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e04b      	b.n	8004216 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	3b20      	subs	r3, #32
 8004186:	6839      	ldr	r1, [r7, #0]
 8004188:	7849      	ldrb	r1, [r1, #1]
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4619      	mov	r1, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	440b      	add	r3, r1
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	e030      	b.n	8004204 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d010      	beq.n	80041d4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80041b2:	4b22      	ldr	r3, [pc, #136]	@ (800423c <SSD1306_Putc+0xf8>)
 80041b4:	881a      	ldrh	r2, [r3, #0]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	b298      	uxth	r0, r3
 80041be:	4b1f      	ldr	r3, [pc, #124]	@ (800423c <SSD1306_Putc+0xf8>)
 80041c0:	885a      	ldrh	r2, [r3, #2]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	79ba      	ldrb	r2, [r7, #6]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f7ff ff45 	bl	800405c <SSD1306_DrawPixel>
 80041d2:	e014      	b.n	80041fe <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80041d4:	4b19      	ldr	r3, [pc, #100]	@ (800423c <SSD1306_Putc+0xf8>)
 80041d6:	881a      	ldrh	r2, [r3, #0]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	4413      	add	r3, r2
 80041de:	b298      	uxth	r0, r3
 80041e0:	4b16      	ldr	r3, [pc, #88]	@ (800423c <SSD1306_Putc+0xf8>)
 80041e2:	885a      	ldrh	r2, [r3, #2]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	b299      	uxth	r1, r3
 80041ec:	79bb      	ldrb	r3, [r7, #6]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	f7ff ff2f 	bl	800405c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4293      	cmp	r3, r2
 800420e:	d3c8      	bcc.n	80041a2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	461a      	mov	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	4293      	cmp	r3, r2
 8004220:	d3ad      	bcc.n	800417e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004222:	4b06      	ldr	r3, [pc, #24]	@ (800423c <SSD1306_Putc+0xf8>)
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	4413      	add	r3, r2
 800422c:	b29a      	uxth	r2, r3
 800422e:	4b03      	ldr	r3, [pc, #12]	@ (800423c <SSD1306_Putc+0xf8>)
 8004230:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8004232:	79fb      	ldrb	r3, [r7, #7]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	200004f0 	.word	0x200004f0

08004240 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	4613      	mov	r3, r2
 800424c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800424e:	e012      	b.n	8004276 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	79fa      	ldrb	r2, [r7, #7]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff73 	bl	8004144 <SSD1306_Putc>
 800425e:	4603      	mov	r3, r0
 8004260:	461a      	mov	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d002      	beq.n	8004270 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	e008      	b.n	8004282 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e8      	bne.n	8004250 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	781b      	ldrb	r3, [r3, #0]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800428e:	2000      	movs	r0, #0
 8004290:	f7ff fecc 	bl	800402c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8004294:	f7ff fe9c 	bl	8003fd0 <SSD1306_UpdateScreen>
}
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}

0800429c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80042a2:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <ssd1306_I2C_Init+0x24>)
 80042a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042a6:	e002      	b.n	80042ae <ssd1306_I2C_Init+0x12>
		p--;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f9      	bne.n	80042a8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	0003d090 	.word	0x0003d090

080042c4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b0c7      	sub	sp, #284	@ 0x11c
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	4604      	mov	r4, r0
 80042cc:	4608      	mov	r0, r1
 80042ce:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80042d2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80042d6:	600a      	str	r2, [r1, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042de:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80042e2:	4622      	mov	r2, r4
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042ea:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80042ee:	4602      	mov	r2, r0
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80042fa:	460a      	mov	r2, r1
 80042fc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80042fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004306:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800430a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004312:	2300      	movs	r3, #0
 8004314:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004318:	e015      	b.n	8004346 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800431a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800431e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004322:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	441a      	add	r2, r3
 800432a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800432e:	3301      	adds	r3, #1
 8004330:	7811      	ldrb	r1, [r2, #0]
 8004332:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004336:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800433a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800433c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004340:	3301      	adds	r3, #1
 8004342:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004346:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800434a:	b29b      	uxth	r3, r3
 800434c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004350:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8004354:	8812      	ldrh	r2, [r2, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d8df      	bhi.n	800431a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800435a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800435e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b299      	uxth	r1, r3
 8004366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800436a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	f107 020c 	add.w	r2, r7, #12
 8004378:	200a      	movs	r0, #10
 800437a:	9000      	str	r0, [sp, #0]
 800437c:	4803      	ldr	r0, [pc, #12]	@ (800438c <ssd1306_I2C_WriteMulti+0xc8>)
 800437e:	f7fd f9d7 	bl	8001730 <HAL_I2C_Master_Transmit>
}
 8004382:	bf00      	nop
 8004384:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}
 800438c:	2000008c 	.word	0x2000008c

08004390 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]
 800439a:	460b      	mov	r3, r1
 800439c:	71bb      	strb	r3, [r7, #6]
 800439e:	4613      	mov	r3, r2
 80043a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80043a2:	79bb      	ldrb	r3, [r7, #6]
 80043a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80043a6:	797b      	ldrb	r3, [r7, #5]
 80043a8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	b299      	uxth	r1, r3
 80043ae:	f107 020c 	add.w	r2, r7, #12
 80043b2:	230a      	movs	r3, #10
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	2302      	movs	r3, #2
 80043b8:	4803      	ldr	r0, [pc, #12]	@ (80043c8 <ssd1306_I2C_Write+0x38>)
 80043ba:	f7fd f9b9 	bl	8001730 <HAL_I2C_Master_Transmit>
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2000008c 	.word	0x2000008c

080043cc <__itoa>:
 80043cc:	1e93      	subs	r3, r2, #2
 80043ce:	2b22      	cmp	r3, #34	@ 0x22
 80043d0:	b510      	push	{r4, lr}
 80043d2:	460c      	mov	r4, r1
 80043d4:	d904      	bls.n	80043e0 <__itoa+0x14>
 80043d6:	2300      	movs	r3, #0
 80043d8:	461c      	mov	r4, r3
 80043da:	700b      	strb	r3, [r1, #0]
 80043dc:	4620      	mov	r0, r4
 80043de:	bd10      	pop	{r4, pc}
 80043e0:	2a0a      	cmp	r2, #10
 80043e2:	d109      	bne.n	80043f8 <__itoa+0x2c>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	da07      	bge.n	80043f8 <__itoa+0x2c>
 80043e8:	232d      	movs	r3, #45	@ 0x2d
 80043ea:	700b      	strb	r3, [r1, #0]
 80043ec:	2101      	movs	r1, #1
 80043ee:	4240      	negs	r0, r0
 80043f0:	4421      	add	r1, r4
 80043f2:	f000 f805 	bl	8004400 <__utoa>
 80043f6:	e7f1      	b.n	80043dc <__itoa+0x10>
 80043f8:	2100      	movs	r1, #0
 80043fa:	e7f9      	b.n	80043f0 <__itoa+0x24>

080043fc <itoa>:
 80043fc:	f7ff bfe6 	b.w	80043cc <__itoa>

08004400 <__utoa>:
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004402:	b08b      	sub	sp, #44	@ 0x2c
 8004404:	4605      	mov	r5, r0
 8004406:	460b      	mov	r3, r1
 8004408:	466e      	mov	r6, sp
 800440a:	4c1d      	ldr	r4, [pc, #116]	@ (8004480 <__utoa+0x80>)
 800440c:	f104 0c20 	add.w	ip, r4, #32
 8004410:	4637      	mov	r7, r6
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	6861      	ldr	r1, [r4, #4]
 8004416:	3408      	adds	r4, #8
 8004418:	c703      	stmia	r7!, {r0, r1}
 800441a:	4564      	cmp	r4, ip
 800441c:	463e      	mov	r6, r7
 800441e:	d1f7      	bne.n	8004410 <__utoa+0x10>
 8004420:	7921      	ldrb	r1, [r4, #4]
 8004422:	6820      	ldr	r0, [r4, #0]
 8004424:	7139      	strb	r1, [r7, #4]
 8004426:	1e91      	subs	r1, r2, #2
 8004428:	2922      	cmp	r1, #34	@ 0x22
 800442a:	6038      	str	r0, [r7, #0]
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	d904      	bls.n	800443c <__utoa+0x3c>
 8004432:	7019      	strb	r1, [r3, #0]
 8004434:	460b      	mov	r3, r1
 8004436:	4618      	mov	r0, r3
 8004438:	b00b      	add	sp, #44	@ 0x2c
 800443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443c:	1e58      	subs	r0, r3, #1
 800443e:	4684      	mov	ip, r0
 8004440:	fbb5 f7f2 	udiv	r7, r5, r2
 8004444:	fb02 5617 	mls	r6, r2, r7, r5
 8004448:	3628      	adds	r6, #40	@ 0x28
 800444a:	446e      	add	r6, sp
 800444c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004450:	460c      	mov	r4, r1
 8004452:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004456:	462e      	mov	r6, r5
 8004458:	42b2      	cmp	r2, r6
 800445a:	463d      	mov	r5, r7
 800445c:	f101 0101 	add.w	r1, r1, #1
 8004460:	d9ee      	bls.n	8004440 <__utoa+0x40>
 8004462:	2200      	movs	r2, #0
 8004464:	545a      	strb	r2, [r3, r1]
 8004466:	1919      	adds	r1, r3, r4
 8004468:	1aa5      	subs	r5, r4, r2
 800446a:	42aa      	cmp	r2, r5
 800446c:	dae3      	bge.n	8004436 <__utoa+0x36>
 800446e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004472:	780e      	ldrb	r6, [r1, #0]
 8004474:	3201      	adds	r2, #1
 8004476:	7006      	strb	r6, [r0, #0]
 8004478:	f801 5901 	strb.w	r5, [r1], #-1
 800447c:	e7f4      	b.n	8004468 <__utoa+0x68>
 800447e:	bf00      	nop
 8004480:	08005bd4 	.word	0x08005bd4

08004484 <sniprintf>:
 8004484:	b40c      	push	{r2, r3}
 8004486:	b530      	push	{r4, r5, lr}
 8004488:	4b17      	ldr	r3, [pc, #92]	@ (80044e8 <sniprintf+0x64>)
 800448a:	1e0c      	subs	r4, r1, #0
 800448c:	681d      	ldr	r5, [r3, #0]
 800448e:	b09d      	sub	sp, #116	@ 0x74
 8004490:	da08      	bge.n	80044a4 <sniprintf+0x20>
 8004492:	238b      	movs	r3, #139	@ 0x8b
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	b01d      	add	sp, #116	@ 0x74
 800449c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044a0:	b002      	add	sp, #8
 80044a2:	4770      	bx	lr
 80044a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80044a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044ac:	bf0c      	ite	eq
 80044ae:	4623      	moveq	r3, r4
 80044b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044b4:	9304      	str	r3, [sp, #16]
 80044b6:	9307      	str	r3, [sp, #28]
 80044b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044bc:	9002      	str	r0, [sp, #8]
 80044be:	9006      	str	r0, [sp, #24]
 80044c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044c4:	4628      	mov	r0, r5
 80044c6:	ab21      	add	r3, sp, #132	@ 0x84
 80044c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80044ca:	a902      	add	r1, sp, #8
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	f000 f993 	bl	80047f8 <_svfiprintf_r>
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	bfbc      	itt	lt
 80044d6:	238b      	movlt	r3, #139	@ 0x8b
 80044d8:	602b      	strlt	r3, [r5, #0]
 80044da:	2c00      	cmp	r4, #0
 80044dc:	d0dd      	beq.n	800449a <sniprintf+0x16>
 80044de:	2200      	movs	r2, #0
 80044e0:	9b02      	ldr	r3, [sp, #8]
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e7d9      	b.n	800449a <sniprintf+0x16>
 80044e6:	bf00      	nop
 80044e8:	20000020 	.word	0x20000020

080044ec <memset>:
 80044ec:	4603      	mov	r3, r0
 80044ee:	4402      	add	r2, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d100      	bne.n	80044f6 <memset+0xa>
 80044f4:	4770      	bx	lr
 80044f6:	f803 1b01 	strb.w	r1, [r3], #1
 80044fa:	e7f9      	b.n	80044f0 <memset+0x4>

080044fc <__errno>:
 80044fc:	4b01      	ldr	r3, [pc, #4]	@ (8004504 <__errno+0x8>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000020 	.word	0x20000020

08004508 <__libc_init_array>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	2600      	movs	r6, #0
 800450c:	4d0c      	ldr	r5, [pc, #48]	@ (8004540 <__libc_init_array+0x38>)
 800450e:	4c0d      	ldr	r4, [pc, #52]	@ (8004544 <__libc_init_array+0x3c>)
 8004510:	1b64      	subs	r4, r4, r5
 8004512:	10a4      	asrs	r4, r4, #2
 8004514:	42a6      	cmp	r6, r4
 8004516:	d109      	bne.n	800452c <__libc_init_array+0x24>
 8004518:	f000 fc78 	bl	8004e0c <_init>
 800451c:	2600      	movs	r6, #0
 800451e:	4d0a      	ldr	r5, [pc, #40]	@ (8004548 <__libc_init_array+0x40>)
 8004520:	4c0a      	ldr	r4, [pc, #40]	@ (800454c <__libc_init_array+0x44>)
 8004522:	1b64      	subs	r4, r4, r5
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	42a6      	cmp	r6, r4
 8004528:	d105      	bne.n	8004536 <__libc_init_array+0x2e>
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004530:	4798      	blx	r3
 8004532:	3601      	adds	r6, #1
 8004534:	e7ee      	b.n	8004514 <__libc_init_array+0xc>
 8004536:	f855 3b04 	ldr.w	r3, [r5], #4
 800453a:	4798      	blx	r3
 800453c:	3601      	adds	r6, #1
 800453e:	e7f2      	b.n	8004526 <__libc_init_array+0x1e>
 8004540:	08005c2c 	.word	0x08005c2c
 8004544:	08005c2c 	.word	0x08005c2c
 8004548:	08005c2c 	.word	0x08005c2c
 800454c:	08005c30 	.word	0x08005c30

08004550 <__retarget_lock_acquire_recursive>:
 8004550:	4770      	bx	lr

08004552 <__retarget_lock_release_recursive>:
 8004552:	4770      	bx	lr

08004554 <_free_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4605      	mov	r5, r0
 8004558:	2900      	cmp	r1, #0
 800455a:	d040      	beq.n	80045de <_free_r+0x8a>
 800455c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004560:	1f0c      	subs	r4, r1, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfb8      	it	lt
 8004566:	18e4      	addlt	r4, r4, r3
 8004568:	f000 f8de 	bl	8004728 <__malloc_lock>
 800456c:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <_free_r+0x8c>)
 800456e:	6813      	ldr	r3, [r2, #0]
 8004570:	b933      	cbnz	r3, 8004580 <_free_r+0x2c>
 8004572:	6063      	str	r3, [r4, #4]
 8004574:	6014      	str	r4, [r2, #0]
 8004576:	4628      	mov	r0, r5
 8004578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800457c:	f000 b8da 	b.w	8004734 <__malloc_unlock>
 8004580:	42a3      	cmp	r3, r4
 8004582:	d908      	bls.n	8004596 <_free_r+0x42>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	1821      	adds	r1, r4, r0
 8004588:	428b      	cmp	r3, r1
 800458a:	bf01      	itttt	eq
 800458c:	6819      	ldreq	r1, [r3, #0]
 800458e:	685b      	ldreq	r3, [r3, #4]
 8004590:	1809      	addeq	r1, r1, r0
 8004592:	6021      	streq	r1, [r4, #0]
 8004594:	e7ed      	b.n	8004572 <_free_r+0x1e>
 8004596:	461a      	mov	r2, r3
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b10b      	cbz	r3, 80045a0 <_free_r+0x4c>
 800459c:	42a3      	cmp	r3, r4
 800459e:	d9fa      	bls.n	8004596 <_free_r+0x42>
 80045a0:	6811      	ldr	r1, [r2, #0]
 80045a2:	1850      	adds	r0, r2, r1
 80045a4:	42a0      	cmp	r0, r4
 80045a6:	d10b      	bne.n	80045c0 <_free_r+0x6c>
 80045a8:	6820      	ldr	r0, [r4, #0]
 80045aa:	4401      	add	r1, r0
 80045ac:	1850      	adds	r0, r2, r1
 80045ae:	4283      	cmp	r3, r0
 80045b0:	6011      	str	r1, [r2, #0]
 80045b2:	d1e0      	bne.n	8004576 <_free_r+0x22>
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4408      	add	r0, r1
 80045ba:	6010      	str	r0, [r2, #0]
 80045bc:	6053      	str	r3, [r2, #4]
 80045be:	e7da      	b.n	8004576 <_free_r+0x22>
 80045c0:	d902      	bls.n	80045c8 <_free_r+0x74>
 80045c2:	230c      	movs	r3, #12
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	e7d6      	b.n	8004576 <_free_r+0x22>
 80045c8:	6820      	ldr	r0, [r4, #0]
 80045ca:	1821      	adds	r1, r4, r0
 80045cc:	428b      	cmp	r3, r1
 80045ce:	bf01      	itttt	eq
 80045d0:	6819      	ldreq	r1, [r3, #0]
 80045d2:	685b      	ldreq	r3, [r3, #4]
 80045d4:	1809      	addeq	r1, r1, r0
 80045d6:	6021      	streq	r1, [r4, #0]
 80045d8:	6063      	str	r3, [r4, #4]
 80045da:	6054      	str	r4, [r2, #4]
 80045dc:	e7cb      	b.n	8004576 <_free_r+0x22>
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	2000063c 	.word	0x2000063c

080045e4 <sbrk_aligned>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	4e0f      	ldr	r6, [pc, #60]	@ (8004624 <sbrk_aligned+0x40>)
 80045e8:	460c      	mov	r4, r1
 80045ea:	6831      	ldr	r1, [r6, #0]
 80045ec:	4605      	mov	r5, r0
 80045ee:	b911      	cbnz	r1, 80045f6 <sbrk_aligned+0x12>
 80045f0:	f000 fbaa 	bl	8004d48 <_sbrk_r>
 80045f4:	6030      	str	r0, [r6, #0]
 80045f6:	4621      	mov	r1, r4
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 fba5 	bl	8004d48 <_sbrk_r>
 80045fe:	1c43      	adds	r3, r0, #1
 8004600:	d103      	bne.n	800460a <sbrk_aligned+0x26>
 8004602:	f04f 34ff 	mov.w	r4, #4294967295
 8004606:	4620      	mov	r0, r4
 8004608:	bd70      	pop	{r4, r5, r6, pc}
 800460a:	1cc4      	adds	r4, r0, #3
 800460c:	f024 0403 	bic.w	r4, r4, #3
 8004610:	42a0      	cmp	r0, r4
 8004612:	d0f8      	beq.n	8004606 <sbrk_aligned+0x22>
 8004614:	1a21      	subs	r1, r4, r0
 8004616:	4628      	mov	r0, r5
 8004618:	f000 fb96 	bl	8004d48 <_sbrk_r>
 800461c:	3001      	adds	r0, #1
 800461e:	d1f2      	bne.n	8004606 <sbrk_aligned+0x22>
 8004620:	e7ef      	b.n	8004602 <sbrk_aligned+0x1e>
 8004622:	bf00      	nop
 8004624:	20000638 	.word	0x20000638

08004628 <_malloc_r>:
 8004628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800462c:	1ccd      	adds	r5, r1, #3
 800462e:	f025 0503 	bic.w	r5, r5, #3
 8004632:	3508      	adds	r5, #8
 8004634:	2d0c      	cmp	r5, #12
 8004636:	bf38      	it	cc
 8004638:	250c      	movcc	r5, #12
 800463a:	2d00      	cmp	r5, #0
 800463c:	4606      	mov	r6, r0
 800463e:	db01      	blt.n	8004644 <_malloc_r+0x1c>
 8004640:	42a9      	cmp	r1, r5
 8004642:	d904      	bls.n	800464e <_malloc_r+0x26>
 8004644:	230c      	movs	r3, #12
 8004646:	6033      	str	r3, [r6, #0]
 8004648:	2000      	movs	r0, #0
 800464a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800464e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004724 <_malloc_r+0xfc>
 8004652:	f000 f869 	bl	8004728 <__malloc_lock>
 8004656:	f8d8 3000 	ldr.w	r3, [r8]
 800465a:	461c      	mov	r4, r3
 800465c:	bb44      	cbnz	r4, 80046b0 <_malloc_r+0x88>
 800465e:	4629      	mov	r1, r5
 8004660:	4630      	mov	r0, r6
 8004662:	f7ff ffbf 	bl	80045e4 <sbrk_aligned>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	4604      	mov	r4, r0
 800466a:	d158      	bne.n	800471e <_malloc_r+0xf6>
 800466c:	f8d8 4000 	ldr.w	r4, [r8]
 8004670:	4627      	mov	r7, r4
 8004672:	2f00      	cmp	r7, #0
 8004674:	d143      	bne.n	80046fe <_malloc_r+0xd6>
 8004676:	2c00      	cmp	r4, #0
 8004678:	d04b      	beq.n	8004712 <_malloc_r+0xea>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	4639      	mov	r1, r7
 800467e:	4630      	mov	r0, r6
 8004680:	eb04 0903 	add.w	r9, r4, r3
 8004684:	f000 fb60 	bl	8004d48 <_sbrk_r>
 8004688:	4581      	cmp	r9, r0
 800468a:	d142      	bne.n	8004712 <_malloc_r+0xea>
 800468c:	6821      	ldr	r1, [r4, #0]
 800468e:	4630      	mov	r0, r6
 8004690:	1a6d      	subs	r5, r5, r1
 8004692:	4629      	mov	r1, r5
 8004694:	f7ff ffa6 	bl	80045e4 <sbrk_aligned>
 8004698:	3001      	adds	r0, #1
 800469a:	d03a      	beq.n	8004712 <_malloc_r+0xea>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	442b      	add	r3, r5
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	f8d8 3000 	ldr.w	r3, [r8]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	bb62      	cbnz	r2, 8004704 <_malloc_r+0xdc>
 80046aa:	f8c8 7000 	str.w	r7, [r8]
 80046ae:	e00f      	b.n	80046d0 <_malloc_r+0xa8>
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	1b52      	subs	r2, r2, r5
 80046b4:	d420      	bmi.n	80046f8 <_malloc_r+0xd0>
 80046b6:	2a0b      	cmp	r2, #11
 80046b8:	d917      	bls.n	80046ea <_malloc_r+0xc2>
 80046ba:	1961      	adds	r1, r4, r5
 80046bc:	42a3      	cmp	r3, r4
 80046be:	6025      	str	r5, [r4, #0]
 80046c0:	bf18      	it	ne
 80046c2:	6059      	strne	r1, [r3, #4]
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	bf08      	it	eq
 80046c8:	f8c8 1000 	streq.w	r1, [r8]
 80046cc:	5162      	str	r2, [r4, r5]
 80046ce:	604b      	str	r3, [r1, #4]
 80046d0:	4630      	mov	r0, r6
 80046d2:	f000 f82f 	bl	8004734 <__malloc_unlock>
 80046d6:	f104 000b 	add.w	r0, r4, #11
 80046da:	1d23      	adds	r3, r4, #4
 80046dc:	f020 0007 	bic.w	r0, r0, #7
 80046e0:	1ac2      	subs	r2, r0, r3
 80046e2:	bf1c      	itt	ne
 80046e4:	1a1b      	subne	r3, r3, r0
 80046e6:	50a3      	strne	r3, [r4, r2]
 80046e8:	e7af      	b.n	800464a <_malloc_r+0x22>
 80046ea:	6862      	ldr	r2, [r4, #4]
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	bf0c      	ite	eq
 80046f0:	f8c8 2000 	streq.w	r2, [r8]
 80046f4:	605a      	strne	r2, [r3, #4]
 80046f6:	e7eb      	b.n	80046d0 <_malloc_r+0xa8>
 80046f8:	4623      	mov	r3, r4
 80046fa:	6864      	ldr	r4, [r4, #4]
 80046fc:	e7ae      	b.n	800465c <_malloc_r+0x34>
 80046fe:	463c      	mov	r4, r7
 8004700:	687f      	ldr	r7, [r7, #4]
 8004702:	e7b6      	b.n	8004672 <_malloc_r+0x4a>
 8004704:	461a      	mov	r2, r3
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	42a3      	cmp	r3, r4
 800470a:	d1fb      	bne.n	8004704 <_malloc_r+0xdc>
 800470c:	2300      	movs	r3, #0
 800470e:	6053      	str	r3, [r2, #4]
 8004710:	e7de      	b.n	80046d0 <_malloc_r+0xa8>
 8004712:	230c      	movs	r3, #12
 8004714:	4630      	mov	r0, r6
 8004716:	6033      	str	r3, [r6, #0]
 8004718:	f000 f80c 	bl	8004734 <__malloc_unlock>
 800471c:	e794      	b.n	8004648 <_malloc_r+0x20>
 800471e:	6005      	str	r5, [r0, #0]
 8004720:	e7d6      	b.n	80046d0 <_malloc_r+0xa8>
 8004722:	bf00      	nop
 8004724:	2000063c 	.word	0x2000063c

08004728 <__malloc_lock>:
 8004728:	4801      	ldr	r0, [pc, #4]	@ (8004730 <__malloc_lock+0x8>)
 800472a:	f7ff bf11 	b.w	8004550 <__retarget_lock_acquire_recursive>
 800472e:	bf00      	nop
 8004730:	20000634 	.word	0x20000634

08004734 <__malloc_unlock>:
 8004734:	4801      	ldr	r0, [pc, #4]	@ (800473c <__malloc_unlock+0x8>)
 8004736:	f7ff bf0c 	b.w	8004552 <__retarget_lock_release_recursive>
 800473a:	bf00      	nop
 800473c:	20000634 	.word	0x20000634

08004740 <__ssputs_r>:
 8004740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	461f      	mov	r7, r3
 8004746:	688e      	ldr	r6, [r1, #8]
 8004748:	4682      	mov	sl, r0
 800474a:	42be      	cmp	r6, r7
 800474c:	460c      	mov	r4, r1
 800474e:	4690      	mov	r8, r2
 8004750:	680b      	ldr	r3, [r1, #0]
 8004752:	d82d      	bhi.n	80047b0 <__ssputs_r+0x70>
 8004754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004758:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800475c:	d026      	beq.n	80047ac <__ssputs_r+0x6c>
 800475e:	6965      	ldr	r5, [r4, #20]
 8004760:	6909      	ldr	r1, [r1, #16]
 8004762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004766:	eba3 0901 	sub.w	r9, r3, r1
 800476a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800476e:	1c7b      	adds	r3, r7, #1
 8004770:	444b      	add	r3, r9
 8004772:	106d      	asrs	r5, r5, #1
 8004774:	429d      	cmp	r5, r3
 8004776:	bf38      	it	cc
 8004778:	461d      	movcc	r5, r3
 800477a:	0553      	lsls	r3, r2, #21
 800477c:	d527      	bpl.n	80047ce <__ssputs_r+0x8e>
 800477e:	4629      	mov	r1, r5
 8004780:	f7ff ff52 	bl	8004628 <_malloc_r>
 8004784:	4606      	mov	r6, r0
 8004786:	b360      	cbz	r0, 80047e2 <__ssputs_r+0xa2>
 8004788:	464a      	mov	r2, r9
 800478a:	6921      	ldr	r1, [r4, #16]
 800478c:	f000 fafa 	bl	8004d84 <memcpy>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	6126      	str	r6, [r4, #16]
 800479e:	444e      	add	r6, r9
 80047a0:	6026      	str	r6, [r4, #0]
 80047a2:	463e      	mov	r6, r7
 80047a4:	6165      	str	r5, [r4, #20]
 80047a6:	eba5 0509 	sub.w	r5, r5, r9
 80047aa:	60a5      	str	r5, [r4, #8]
 80047ac:	42be      	cmp	r6, r7
 80047ae:	d900      	bls.n	80047b2 <__ssputs_r+0x72>
 80047b0:	463e      	mov	r6, r7
 80047b2:	4632      	mov	r2, r6
 80047b4:	4641      	mov	r1, r8
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	f000 faac 	bl	8004d14 <memmove>
 80047bc:	2000      	movs	r0, #0
 80047be:	68a3      	ldr	r3, [r4, #8]
 80047c0:	1b9b      	subs	r3, r3, r6
 80047c2:	60a3      	str	r3, [r4, #8]
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	4433      	add	r3, r6
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ce:	462a      	mov	r2, r5
 80047d0:	f000 fae6 	bl	8004da0 <_realloc_r>
 80047d4:	4606      	mov	r6, r0
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d1e0      	bne.n	800479c <__ssputs_r+0x5c>
 80047da:	4650      	mov	r0, sl
 80047dc:	6921      	ldr	r1, [r4, #16]
 80047de:	f7ff feb9 	bl	8004554 <_free_r>
 80047e2:	230c      	movs	r3, #12
 80047e4:	f8ca 3000 	str.w	r3, [sl]
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	e7e9      	b.n	80047ca <__ssputs_r+0x8a>
	...

080047f8 <_svfiprintf_r>:
 80047f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fc:	4698      	mov	r8, r3
 80047fe:	898b      	ldrh	r3, [r1, #12]
 8004800:	4607      	mov	r7, r0
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	460d      	mov	r5, r1
 8004806:	4614      	mov	r4, r2
 8004808:	b09d      	sub	sp, #116	@ 0x74
 800480a:	d510      	bpl.n	800482e <_svfiprintf_r+0x36>
 800480c:	690b      	ldr	r3, [r1, #16]
 800480e:	b973      	cbnz	r3, 800482e <_svfiprintf_r+0x36>
 8004810:	2140      	movs	r1, #64	@ 0x40
 8004812:	f7ff ff09 	bl	8004628 <_malloc_r>
 8004816:	6028      	str	r0, [r5, #0]
 8004818:	6128      	str	r0, [r5, #16]
 800481a:	b930      	cbnz	r0, 800482a <_svfiprintf_r+0x32>
 800481c:	230c      	movs	r3, #12
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	b01d      	add	sp, #116	@ 0x74
 8004826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482a:	2340      	movs	r3, #64	@ 0x40
 800482c:	616b      	str	r3, [r5, #20]
 800482e:	2300      	movs	r3, #0
 8004830:	9309      	str	r3, [sp, #36]	@ 0x24
 8004832:	2320      	movs	r3, #32
 8004834:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004838:	2330      	movs	r3, #48	@ 0x30
 800483a:	f04f 0901 	mov.w	r9, #1
 800483e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004842:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80049dc <_svfiprintf_r+0x1e4>
 8004846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800484a:	4623      	mov	r3, r4
 800484c:	469a      	mov	sl, r3
 800484e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004852:	b10a      	cbz	r2, 8004858 <_svfiprintf_r+0x60>
 8004854:	2a25      	cmp	r2, #37	@ 0x25
 8004856:	d1f9      	bne.n	800484c <_svfiprintf_r+0x54>
 8004858:	ebba 0b04 	subs.w	fp, sl, r4
 800485c:	d00b      	beq.n	8004876 <_svfiprintf_r+0x7e>
 800485e:	465b      	mov	r3, fp
 8004860:	4622      	mov	r2, r4
 8004862:	4629      	mov	r1, r5
 8004864:	4638      	mov	r0, r7
 8004866:	f7ff ff6b 	bl	8004740 <__ssputs_r>
 800486a:	3001      	adds	r0, #1
 800486c:	f000 80a7 	beq.w	80049be <_svfiprintf_r+0x1c6>
 8004870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004872:	445a      	add	r2, fp
 8004874:	9209      	str	r2, [sp, #36]	@ 0x24
 8004876:	f89a 3000 	ldrb.w	r3, [sl]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 809f 	beq.w	80049be <_svfiprintf_r+0x1c6>
 8004880:	2300      	movs	r3, #0
 8004882:	f04f 32ff 	mov.w	r2, #4294967295
 8004886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800488a:	f10a 0a01 	add.w	sl, sl, #1
 800488e:	9304      	str	r3, [sp, #16]
 8004890:	9307      	str	r3, [sp, #28]
 8004892:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004896:	931a      	str	r3, [sp, #104]	@ 0x68
 8004898:	4654      	mov	r4, sl
 800489a:	2205      	movs	r2, #5
 800489c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a0:	484e      	ldr	r0, [pc, #312]	@ (80049dc <_svfiprintf_r+0x1e4>)
 80048a2:	f000 fa61 	bl	8004d68 <memchr>
 80048a6:	9a04      	ldr	r2, [sp, #16]
 80048a8:	b9d8      	cbnz	r0, 80048e2 <_svfiprintf_r+0xea>
 80048aa:	06d0      	lsls	r0, r2, #27
 80048ac:	bf44      	itt	mi
 80048ae:	2320      	movmi	r3, #32
 80048b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048b4:	0711      	lsls	r1, r2, #28
 80048b6:	bf44      	itt	mi
 80048b8:	232b      	movmi	r3, #43	@ 0x2b
 80048ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048be:	f89a 3000 	ldrb.w	r3, [sl]
 80048c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80048c4:	d015      	beq.n	80048f2 <_svfiprintf_r+0xfa>
 80048c6:	4654      	mov	r4, sl
 80048c8:	2000      	movs	r0, #0
 80048ca:	f04f 0c0a 	mov.w	ip, #10
 80048ce:	9a07      	ldr	r2, [sp, #28]
 80048d0:	4621      	mov	r1, r4
 80048d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048d6:	3b30      	subs	r3, #48	@ 0x30
 80048d8:	2b09      	cmp	r3, #9
 80048da:	d94b      	bls.n	8004974 <_svfiprintf_r+0x17c>
 80048dc:	b1b0      	cbz	r0, 800490c <_svfiprintf_r+0x114>
 80048de:	9207      	str	r2, [sp, #28]
 80048e0:	e014      	b.n	800490c <_svfiprintf_r+0x114>
 80048e2:	eba0 0308 	sub.w	r3, r0, r8
 80048e6:	fa09 f303 	lsl.w	r3, r9, r3
 80048ea:	4313      	orrs	r3, r2
 80048ec:	46a2      	mov	sl, r4
 80048ee:	9304      	str	r3, [sp, #16]
 80048f0:	e7d2      	b.n	8004898 <_svfiprintf_r+0xa0>
 80048f2:	9b03      	ldr	r3, [sp, #12]
 80048f4:	1d19      	adds	r1, r3, #4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	9103      	str	r1, [sp, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bfbb      	ittet	lt
 80048fe:	425b      	neglt	r3, r3
 8004900:	f042 0202 	orrlt.w	r2, r2, #2
 8004904:	9307      	strge	r3, [sp, #28]
 8004906:	9307      	strlt	r3, [sp, #28]
 8004908:	bfb8      	it	lt
 800490a:	9204      	strlt	r2, [sp, #16]
 800490c:	7823      	ldrb	r3, [r4, #0]
 800490e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004910:	d10a      	bne.n	8004928 <_svfiprintf_r+0x130>
 8004912:	7863      	ldrb	r3, [r4, #1]
 8004914:	2b2a      	cmp	r3, #42	@ 0x2a
 8004916:	d132      	bne.n	800497e <_svfiprintf_r+0x186>
 8004918:	9b03      	ldr	r3, [sp, #12]
 800491a:	3402      	adds	r4, #2
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	9203      	str	r2, [sp, #12]
 8004922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004926:	9305      	str	r3, [sp, #20]
 8004928:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80049e0 <_svfiprintf_r+0x1e8>
 800492c:	2203      	movs	r2, #3
 800492e:	4650      	mov	r0, sl
 8004930:	7821      	ldrb	r1, [r4, #0]
 8004932:	f000 fa19 	bl	8004d68 <memchr>
 8004936:	b138      	cbz	r0, 8004948 <_svfiprintf_r+0x150>
 8004938:	2240      	movs	r2, #64	@ 0x40
 800493a:	9b04      	ldr	r3, [sp, #16]
 800493c:	eba0 000a 	sub.w	r0, r0, sl
 8004940:	4082      	lsls	r2, r0
 8004942:	4313      	orrs	r3, r2
 8004944:	3401      	adds	r4, #1
 8004946:	9304      	str	r3, [sp, #16]
 8004948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494c:	2206      	movs	r2, #6
 800494e:	4825      	ldr	r0, [pc, #148]	@ (80049e4 <_svfiprintf_r+0x1ec>)
 8004950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004954:	f000 fa08 	bl	8004d68 <memchr>
 8004958:	2800      	cmp	r0, #0
 800495a:	d036      	beq.n	80049ca <_svfiprintf_r+0x1d2>
 800495c:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <_svfiprintf_r+0x1f0>)
 800495e:	bb1b      	cbnz	r3, 80049a8 <_svfiprintf_r+0x1b0>
 8004960:	9b03      	ldr	r3, [sp, #12]
 8004962:	3307      	adds	r3, #7
 8004964:	f023 0307 	bic.w	r3, r3, #7
 8004968:	3308      	adds	r3, #8
 800496a:	9303      	str	r3, [sp, #12]
 800496c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800496e:	4433      	add	r3, r6
 8004970:	9309      	str	r3, [sp, #36]	@ 0x24
 8004972:	e76a      	b.n	800484a <_svfiprintf_r+0x52>
 8004974:	460c      	mov	r4, r1
 8004976:	2001      	movs	r0, #1
 8004978:	fb0c 3202 	mla	r2, ip, r2, r3
 800497c:	e7a8      	b.n	80048d0 <_svfiprintf_r+0xd8>
 800497e:	2300      	movs	r3, #0
 8004980:	f04f 0c0a 	mov.w	ip, #10
 8004984:	4619      	mov	r1, r3
 8004986:	3401      	adds	r4, #1
 8004988:	9305      	str	r3, [sp, #20]
 800498a:	4620      	mov	r0, r4
 800498c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004990:	3a30      	subs	r2, #48	@ 0x30
 8004992:	2a09      	cmp	r2, #9
 8004994:	d903      	bls.n	800499e <_svfiprintf_r+0x1a6>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0c6      	beq.n	8004928 <_svfiprintf_r+0x130>
 800499a:	9105      	str	r1, [sp, #20]
 800499c:	e7c4      	b.n	8004928 <_svfiprintf_r+0x130>
 800499e:	4604      	mov	r4, r0
 80049a0:	2301      	movs	r3, #1
 80049a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049a6:	e7f0      	b.n	800498a <_svfiprintf_r+0x192>
 80049a8:	ab03      	add	r3, sp, #12
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	462a      	mov	r2, r5
 80049ae:	4638      	mov	r0, r7
 80049b0:	4b0e      	ldr	r3, [pc, #56]	@ (80049ec <_svfiprintf_r+0x1f4>)
 80049b2:	a904      	add	r1, sp, #16
 80049b4:	f3af 8000 	nop.w
 80049b8:	1c42      	adds	r2, r0, #1
 80049ba:	4606      	mov	r6, r0
 80049bc:	d1d6      	bne.n	800496c <_svfiprintf_r+0x174>
 80049be:	89ab      	ldrh	r3, [r5, #12]
 80049c0:	065b      	lsls	r3, r3, #25
 80049c2:	f53f af2d 	bmi.w	8004820 <_svfiprintf_r+0x28>
 80049c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049c8:	e72c      	b.n	8004824 <_svfiprintf_r+0x2c>
 80049ca:	ab03      	add	r3, sp, #12
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	462a      	mov	r2, r5
 80049d0:	4638      	mov	r0, r7
 80049d2:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <_svfiprintf_r+0x1f4>)
 80049d4:	a904      	add	r1, sp, #16
 80049d6:	f000 f87d 	bl	8004ad4 <_printf_i>
 80049da:	e7ed      	b.n	80049b8 <_svfiprintf_r+0x1c0>
 80049dc:	08005bf9 	.word	0x08005bf9
 80049e0:	08005bff 	.word	0x08005bff
 80049e4:	08005c03 	.word	0x08005c03
 80049e8:	00000000 	.word	0x00000000
 80049ec:	08004741 	.word	0x08004741

080049f0 <_printf_common>:
 80049f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f4:	4616      	mov	r6, r2
 80049f6:	4698      	mov	r8, r3
 80049f8:	688a      	ldr	r2, [r1, #8]
 80049fa:	690b      	ldr	r3, [r1, #16]
 80049fc:	4607      	mov	r7, r0
 80049fe:	4293      	cmp	r3, r2
 8004a00:	bfb8      	it	lt
 8004a02:	4613      	movlt	r3, r2
 8004a04:	6033      	str	r3, [r6, #0]
 8004a06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a10:	b10a      	cbz	r2, 8004a16 <_printf_common+0x26>
 8004a12:	3301      	adds	r3, #1
 8004a14:	6033      	str	r3, [r6, #0]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	0699      	lsls	r1, r3, #26
 8004a1a:	bf42      	ittt	mi
 8004a1c:	6833      	ldrmi	r3, [r6, #0]
 8004a1e:	3302      	addmi	r3, #2
 8004a20:	6033      	strmi	r3, [r6, #0]
 8004a22:	6825      	ldr	r5, [r4, #0]
 8004a24:	f015 0506 	ands.w	r5, r5, #6
 8004a28:	d106      	bne.n	8004a38 <_printf_common+0x48>
 8004a2a:	f104 0a19 	add.w	sl, r4, #25
 8004a2e:	68e3      	ldr	r3, [r4, #12]
 8004a30:	6832      	ldr	r2, [r6, #0]
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	42ab      	cmp	r3, r5
 8004a36:	dc2b      	bgt.n	8004a90 <_printf_common+0xa0>
 8004a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a3c:	6822      	ldr	r2, [r4, #0]
 8004a3e:	3b00      	subs	r3, #0
 8004a40:	bf18      	it	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	0692      	lsls	r2, r2, #26
 8004a46:	d430      	bmi.n	8004aaa <_printf_common+0xba>
 8004a48:	4641      	mov	r1, r8
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a50:	47c8      	blx	r9
 8004a52:	3001      	adds	r0, #1
 8004a54:	d023      	beq.n	8004a9e <_printf_common+0xae>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	6922      	ldr	r2, [r4, #16]
 8004a5a:	f003 0306 	and.w	r3, r3, #6
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	bf14      	ite	ne
 8004a62:	2500      	movne	r5, #0
 8004a64:	6833      	ldreq	r3, [r6, #0]
 8004a66:	f04f 0600 	mov.w	r6, #0
 8004a6a:	bf08      	it	eq
 8004a6c:	68e5      	ldreq	r5, [r4, #12]
 8004a6e:	f104 041a 	add.w	r4, r4, #26
 8004a72:	bf08      	it	eq
 8004a74:	1aed      	subeq	r5, r5, r3
 8004a76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a7a:	bf08      	it	eq
 8004a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a80:	4293      	cmp	r3, r2
 8004a82:	bfc4      	itt	gt
 8004a84:	1a9b      	subgt	r3, r3, r2
 8004a86:	18ed      	addgt	r5, r5, r3
 8004a88:	42b5      	cmp	r5, r6
 8004a8a:	d11a      	bne.n	8004ac2 <_printf_common+0xd2>
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	e008      	b.n	8004aa2 <_printf_common+0xb2>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4652      	mov	r2, sl
 8004a94:	4641      	mov	r1, r8
 8004a96:	4638      	mov	r0, r7
 8004a98:	47c8      	blx	r9
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d103      	bne.n	8004aa6 <_printf_common+0xb6>
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa6:	3501      	adds	r5, #1
 8004aa8:	e7c1      	b.n	8004a2e <_printf_common+0x3e>
 8004aaa:	2030      	movs	r0, #48	@ 0x30
 8004aac:	18e1      	adds	r1, r4, r3
 8004aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ab8:	4422      	add	r2, r4
 8004aba:	3302      	adds	r3, #2
 8004abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ac0:	e7c2      	b.n	8004a48 <_printf_common+0x58>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	4638      	mov	r0, r7
 8004aca:	47c8      	blx	r9
 8004acc:	3001      	adds	r0, #1
 8004ace:	d0e6      	beq.n	8004a9e <_printf_common+0xae>
 8004ad0:	3601      	adds	r6, #1
 8004ad2:	e7d9      	b.n	8004a88 <_printf_common+0x98>

08004ad4 <_printf_i>:
 8004ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	7e0f      	ldrb	r7, [r1, #24]
 8004ada:	4691      	mov	r9, r2
 8004adc:	2f78      	cmp	r7, #120	@ 0x78
 8004ade:	4680      	mov	r8, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	469a      	mov	sl, r3
 8004ae4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004aea:	d807      	bhi.n	8004afc <_printf_i+0x28>
 8004aec:	2f62      	cmp	r7, #98	@ 0x62
 8004aee:	d80a      	bhi.n	8004b06 <_printf_i+0x32>
 8004af0:	2f00      	cmp	r7, #0
 8004af2:	f000 80d3 	beq.w	8004c9c <_printf_i+0x1c8>
 8004af6:	2f58      	cmp	r7, #88	@ 0x58
 8004af8:	f000 80ba 	beq.w	8004c70 <_printf_i+0x19c>
 8004afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b04:	e03a      	b.n	8004b7c <_printf_i+0xa8>
 8004b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b0a:	2b15      	cmp	r3, #21
 8004b0c:	d8f6      	bhi.n	8004afc <_printf_i+0x28>
 8004b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b14 <_printf_i+0x40>)
 8004b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004afd 	.word	0x08004afd
 8004b20:	08004afd 	.word	0x08004afd
 8004b24:	08004afd 	.word	0x08004afd
 8004b28:	08004afd 	.word	0x08004afd
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004afd 	.word	0x08004afd
 8004b34:	08004afd 	.word	0x08004afd
 8004b38:	08004afd 	.word	0x08004afd
 8004b3c:	08004afd 	.word	0x08004afd
 8004b40:	08004c83 	.word	0x08004c83
 8004b44:	08004bab 	.word	0x08004bab
 8004b48:	08004c3d 	.word	0x08004c3d
 8004b4c:	08004afd 	.word	0x08004afd
 8004b50:	08004afd 	.word	0x08004afd
 8004b54:	08004ca5 	.word	0x08004ca5
 8004b58:	08004afd 	.word	0x08004afd
 8004b5c:	08004bab 	.word	0x08004bab
 8004b60:	08004afd 	.word	0x08004afd
 8004b64:	08004afd 	.word	0x08004afd
 8004b68:	08004c45 	.word	0x08004c45
 8004b6c:	6833      	ldr	r3, [r6, #0]
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6032      	str	r2, [r6, #0]
 8004b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e09e      	b.n	8004cbe <_printf_i+0x1ea>
 8004b80:	6833      	ldr	r3, [r6, #0]
 8004b82:	6820      	ldr	r0, [r4, #0]
 8004b84:	1d19      	adds	r1, r3, #4
 8004b86:	6031      	str	r1, [r6, #0]
 8004b88:	0606      	lsls	r6, r0, #24
 8004b8a:	d501      	bpl.n	8004b90 <_printf_i+0xbc>
 8004b8c:	681d      	ldr	r5, [r3, #0]
 8004b8e:	e003      	b.n	8004b98 <_printf_i+0xc4>
 8004b90:	0645      	lsls	r5, r0, #25
 8004b92:	d5fb      	bpl.n	8004b8c <_printf_i+0xb8>
 8004b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	da03      	bge.n	8004ba4 <_printf_i+0xd0>
 8004b9c:	232d      	movs	r3, #45	@ 0x2d
 8004b9e:	426d      	negs	r5, r5
 8004ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	4859      	ldr	r0, [pc, #356]	@ (8004d0c <_printf_i+0x238>)
 8004ba8:	e011      	b.n	8004bce <_printf_i+0xfa>
 8004baa:	6821      	ldr	r1, [r4, #0]
 8004bac:	6833      	ldr	r3, [r6, #0]
 8004bae:	0608      	lsls	r0, r1, #24
 8004bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bb4:	d402      	bmi.n	8004bbc <_printf_i+0xe8>
 8004bb6:	0649      	lsls	r1, r1, #25
 8004bb8:	bf48      	it	mi
 8004bba:	b2ad      	uxthmi	r5, r5
 8004bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bbe:	6033      	str	r3, [r6, #0]
 8004bc0:	bf14      	ite	ne
 8004bc2:	230a      	movne	r3, #10
 8004bc4:	2308      	moveq	r3, #8
 8004bc6:	4851      	ldr	r0, [pc, #324]	@ (8004d0c <_printf_i+0x238>)
 8004bc8:	2100      	movs	r1, #0
 8004bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bce:	6866      	ldr	r6, [r4, #4]
 8004bd0:	2e00      	cmp	r6, #0
 8004bd2:	bfa8      	it	ge
 8004bd4:	6821      	ldrge	r1, [r4, #0]
 8004bd6:	60a6      	str	r6, [r4, #8]
 8004bd8:	bfa4      	itt	ge
 8004bda:	f021 0104 	bicge.w	r1, r1, #4
 8004bde:	6021      	strge	r1, [r4, #0]
 8004be0:	b90d      	cbnz	r5, 8004be6 <_printf_i+0x112>
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d04b      	beq.n	8004c7e <_printf_i+0x1aa>
 8004be6:	4616      	mov	r6, r2
 8004be8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bec:	fb03 5711 	mls	r7, r3, r1, r5
 8004bf0:	5dc7      	ldrb	r7, [r0, r7]
 8004bf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bf6:	462f      	mov	r7, r5
 8004bf8:	42bb      	cmp	r3, r7
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	d9f4      	bls.n	8004be8 <_printf_i+0x114>
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d10b      	bne.n	8004c1a <_printf_i+0x146>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	07df      	lsls	r7, r3, #31
 8004c06:	d508      	bpl.n	8004c1a <_printf_i+0x146>
 8004c08:	6923      	ldr	r3, [r4, #16]
 8004c0a:	6861      	ldr	r1, [r4, #4]
 8004c0c:	4299      	cmp	r1, r3
 8004c0e:	bfde      	ittt	le
 8004c10:	2330      	movle	r3, #48	@ 0x30
 8004c12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c1a:	1b92      	subs	r2, r2, r6
 8004c1c:	6122      	str	r2, [r4, #16]
 8004c1e:	464b      	mov	r3, r9
 8004c20:	4621      	mov	r1, r4
 8004c22:	4640      	mov	r0, r8
 8004c24:	f8cd a000 	str.w	sl, [sp]
 8004c28:	aa03      	add	r2, sp, #12
 8004c2a:	f7ff fee1 	bl	80049f0 <_printf_common>
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d14a      	bne.n	8004cc8 <_printf_i+0x1f4>
 8004c32:	f04f 30ff 	mov.w	r0, #4294967295
 8004c36:	b004      	add	sp, #16
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	2778      	movs	r7, #120	@ 0x78
 8004c46:	4832      	ldr	r0, [pc, #200]	@ (8004d10 <_printf_i+0x23c>)
 8004c48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	6831      	ldr	r1, [r6, #0]
 8004c50:	061f      	lsls	r7, r3, #24
 8004c52:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c56:	d402      	bmi.n	8004c5e <_printf_i+0x18a>
 8004c58:	065f      	lsls	r7, r3, #25
 8004c5a:	bf48      	it	mi
 8004c5c:	b2ad      	uxthmi	r5, r5
 8004c5e:	6031      	str	r1, [r6, #0]
 8004c60:	07d9      	lsls	r1, r3, #31
 8004c62:	bf44      	itt	mi
 8004c64:	f043 0320 	orrmi.w	r3, r3, #32
 8004c68:	6023      	strmi	r3, [r4, #0]
 8004c6a:	b11d      	cbz	r5, 8004c74 <_printf_i+0x1a0>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	e7ab      	b.n	8004bc8 <_printf_i+0xf4>
 8004c70:	4826      	ldr	r0, [pc, #152]	@ (8004d0c <_printf_i+0x238>)
 8004c72:	e7e9      	b.n	8004c48 <_printf_i+0x174>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	f023 0320 	bic.w	r3, r3, #32
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	e7f6      	b.n	8004c6c <_printf_i+0x198>
 8004c7e:	4616      	mov	r6, r2
 8004c80:	e7bd      	b.n	8004bfe <_printf_i+0x12a>
 8004c82:	6833      	ldr	r3, [r6, #0]
 8004c84:	6825      	ldr	r5, [r4, #0]
 8004c86:	1d18      	adds	r0, r3, #4
 8004c88:	6961      	ldr	r1, [r4, #20]
 8004c8a:	6030      	str	r0, [r6, #0]
 8004c8c:	062e      	lsls	r6, r5, #24
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	d501      	bpl.n	8004c96 <_printf_i+0x1c2>
 8004c92:	6019      	str	r1, [r3, #0]
 8004c94:	e002      	b.n	8004c9c <_printf_i+0x1c8>
 8004c96:	0668      	lsls	r0, r5, #25
 8004c98:	d5fb      	bpl.n	8004c92 <_printf_i+0x1be>
 8004c9a:	8019      	strh	r1, [r3, #0]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4616      	mov	r6, r2
 8004ca0:	6123      	str	r3, [r4, #16]
 8004ca2:	e7bc      	b.n	8004c1e <_printf_i+0x14a>
 8004ca4:	6833      	ldr	r3, [r6, #0]
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	1d1a      	adds	r2, r3, #4
 8004caa:	6032      	str	r2, [r6, #0]
 8004cac:	681e      	ldr	r6, [r3, #0]
 8004cae:	6862      	ldr	r2, [r4, #4]
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f000 f859 	bl	8004d68 <memchr>
 8004cb6:	b108      	cbz	r0, 8004cbc <_printf_i+0x1e8>
 8004cb8:	1b80      	subs	r0, r0, r6
 8004cba:	6060      	str	r0, [r4, #4]
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cc6:	e7aa      	b.n	8004c1e <_printf_i+0x14a>
 8004cc8:	4632      	mov	r2, r6
 8004cca:	4649      	mov	r1, r9
 8004ccc:	4640      	mov	r0, r8
 8004cce:	6923      	ldr	r3, [r4, #16]
 8004cd0:	47d0      	blx	sl
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d0ad      	beq.n	8004c32 <_printf_i+0x15e>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	079b      	lsls	r3, r3, #30
 8004cda:	d413      	bmi.n	8004d04 <_printf_i+0x230>
 8004cdc:	68e0      	ldr	r0, [r4, #12]
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	4298      	cmp	r0, r3
 8004ce2:	bfb8      	it	lt
 8004ce4:	4618      	movlt	r0, r3
 8004ce6:	e7a6      	b.n	8004c36 <_printf_i+0x162>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4632      	mov	r2, r6
 8004cec:	4649      	mov	r1, r9
 8004cee:	4640      	mov	r0, r8
 8004cf0:	47d0      	blx	sl
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d09d      	beq.n	8004c32 <_printf_i+0x15e>
 8004cf6:	3501      	adds	r5, #1
 8004cf8:	68e3      	ldr	r3, [r4, #12]
 8004cfa:	9903      	ldr	r1, [sp, #12]
 8004cfc:	1a5b      	subs	r3, r3, r1
 8004cfe:	42ab      	cmp	r3, r5
 8004d00:	dcf2      	bgt.n	8004ce8 <_printf_i+0x214>
 8004d02:	e7eb      	b.n	8004cdc <_printf_i+0x208>
 8004d04:	2500      	movs	r5, #0
 8004d06:	f104 0619 	add.w	r6, r4, #25
 8004d0a:	e7f5      	b.n	8004cf8 <_printf_i+0x224>
 8004d0c:	08005c0a 	.word	0x08005c0a
 8004d10:	08005c1b 	.word	0x08005c1b

08004d14 <memmove>:
 8004d14:	4288      	cmp	r0, r1
 8004d16:	b510      	push	{r4, lr}
 8004d18:	eb01 0402 	add.w	r4, r1, r2
 8004d1c:	d902      	bls.n	8004d24 <memmove+0x10>
 8004d1e:	4284      	cmp	r4, r0
 8004d20:	4623      	mov	r3, r4
 8004d22:	d807      	bhi.n	8004d34 <memmove+0x20>
 8004d24:	1e43      	subs	r3, r0, #1
 8004d26:	42a1      	cmp	r1, r4
 8004d28:	d008      	beq.n	8004d3c <memmove+0x28>
 8004d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d32:	e7f8      	b.n	8004d26 <memmove+0x12>
 8004d34:	4601      	mov	r1, r0
 8004d36:	4402      	add	r2, r0
 8004d38:	428a      	cmp	r2, r1
 8004d3a:	d100      	bne.n	8004d3e <memmove+0x2a>
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d46:	e7f7      	b.n	8004d38 <memmove+0x24>

08004d48 <_sbrk_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	4d05      	ldr	r5, [pc, #20]	@ (8004d64 <_sbrk_r+0x1c>)
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4608      	mov	r0, r1
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	f7fc f840 	bl	8000dd8 <_sbrk>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d102      	bne.n	8004d62 <_sbrk_r+0x1a>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	b103      	cbz	r3, 8004d62 <_sbrk_r+0x1a>
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	20000630 	.word	0x20000630

08004d68 <memchr>:
 8004d68:	4603      	mov	r3, r0
 8004d6a:	b510      	push	{r4, lr}
 8004d6c:	b2c9      	uxtb	r1, r1
 8004d6e:	4402      	add	r2, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	d101      	bne.n	8004d7a <memchr+0x12>
 8004d76:	2000      	movs	r0, #0
 8004d78:	e003      	b.n	8004d82 <memchr+0x1a>
 8004d7a:	7804      	ldrb	r4, [r0, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	428c      	cmp	r4, r1
 8004d80:	d1f6      	bne.n	8004d70 <memchr+0x8>
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <memcpy>:
 8004d84:	440a      	add	r2, r1
 8004d86:	4291      	cmp	r1, r2
 8004d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d8c:	d100      	bne.n	8004d90 <memcpy+0xc>
 8004d8e:	4770      	bx	lr
 8004d90:	b510      	push	{r4, lr}
 8004d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d96:	4291      	cmp	r1, r2
 8004d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d9c:	d1f9      	bne.n	8004d92 <memcpy+0xe>
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <_realloc_r>:
 8004da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da4:	4680      	mov	r8, r0
 8004da6:	4615      	mov	r5, r2
 8004da8:	460c      	mov	r4, r1
 8004daa:	b921      	cbnz	r1, 8004db6 <_realloc_r+0x16>
 8004dac:	4611      	mov	r1, r2
 8004dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004db2:	f7ff bc39 	b.w	8004628 <_malloc_r>
 8004db6:	b92a      	cbnz	r2, 8004dc4 <_realloc_r+0x24>
 8004db8:	f7ff fbcc 	bl	8004554 <_free_r>
 8004dbc:	2400      	movs	r4, #0
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc4:	f000 f81a 	bl	8004dfc <_malloc_usable_size_r>
 8004dc8:	4285      	cmp	r5, r0
 8004dca:	4606      	mov	r6, r0
 8004dcc:	d802      	bhi.n	8004dd4 <_realloc_r+0x34>
 8004dce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004dd2:	d8f4      	bhi.n	8004dbe <_realloc_r+0x1e>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	f7ff fc26 	bl	8004628 <_malloc_r>
 8004ddc:	4607      	mov	r7, r0
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d0ec      	beq.n	8004dbc <_realloc_r+0x1c>
 8004de2:	42b5      	cmp	r5, r6
 8004de4:	462a      	mov	r2, r5
 8004de6:	4621      	mov	r1, r4
 8004de8:	bf28      	it	cs
 8004dea:	4632      	movcs	r2, r6
 8004dec:	f7ff ffca 	bl	8004d84 <memcpy>
 8004df0:	4621      	mov	r1, r4
 8004df2:	4640      	mov	r0, r8
 8004df4:	f7ff fbae 	bl	8004554 <_free_r>
 8004df8:	463c      	mov	r4, r7
 8004dfa:	e7e0      	b.n	8004dbe <_realloc_r+0x1e>

08004dfc <_malloc_usable_size_r>:
 8004dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e00:	1f18      	subs	r0, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bfbc      	itt	lt
 8004e06:	580b      	ldrlt	r3, [r1, r0]
 8004e08:	18c0      	addlt	r0, r0, r3
 8004e0a:	4770      	bx	lr

08004e0c <_init>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr

08004e18 <_fini>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	bf00      	nop
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr
